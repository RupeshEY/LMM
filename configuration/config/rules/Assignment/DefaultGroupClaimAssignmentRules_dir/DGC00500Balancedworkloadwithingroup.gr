package rules.Assignment.DefaultGroupClaimAssignmentRules_dir

uses gw.api.locale.DisplayKey
uses gw.api.system.CCLoggerCategory

@gw.rules.RuleName("DGC00500 - Balanced workload within group")
internal class DGC00500Balancedworkloadwithingroup {
  static function doCondition(claim : entity.Claim) : boolean {
    
/*start00rule*/
return // weighted workload assignment enabled?
  gw.api.system.CCConfigParameters.WeightedAssignmentEnabled.Value

and 

// Checks if there are users who are active, members and whose vacation status is at work
claim.CurrentAssignment.AssignedGroup.Users.toList().hasMatch(\ aUser -> aUser.User.Credential.Active 
  and aUser.Member 
  and aUser.User.VacationStatus == VacationStatusType.TC_ATWORK)
/*end00rule*/

  }

  static function doAction(claim : entity.Claim, actions : gw.rules.Action) {

/*start00rule*/
// try assignment by workload. Do not cascade into subgroups
var assignmentSuccess = claim.assignUserByWorkload(false, claim.CurrentAssignment.AssignedGroup)

// debug logging
if (CCLoggerCategory.ASSIGNMENT_WEIGHTED_WORKLOAD.DebugEnabled and assignmentSuccess) {
  CCLoggerCategory.ASSIGNMENT_WEIGHTED_WORKLOAD.debug(DisplayKey.get("Rules.Assignment.DefaultGroup.Claim", actions.getRule().DisplayName))
  CCLoggerCategory.ASSIGNMENT_WEIGHTED_WORKLOAD.debug(DisplayKey.get("Rules.Assignment.AssignedUserIs", claim.AssignedUser))
}

actions.exit()
/*end00rule*/

  }
}
