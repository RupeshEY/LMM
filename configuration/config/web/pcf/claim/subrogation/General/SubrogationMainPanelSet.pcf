<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <PanelSet
    id="SubrogationMainPanelSet">
    <Require
      name="claim"
      type="Claim"/>
    <Variable
      initialValue="claim.SubrogationSummary"
      name="subrogationSummary"
      type="SubrogationSummary"/>
    <Variable
      initialValue="not subrogationSummary.SubrogateIndividualExposures and subrogationSummary.Status == TC_CLOSED"
      name="showCloseFields"
      recalculateOnRefresh="true"
      type="boolean"/>
    <Variable
      initialValue="new gw.document.DocumentsActionsUIHelper()"
      name="documentsActionsHelper"
      type="gw.document.DocumentsActionsUIHelper"/>
    <CardViewPanel>
      <Card
        id="GeneralTab"
        title="DisplayKey.get(&quot;Web.Subrogation.Tab.General&quot;)">
        <PanelRow>
          <PanelColumn
            width="30%">
            <DetailViewPanel>
              <InputColumn>
                <Label
                  label="DisplayKey.get(&quot;NVV.Claim.Subrogation&quot;)"/>
                <TextInput
                  id="Jurisdiction"
                  label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.SubrogationStatus.Jurisdiction&quot;)"
                  value="claim.JurisdictionState"
                  valueType="typekey.Jurisdiction"/>
                <TypeKeyInput
                  editable="true"
                  id="Notification_Fault"
                  label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.SubrogationStatus.Fault&quot;)"
                  value="claim.FaultRating"
                  valueType="typekey.FaultRating">
                  <PostOnChange
                    target="Notification_AtFaultPercentage"/>
                </TypeKeyInput>
                <TextInput
                  editable="true"
                  formatType="percentagePoints"
                  id="Notification_AtFaultPercentage"
                  label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.SubrogationStatus.AtFaultPercentage&quot;)"
                  value="claim.Fault"
                  valueType="java.math.BigDecimal"
                  visible="claim.FaultRating == FaultRating.TC_1 "/>
                <TypeKeyInput
                  editable="not subrogationSummary.SubrogateIndividualExposures"
                  id="Status"
                  label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.SubrogationStatus&quot;)"
                  required="true"
                  value="subrogationSummary.Status"
                  valueType="typekey.SubrogationStatus">
                  <PostOnChange/>
                </TypeKeyInput>
                <DateInput
                  id="CloseDate"
                  label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.CloseDt&quot;)"
                  required="true"
                  value="subrogationSummary.CloseDate"
                  visible="showCloseFields"/>
                <TextInput
                  editable="subrogationSummary.Subrogations.first().isFieldChanged(Subrogation#Status)"
                  id="CloseComment"
                  label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.CloseComment&quot;)"
                  value="subrogationSummary.CloseComment"
                  visible="showCloseFields"/>
                <TypeKeyInput
                  editable="subrogationSummary.Subrogations.first().isFieldChanged(Subrogation#Status)"
                  id="Outcome"
                  label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.Outcome&quot;)"
                  required="true"
                  value="subrogationSummary.ClosedOutcome"
                  valueType="typekey.SubroClosedOutcome"
                  visible="showCloseFields"/>
                <BooleanRadioInput
                  editable="true"
                  id="SubroExternalOwner"
                  label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.SubrogationExternallyOwned&quot;)"
                  required="true"
                  value="subrogationSummary.ExtOwned"
                  visible="true">
                  <PostOnChange
                    onChange="if (!subrogationSummary.ExtOwned) { subrogationSummary.Claim.subrogator = null}"/>
                </BooleanRadioInput>
                <!-- onChange="if (true) { subrogationSummary.Claim.Subrogator = null}" -->
                <ClaimContactInput
                  claim="claim"
                  editable="true"
                  id="Subrogator"
                  label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.Subrogator&quot;)"
                  required="subrogationSummary.ExtOwned"
                  value="claim.subrogator"
                  valueRange="claim.RelatedContacts"
                  visible="subrogationSummary.ExtOwned"/>
              </InputColumn>
              <InputColumn>
                <InputSet
                  id="SubroReferralInfo"
                  visible="subrogationSummary.EscalateSubro">
                  <Label
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Referral&quot;)"/>
                  <TextInput
                    id="SubroReferralOwner"
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.ReferralOwner&quot;)"
                    value="subrogationSummary.Subrogations.singleWhere( \ subrogation -&gt; subrogation.Exposure == null).AssignedUser"
                    valueType="entity.User"
                    visible="not subrogationSummary.SubrogateIndividualExposures"/>
                  <DateInput
                    dateFormat="short"
                    id="SubroReferralDate"
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.ReferralDate&quot;)"
                    timeFormat="short"
                    value="subrogationSummary.SubroReferralDate"/>
                  <TextAreaInput
                    id="SubroReferralComment"
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.ReferralComment&quot;)"
                    numCols="35"
                    numRows="2"
                    required="true"
                    value="subrogationSummary.SubroReferralComment"
                    visible="subrogationSummary.EscalateSubro"/>
                </InputSet>
                <InputSet
                  visible="not subrogationSummary.SubroAdverseParties.IsEmpty">
                  <Label
                    label="DisplayKey.get(&quot;Web.Subrogation.Deductible&quot;)"/>
                  <BooleanRadioInput
                    editable="true"
                    id="ProrateDeductible"
                    label="DisplayKey.get(&quot;Web.Subrogation.Deductible.Prorate&quot;)"
                    required="true"
                    value="subrogationSummary.ProrateDeductible">
                    <PostOnChange
                      target="DeductibleToRepay"/>
                  </BooleanRadioInput>
                  <CurrencyInput
                    id="DeductibleToRepay"
                    label="DisplayKey.get(&quot;Web.Subrogation.Deductible.ToRepay&quot;)"
                    value="subrogationSummary.DeductibleToRepay"
                    valueType="gw.api.financials.CurrencyAmount"/>
                  <CurrencyInput
                    id="DeductibleRepaid"
                    label="DisplayKey.get(&quot;Web.Subrogation.Deductible.Repaid&quot;)"
                    value="subrogationSummary.DeductibleRepaid"
                    valueType="gw.api.financials.CurrencyAmount"/>
                </InputSet>
              </InputColumn>
            </DetailViewPanel>
          </PanelColumn>
        </PanelRow>
        <PanelDivider/>
        <PanelRow>
          <PanelColumn>
            <DetailViewPanel>
              <InputColumn>
                <ListViewInput
                  boldLabel="true"
                  def="EditableAdverseGeneralLV(claim)"
                  editable="true"
                  id="AdversePartyInfo"
                  label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParties&quot;)"
                  labelAbove="true">
                  <Toolbar>
                    <AddButton
                      hideIfReadOnly="true"
                      id="AddResponsibleParty"
                      iterator="AdversePartyInfo.EditableAdverseGeneralLV"
                      label="DisplayKey.get(&quot;Web.Subrogation.ResponsibleParties.Add&quot;)"
                      pickLocation="NewSubroAdversePartyPopup.push(claim)"
                      visible="perm.System.editsubrodetails"/>
                    <IteratorButtons
                      addVisible="false"
                      iterator="AdversePartyInfo.EditableAdverseGeneralLV"
                      removeConfirmMessage="DisplayKey.get(&quot;Web.Subrogation.Warning.RemovingParty&quot;)"
                      removeVisible="perm.System.editsubrodetails"/>
                  </Toolbar>
                </ListViewInput>
                <CheckBoxInput
                  available="subrogationSummary.SubrogateIndividualExposures ? not subrogationSummary.Subrogations.hasMatch(\ subrogation -&gt; subrogation.Status == TC_OPEN or subrogation.Status == TC_CLOSED) : subrogationSummary.Claim.Exposures.length &gt; 0 and subrogationSummary.Status != TC_CLOSED"
                  confirmMessage="DisplayKey.get(&quot;Web.Subrogation.Warning.ExposureDataLost&quot;)"
                  editable="true"
                  hideIfReadOnly="true"
                  id="SubrogateIndividualExposures"
                  labelAbove="true"
                  showConfirmMessage="subrogationSummary.SubrogateIndividualExposures"
                  value="subrogationSummary.SubrogateIndividualExposures"
                  valueLabel="DisplayKey.get(&quot;Web.Subrogation.SubrogateIndividualExposures&quot;)">
                  <PostOnChange/>
                </CheckBoxInput>
                <ListViewInput
                  boldLabel="true"
                  editable="true"
                  id="SubrogatedExposures"
                  label="DisplayKey.get(&quot;Web.Subrogation.ExposuresInSubrogation&quot;)"
                  labelAbove="true"
                  visible="subrogationSummary.SubrogateIndividualExposures">
                  <Toolbar>
                    <AddButton
                      hideIfReadOnly="true"
                      id="AddSubrogation"
                      iterator="SubrogationsLV"
                      label="DisplayKey.get(&quot;Web.Subrogation.Exposures.Add&quot;)"
                      visible="subrogationSummary.Subrogations.length &lt; claim.Exposures.length and perm.System.editsubrodetails"/>
                    <RemoveButton
                      flags="all Removable"
                      hideIfReadOnly="true"
                      id="RemoveSubrogation"
                      iterator="SubrogationsLV"
                      label="DisplayKey.get(&quot;Web.Subrogation.Remove&quot;)"
                      visible="perm.System.editsubrodetails"/>
                    <CheckedValuesToolbarButton
                      allCheckedRowsAction="AssignSubrogationPopup.push(new gw.api.subrogation.SubrogationAssignmentPopup(CheckedValues))"
                      available="perm.System.editsubrodetails"
                      id="AssignExposureLevelSubrogation"
                      iterator="SubrogationsLV"
                      label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.Assign.Title&quot;)"
                      visible="not CurrentLocation.InEditMode and subrogationSummary.EscalateSubro"/>
                  </Toolbar>
                  <ListViewPanel
                    id="SubrogationsLV">
                    <RowIterator
                      checkBoxVisible="CurrentLocation.InEditMode or subrogationSummary.EscalateSubro"
                      editable="true"
                      elementName="subrogation"
                      hasCheckBoxes="true"
                      toCreateAndAdd="subrogationSummary.createNewSubrogation()"
                      toRemove="subrogationSummary.removeExposureSubrogation(subrogation)"
                      type="Subrogation"
                      value="subrogationSummary.Subrogations"
                      valueType="entity.Subrogation[]">
                      <ToolbarFlag
                        condition="subrogation.Status != TC_OPEN and subrogation.Status != TC_CLOSED"
                        name="Removable"/>
                      <Row>
                        <RangeCell
                          action="SubrogationDetail.drilldown(subrogation)"
                          available="subrogation.Exposure == null or not subrogation.New"
                          editable="subrogation.Exposure == null"
                          flex="1"
                          id="Exposure"
                          label="DisplayKey.get(&quot;Web.Subrogation.Exposure&quot;)"
                          required="true"
                          sortOrder="1"
                          value="subrogation.Exposure"
                          valueRange="subrogation.Exposure == null ? subrogationSummary.UnsubrogatedExposures : new Exposure[]{subrogation.Exposure}"
                          valueType="entity.Exposure">
                          <PostOnChange
                            target="SubrogationsLV"/>
                        </RangeCell>
                        <BooleanRadioCell
                          icon="'service_request_complete.png'"
                          id="CustomizedLiability"
                          label="DisplayKey.get(&quot;Web.Subrogation.CustomizedLiability&quot;)"
                          showHeaderIcon="false"
                          value="subrogation.CustomizedLiability"
                          visible="not subrogationSummary.Subrogations*.SubroAdversePartyOverrides.IsEmpty"/>
                        <TypeKeyCell
                          editable="true"
                          flex="0"
                          id="Status"
                          label="DisplayKey.get(&quot;Web.Subrogation.Status&quot;)"
                          required="true"
                          value="subrogation.Status"
                          valueType="typekey.SubrogationStatus">
                          <PostOnChange
                            target="SubrogateIndividualExposures"/>
                        </TypeKeyCell>
                        <TextCell
                          id="Owner"
                          label="DisplayKey.get(&quot;Web.Subrogation.Owner&quot;)"
                          value="subrogation.AssignedUser"
                          valueType="entity.User"
                          visible="subrogationSummary.EscalateSubro and subrogationSummary.SubrogateIndividualExposures"/>
                        <DateCell
                          id="CloseDate"
                          label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.CloseDt&quot;)"
                          value="subrogation.CloseDate"
                          valueVisible="subrogation.Status == TC_CLOSED"/>
                        <TextCell
                          editable="subrogation.Status == TC_CLOSED and subrogation.isFieldChanged(entity.Subrogation#Status)"
                          id="CloseComment"
                          label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.CloseComment&quot;)"
                          value="subrogation.CloseComment"
                          valueVisible="subrogation.Status == TC_CLOSED"/>
                        <TypeKeyCell
                          editable="subrogation.Status == TC_CLOSED and subrogation.isFieldChanged(entity.Subrogation#Status)"
                          id="Outcome"
                          label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.Outcome&quot;)"
                          required="true"
                          value="subrogation.Outcome"
                          valueType="typekey.SubroClosedOutcome"
                          valueVisible="subrogation.Status == TC_CLOSED"/>
                      </Row>
                    </RowIterator>
                  </ListViewPanel>
                </ListViewInput>
                <ListViewInput
                  boldLabel="true"
                  def="EditableStatuteLV(claim)"
                  editable="true"
                  id="StatuteLimitations"
                  label="DisplayKey.get(&quot;NVV.Claim.Subro.StatuteLimitations&quot;)"
                  labelAbove="true">
                  <Toolbar>
                    <IteratorButtons
                      iterator="StatuteLimitations.EditableStatuteLV"/>
                  </Toolbar>
                </ListViewInput>
                <InputSet
                  visible="claim.getPartiesInMatters().length() &gt; 0 or claim.getSubroMatters().length &gt; 0">
                  <Label
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.Matters&quot;)"/>
                  <TextInput
                    id="SubroArbThoseInvolved"
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.Arbitration.ThoseInvolved&quot;)"
                    value="claim.getPartiesInMatters()"/>
                  <ListViewInput
                    editable="false"
                    labelAbove="true">
                    <!-- label="DisplayKey.get(&quot;NVV.Claim.Subro.Matters&quot;)" -->
                    <Toolbar/>
                    <ListViewPanel
                      id="SubroMattersLV">
                      <RowIterator
                        editable="true"
                        elementName="Matter"
                        hideCheckBoxesIfReadOnly="true"
                        pageSize="5"
                        type="entity.Matter"
                        value="claim.getSubroMatters()"
                        valueType="entity.Matter[]">
                        <Row>
                          <TextCell
                            action="MatterDetailGroup.go(claim, Matter)"
                            id="Name"
                            label="DisplayKey.get(&quot;LV.Subro.Matters.Name&quot;)"
                            sortOrder="2"
                            value="Matter.Name"/>
                          <TypeKeyCell
                            id="TrialDetails_MatterType"
                            label="DisplayKey.get(&quot;LV.Subro.Matters.MatterType&quot;)"
                            required="false"
                            value="Matter.MatterType"
                            valueType="typekey.MatterType"/>
                          <DateCell
                            dateFormat="short"
                            id="TrialDetails_TrialDate"
                            label="DisplayKey.get(&quot;LV.Subro.Matters.TrialDate&quot;)"
                            required="false"
                            timeFormat="short"
                            value="Matter.TrialDateActivity.TargetDate"
                            wrapLabel="true"/>
                          <DateCell
                            id="Matter_CloseDate"
                            label="DisplayKey.get(&quot;LV.Subro.Matters.CloseDate&quot;)"
                            value="Matter.CloseDate"
                            wrapLabel="true"/>
                        </Row>
                      </RowIterator>
                    </ListViewPanel>
                  </ListViewInput>
                </InputSet>
              </InputColumn>
            </DetailViewPanel>
          </PanelColumn>
        </PanelRow>
      </Card>
      <Card
        id="NotesTab"
        title="DisplayKey.get(&quot;Web.Subrogation.Tab.Notes&quot;)">
        <PanelRef
          def="WideNotesLV(claim.getSubroNotes(), true)">
          <Toolbar>
            <ToolbarButton
              action="NewNotePopup.push(claim, NoteTopicType.TC_SUBROGATION)"
              id="NewNoteButton"
              label="DisplayKey.get(&quot;Web.Subrogation.Notes.AddNote&quot;)"/>
            <CheckedValuesToolbarButton
              checkedRowAction="EditNotePopup.push(CheckedValue, false, true)"
              flags="one CanEdit"
              id="EditButton"
              iterator="WideNotesLV.NoteIterator"
              label="DisplayKey.get(&quot;Web.Subrogation.Notes.EditNote&quot;)"/>
            <CheckedValuesToolbarButton
              checkedRowAction="gw.api.note.NotesUtilBase.deleteNote(CheckedValue)"
              flags="all CanDelete"
              id="DeleteButton"
              iterator="WideNotesLV.NoteIterator"
              label="DisplayKey.get(&quot;Web.Subrogation.Notes.DeleteNote&quot;)"/>
            <CheckedValuesToolbarButton
              checkedRowAction="gw.api.print.PrintNoteAction.printNote(CheckedValue)"
              download="true"
              flags="one CanPrint"
              id="PrintButton"
              iterator="WideNotesLV.NoteIterator"
              label="DisplayKey.get(&quot;Web.Subrogation.Notes.PrintNote&quot;)"/>
          </Toolbar>
        </PanelRef>
      </Card>
      <Card
        id="DocumentsTab"
        title="DisplayKey.get(&quot;Web.Subrogation.Tab.Documents&quot;)">
        <PanelRef
          def="DocumentAlertPanelSet()"/>
        <PanelRef
          def="SubrogationDocumentsLV(subrogationSummary.RelatedDocuments)">
          <Toolbar>
            <ToolbarButton
              action="ClaimNewDocumentFromTemplateWorksheet.goInWorkspace(claim, subrogationSummary.DocumentInitForUI)"
              available="documentsActionsHelper.DocumentTemplateActionsAvailable"
              id="CreateFromTemplate"
              label="DisplayKey.get(&quot;Web.Subrogation.Documents.Create&quot;)"/>
            <ToolbarButton
              action="ClaimNewDocumentLinkedWorksheet.goInWorkspace(claim, subrogationSummary.DocumentInitForUI)"
              available="documentsActionsHelper.DocumentMetadataActionsAvailable and documentsActionsHelper.DocumentContentActionsAvailable"
              id="AttachDocument"
              label="DisplayKey.get(&quot;Web.Subrogation.Documents.Attach&quot;)"/>
            <PickerToolbarButton
              action="PickExistingDocumentPopup.push(subrogationSummary.Claim)"
              available="documentsActionsHelper.DocumentMetadataActionsAvailable"
              id="LinkDocument"
              label="DisplayKey.get(&quot;Web.Subrogation.Documents.Link&quot;)"
              onPick="subrogationSummary.linkDocumentForUI(PickedValue)"/>
            <ToolbarButton
              action="null"
              available="documentsActionsHelper.DocumentContentServerAvailable"
              id="RefreshAsyncContent"
              label="DisplayKey.get(&quot;Web.DocumentsLV.Button.AsynchronousRefresh&quot;)"
              tooltip="DisplayKey.get(&quot;Web.DocumentsLV.Button.AsynchronousRefresh.Tooltip&quot;)"
              visible="documentsActionsHelper.isShowAsynchronousRefreshAction(subrogationSummary.RelatedDocuments)"/>
          </Toolbar>
        </PanelRef>
      </Card>
    </CardViewPanel>
  </PanelSet>
</PCF>
