<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <!-- This file automatically generated from nvv_claim.xml -->
  <DetailViewPanel
    id="SubrogationPartyDetailDV">
    <Require
      name="subroadverseparty"
      type="SubroAdverseParty"/>
    <Variable
      initialValue="subroadverseparty.Claim"
      name="claim"
      type="entity.Claim"/>
    <Variable
      initialValue="subroadverseparty.OverridesForAllExposures"
      name="allOverrides"
      recalculateOnRefresh="true"
      type="SubroAdversePartyOverride[]"/>
    <InputColumn>
      <Label
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.PartyDetails&quot;)"/>
      <ClaimContactInput
        claim="subroadverseparty.Claim"
        editable="true"
        id="Adverse"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.PartyDetails.Contact&quot;)"
        onPick="subroadverseparty.Claim.createClaimContact(subroadverseparty.AdverseParty)"
        required="true"
        validationExpression="subroadverseparty.AdverseParty != claim.Insured ? null : DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.PartyDetails.Contact.Error&quot;)"
        value="subroadverseparty.AdverseParty"
        valueRange="subroadverseparty.Claim.RelatedContacts.where(\contact -&gt; not claim.SubrogationSummary.SubroAdverseParties*.AdverseParty.contains(contact))"/>
      <TextInput
        id="AdverseParty_PrimaryPhone"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.PartyDetails.PrimaryPhone&quot;)"
        value="subroadverseparty.AdverseParty.PrimaryPhoneValue">
        <Reflect
          triggerIds="Adverse"
          value="VALUE.PrimaryPhoneValue"/>
      </TextInput>
      <TextAreaInput
        id="AdverseParty_Address"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.PartyDetails.Address&quot;)"
        numCols="35"
        numRows="2"
        value="subroadverseparty.AdverseParty.PrimaryAddressDisplayValue">
        <Reflect
          triggerIds="Adverse"
          value="VALUE.PrimaryAddressDisplayValue"/>
      </TextAreaInput>
      <TextInput
        editable="true"
        formatType="percentagePoints"
        id="LiabilityPercentage"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.PartyDetails.Liability&quot;)"
        required="true"
        value="subroadverseparty.Fault"
        valueType="java.math.BigDecimal"/>
      <TextInput
        editable="true"
        formatType="percentagePoints"
        id="ExpectedRecovery"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.PartyDetails.Expectedrecovery&quot;)"
        required="true"
        value="subroadverseparty.ExpectedRecovery"
        valueType="java.math.BigDecimal"/>
      <ListViewInput
        boldLabel="true"
        editable="false"
        id="Overrides"
        label="DisplayKey.get(&quot;Web.Subrogation.CustomizedLiability&quot;)"
        labelAbove="true"
        visible="not allOverrides.IsEmpty">
        <Toolbar/>
        <ListViewPanel>
          <RowIterator
            editable="false"
            elementName="partyOverride"
            type="SubroAdversePartyOverride"
            value="allOverrides"
            valueType="entity.SubroAdversePartyOverride[]">
            <Row>
              <TextCell
                action="SubrogationDetail.go(partyOverride.Subrogation)"
                id="Exposure"
                label="DisplayKey.get(&quot;Web.Subrogation.Exposure&quot;)"
                value="partyOverride.Subrogation.Exposure"
                valueType="entity.Exposure"/>
              <TextCell
                formatType="percentagePoints"
                id="Liability"
                label="DisplayKey.get(&quot;LV.Claim.Subro.AdverseParty.Liability&quot;)"
                value="partyOverride.Fault"
                valueType="java.math.BigDecimal"/>
              <TextCell
                formatType="percentagePoints"
                id="ExpectedRecovery"
                label="DisplayKey.get(&quot;LV.Claim.Subro.AdverseParty.Expectedrecovery&quot;)"
                value="partyOverride.ExpectedRecovery"
                valueType="java.math.BigDecimal"/>
            </Row>
          </RowIterator>
        </ListViewPanel>
      </ListViewInput>
      <InputDivider/>
      <Label
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.POA&quot;)"/>
      <TypeKeyInput
        editable="true"
        id="Classification"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.POA.Classification&quot;)"
        required="false"
        value="subroadverseparty.Classification"
        valueType="typekey.SubroClassification">
        <PostOnChange/>
      </TypeKeyInput>
      <TypeKeyInput
        editable="true"
        id="Strategy"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.POA.Strategy&quot;)"
        required="false"
        value="subroadverseparty.Strategy"
        valueType="typekey.SubroStrategy">
        <PostOnChange/>
      </TypeKeyInput>
      <TypeKeyInput
        editable="true"
        id="GovInvolved"
        label="DisplayKey.get(&quot;LV.Claim.Subro.AdversePartyList.GovInvolved&quot;)"
        required="false"
        value="subroadverseparty.SubroGovernmentInvolved"
        valueType="typekey.SubroGovernmentInvolved">
        <PostOnChange/>
      </TypeKeyInput>
      <InputDivider/>
      <Label
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.KeyContact&quot;)"/>
      <ClaimContactInput
        available="subroadverseparty.AdverseParty != null"
        claim="subroadverseparty.Claim"
        editable="true"
        id="SubroKeyContact"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.KeyContact.Name&quot;)"
        required="false"
        value="subroadverseparty.AdverseParty.PrimaryContact"
        valueRange="subroadverseparty.Claim.RelatedContacts">
        <Reflect
          available="VALUE != null"
          triggerIds="Adverse"/>
      </ClaimContactInput>
      <TypeKeyInput
        editable="true"
        id="RelationToAdverse"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.KeyContact.RelationToAdverse&quot;)"
        value="subroadverseparty.MainContactType"
        valueType="typekey.PersonRelationType">
        <Reflect
          triggerIds="SubroKeyContact">
          <ReflectCondition
            condition="VALUE==subroadverseparty.AdverseParty"
            value="&quot;self&quot;"/>
          <ReflectCondition
            condition="true"
            value="&quot;&quot;"/>
        </Reflect>
      </TypeKeyInput>
      <TextInput
        id="KeyContact_PrimaryPhone"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.KeyContact.PrimaryPhone&quot;)"
        value="subroadverseparty.AdverseParty.PrimaryContact.PrimaryPhoneValue">
        <Reflect
          triggerIds="SubroKeyContact"
          value="VALUE.PrimaryPhoneValue"/>
      </TextInput>
      <TextAreaInput
        id="KeyContact_Address"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.KeyContact.Address&quot;)"
        numCols="35"
        numRows="2"
        value="subroadverseparty.AdverseParty.PrimaryContact.PrimaryAddressDisplayValue">
        <Reflect
          triggerIds="SubroKeyContact"
          value="VALUE.PrimaryAddressDisplayValue"/>
      </TextAreaInput>
      <InputSet
        visible="subroadverseparty.Classification == TC_INSURED or subroadverseparty.AdverseParty.Thirdpartyinsurer != null">
        <InputDivider/>
        <Label
          label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.Insurer&quot;)"/>
        <ClaimContactInput
          claim="subroadverseparty.Claim"
          editable="true"
          id="Insurer"
          label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.Insurer.Insurer&quot;)"
          required="subroadverseparty.Classification == TC_INSURED"
          value="subroadverseparty.AdverseParty.Thirdpartyinsurer"
          valueRange="subroadverseparty.Claim.RelatedCompanyArray"
          valueType="entity.Company"/>
        <TextInput
          id="Insurer_PrimaryPhone"
          label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.Insurer.PrimaryPhone&quot;)"
          value="subroadverseparty.AdverseParty.Thirdpartyinsurer.PrimaryPhoneValue">
          <Reflect
            triggerIds="Insurer"
            value="VALUE.PrimaryPhoneValue"/>
        </TextInput>
        <ClaimContactInput
          claim="subroadverseparty.Claim"
          id="InsurerContact"
          label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.Insurer.PrimaryContact&quot;)"
          value="subroadverseparty.AdverseParty.Thirdpartyinsurer.PrimaryContact"
          valueRange="subroadverseparty.Claim.RelatedPersonArray"/>
        <TextInput
          editable="true"
          id="ClaimNumber"
          label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.Insurer.ClaimNumber&quot;)"
          value="subroadverseparty.ClaimNumber"/>
        <TextInput
          editable="true"
          id="PolicyNumber"
          label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.Insurer.PolicyNumber&quot;)"
          value="subroadverseparty.PolicyNumber"/>
      </InputSet>
      <InputDivider
        visible="subroadverseparty.Strategy == TC_COLLECTION or subroadverseparty.AdverseParty.CollectionAgency != null"/>
      <Label
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.Collection&quot;)"
        visible="subroadverseparty.Strategy == TC_COLLECTION or subroadverseparty.AdverseParty.CollectionAgency != null"/>
      <ClaimContactInput
        claim="subroadverseparty.Claim"
        editable="true"
        id="collectionagency"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.Collection.Collection&quot;)"
        value="subroadverseparty.AdverseParty.CollectionAgency"
        valueRange="subroadverseparty.Claim.RelatedCompanyArray"
        valueType="entity.Company"
        visible="subroadverseparty.Strategy == TC_COLLECTION or subroadverseparty.AdverseParty.CollectionAgency != null"/>
    </InputColumn>
    <InputColumn>
      <Label
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.Recoveries&quot;)"
        visible="perm.Claim.viewrecoveries(subroadverseparty.Claim)"/>
      <CurrencyInput
        formatType="currency"
        id="CalcRecovFromPayee"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.Recoveries.CalcRecovFromPayee&quot;)"
        value="subroadverseparty.getTotAmountRecoveredForParty()"
        visible="perm.Claim.viewrecoveries(subroadverseparty.Claim)"/>
      <CurrencyInput
        formatType="currency"
        id="TotClaimCostSubroRecoveryForParty"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.Recoveries.TotClaimCostSubroRecoveryForParty&quot;)"
        value="subroadverseparty.getTotClaimCostSubroRecoveryForParty()"
        visible="perm.Claim.viewrecoveries(subroadverseparty.Claim)"/>
      <Label
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.ScheduledPayment&quot;)"/>
      <BooleanRadioInput
        editable="true"
        id="ScheduleRecovery"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.ScheduledPayment.PaymentScheduled&quot;)"
        value="subroadverseparty.ScheduleRecovery">
        <PostOnChange/>
      </BooleanRadioInput>
      <TypeKeyInput
        editable="true"
        id="ScheduleRecoveryType"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.ScheduledPayment.Type&quot;)"
        value="subroadverseparty.ScheduleRecoveryType"
        valueType="typekey.SubroSchedRecoveryType"
        visible="subroadverseparty.ScheduleRecovery">
        <PostOnChange/>
      </TypeKeyInput>
      <DateInput
        editable="true"
        id="NoteSent"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.ScheduledPayment.NoteSent&quot;)"
        required="false"
        value="subroadverseparty.NoteSent"
        visible="subroadverseparty.ScheduleRecovery and subroadverseparty.ScheduleRecoveryType == TC_PROMISSORY"/>
      <DateInput
        editable="true"
        id="NoteReceived"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.ScheduledPayment.NoteReceived&quot;)"
        required="false"
        value="subroadverseparty.NoteReceived"
        visible="subroadverseparty.ScheduleRecovery and subroadverseparty.ScheduleRecoveryType == TC_PROMISSORY"/>
      <CurrencyInput
        formatType="currency"
        id="TotalAmount"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.ScheduledPayment.TotalAmount&quot;)"
        required="false"
        value="subroadverseparty.TotPromissoryAmount()"
        visible="subroadverseparty.ScheduleRecovery"/>
      <CurrencyInput
        formatType="currency"
        id="CalcOSForPayee"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.ScheduledPayment.CalcOSForPayee&quot;)"
        value="(subroadverseparty.TotPromissoryAmount() - subroadverseparty.getTotAmountRecoveredForParty())"
        visible="subroadverseparty.ScheduleRecovery"/>
      <CurrencyInput
        formatType="currency"
        id="CalcExpectedOSFromPayee"
        label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParty.ScheduledPayment.CalcExpectedOSFromPayee&quot;)"
        value="(subroadverseparty.PromissoryAmountDueAsOf() - subroadverseparty.getTotAmountRecoveredForParty())"
        visible="subroadverseparty.ScheduleRecovery"/>
      <ListViewInput
        boldLabel="true"
        def="EditablePaymentScheduleLV(subroadverseparty)"
        editable="perm.Claim.createanytransaction(subroadverseparty.Claim)"
        id="PaymentPlan_ScheduledPayments"
        label="DisplayKey.get(&quot;LV.Claim.Subro.PaymentPlan.ScheduledPayments&quot;)"
        labelAbove="true"
        visible="subroadverseparty.ScheduleRecovery">
        <Toolbar>
          <IteratorButtons
            iterator="PaymentPlan_ScheduledPayments.EditablePaymentScheduleLV"/>
        </Toolbar>
      </ListViewInput>
    </InputColumn>
    <InputFooterSection/>
  </DetailViewPanel>
</PCF>