<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <CardViewPanel
    id="ExposureDetailDV"
    mode="Medpay">
    <Require
      name="Exposure"
      type="Exposure"/>
    <Require
      name="unusedServiceRequests"
      type="java.util.Set&lt;ServiceRequest&gt;"/>
    <Card
      id="MedPay_DetailsCard"
      title="DisplayKey.get(&quot;NVV.Exposure.MedPay.Details&quot;)">
      <DetailViewPanel
        id="ExposureDetailDV">
        <InputColumn>
          <Label
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.Overall&quot;)"/>
          <TypeKeyInput
            id="LossParty"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.LossParty&quot;)"
            required="true"
            value="Exposure.LossParty"
            valueType="typekey.LossPartyType"/>
          <DateInput
            id="ClosedDate"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.ClosedDate&quot;)"
            value="Exposure.CloseDate"
            visible=" Exposure.State == TC_CLOSED "/>
          <TypeKeyInput
            id="PrimaryCoverage"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.PrimaryCoverage&quot;)"
            value="Exposure.PrimaryCoverage"
            valueType="typekey.CoverageType"/>
          <TypeKeyInput
            id="ClosedOutcome"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.ClosedOutcome&quot;)"
            value="Exposure.ClosedOutcome"
            valueType="typekey.ExposureClosedOutcomeType"
            visible=" Exposure.State == TC_CLOSED "/>
          <TypeKeyInput
            id="CoverageSubType"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.CoverageSubType&quot;)"
            value="Exposure.CoverageSubType"
            valueType="typekey.CoverageSubtype"/>
          <DateInput
            dateFormat="short"
            id="ReOpenDate"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.ReOpenDate&quot;)"
            value="Exposure.ReOpenDate"
            visible=" Exposure.ReOpenDate != null "/>
          <RangeInput
            editable="true"
            helpText="DisplayKey.get(&quot;Exposure.Coverage.helpText&quot;)"
            id="Coverage"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.Coverage&quot;)"
            value="Exposure.Coverage"
            valueRange="Exposure.Claim.Policy.getCoveragesByCoverageType(Exposure.PrimaryCoverage)"
            valueType="entity.Coverage"/>
          <TypeKeyInput
            id="ReopenedReason"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.ReopenedReason&quot;)"
            value="Exposure.ReopenedReason"
            valueType="typekey.ExposureReopenedReason"
            visible=" Exposure.ReOpenDate != null "/>
          <TextInput
            action="UserContactDetailPopup.push(Exposure.AssignedUser)"
            available="Exposure.AssignedUser.Contact != null"
            id="AssignedUser_Name"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.AssignedUser.Name&quot;)"
            value="Exposure.AssigneeDisplayString"/>
          <TextInput
            id="AssignedGroup_Name"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.AssignedGroup.Name&quot;)"
            value="Exposure.AssigneeGroupOnlyDisplayString"/>
          <TypeKeyInput
            id="State"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.State&quot;)"
            value="Exposure.State"
            valueType="typekey.ExposureState"/>
          <DateInput
            id="CreateTime"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.CreateTime&quot;)"
            value="Exposure.CreateTime"/>
          <InputSet
            visible="Exposure.Claim.Policy.StatCodingEnabled">
            <PolicyStatCodePickerInput
              action="ClaimPolicyStatCodePickerPopup.push(Exposure.Claim)"
              editable="true"
              id="StatLine"
              label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.StatLine&quot;)"
              value="Exposure.StatLine"
              valueRange="Exposure.Claim.Policy.CappedStatCodes"/>
            <InputSet
              hideIfReadOnly="true"
              visible="true">
              <TextInput
                id="StatLine_Warning"
                value="DisplayKey.get(&quot;Java.StatCodes.StatCodeListCappedWarning&quot;, Exposure.Claim.Policy.StatCodeListCap, Exposure.Claim.Policy.StatCodes.length)"
                visible="Exposure.Claim.Policy.StatCodeListCapped"/>
            </InputSet>
          </InputSet>
          <TypeKeyInput
            id="ValidationLevel"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.ValidationLevel&quot;)"
            value="Exposure.ValidationLevel"
            valueType="typekey.ValidationLevel"/>
          <InputDivider/>
          <Label
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.Claimant&quot;)"/>
          <ClaimContactInput
            claim="Exposure.Claim"
            editable="true"
            id="Claimant_Picker"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.Claimant.Picker&quot;)"
            required="true"
            value="Exposure.Claimant"
            valueRange="Exposure.Claim.getRelatedContacts(Exposure.getContactType(TC_CLAIMANT))">
            <Reflect
              triggerIds="LossParty">
              <ReflectCondition
                condition="VALUE == TC_INSURED"
                value="Exposure.Claim.Insured"/>
              <ReflectCondition
                condition="true"
                value="&quot;&quot;"/>
            </Reflect>
          </ClaimContactInput>
          <TypeKeyInput
            editable="true"
            id="Claimant_Type"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.Claimant.Type&quot;)"
            required="true"
            value="Exposure.ClaimantType"
            valueType="typekey.ClaimantType">
            <Reflect
              triggerIds="Claimant_Picker">
              <ReflectCondition
                condition="Exposure.Claim.Insured==VALUE"
                value="&quot;insured&quot;"/>
              <ReflectCondition
                condition="true"
                value="&quot;&quot;"/>
            </Reflect>
          </TypeKeyInput>
          <BooleanRadioInput
            editable="true"
            id="Claimant_ContactProhibited"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.Claimant.ContactProhibited&quot;)"
            value="ContactProhibited"/>
          <TextInput
            id="Claimant_PrimaryPhone"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.Claimant.PrimaryPhone&quot;)"
            value="Exposure.Claimant.PrimaryPhoneValue">
            <Reflect
              triggerIds="Claimant_Picker"
              value="VALUE.PrimaryPhoneValue"/>
          </TextInput>
          <TextInput
            id="Claimant_Address"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.Claimant.Address&quot;)"
            value="Exposure.Claimant.PrimaryAddressDisplayValue">
            <Reflect
              triggerIds="Claimant_Picker"
              value="VALUE.PrimaryAddressDisplayValue"/>
          </TextInput>
          <InputDivider/>
          <ClaimContactInput
            claim="Exposure.Claim"
            editable="true"
            id="AltContact_Name"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.AltContact.Name&quot;)"
            required="false"
            value="Exposure.altcontact"
            valueRange="Exposure.Claim.RelatedPersonArray"
            valueType="entity.Person"/>
          <InputSetRef
            def="ExposureWorkloadInputSet(Exposure)"/>
        </InputColumn>
        <InputColumn>
          <InputSetRef
            def="BIDamageInputSet(Exposure)"/>
          <InputDivider/>
          <Label
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.Coding&quot;)"/>
          <TypeKeyInput
            editable="true"
            filter="VALUE.hasCategory(JurisdictionType.TC_INSURANCE)"
            id="JurisdictionState"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.JurisdictionState&quot;)"
            value="Exposure.JurisdictionState"
            valueType="typekey.Jurisdiction"/>
          <TypeKeyInput
            id="Segment"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.Segment&quot;)"
            value="Exposure.Segment"
            valueType="typekey.ClaimSegment"/>
          <TypeKeyInput
            id="Strategy"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.Strategy&quot;)"
            value="Exposure.Strategy"
            valueType="typekey.ClaimStrategy"/>
          <InputDivider/>
          <Label
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.OtherCarrierInvolvement&quot;)"/>
          <BooleanRadioInput
            editable="true"
            id="Claimant_OtherCoverage"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.Claimant.OtherCoverage&quot;)"
            required="false"
            value="Exposure.OtherCoverage"/>
          <ListViewInput
            def="EditableOtherCoverageDetailsLV(Exposure)"
            editable="true"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.OtherCoverageDetails&quot;)">
            <Toolbar>
              <IteratorButtons
                iterator="EditableOtherCoverageDetailsLV.EditableOtherCoverageDetailsLV"/>
            </Toolbar>
          </ListViewInput>
          <InputDivider/>
          <Label
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.Financials&quot;)"
            visible="perm.Claim.viewtransactiondetails(Exposure.Claim)"/>
          <CurrencyInput
            formatType="currency"
            id="RemainingReserves"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.RemainingReserves&quot;)"
            value="Exposure.ExposureRpt.RemainingReserves"
            visible="perm.Claim.viewreserves(Exposure.Claim)"/>
          <CurrencyInput
            id="FuturePayments"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.FuturePayments&quot;)"
            value="Exposure.ExposureRpt.FuturePayments"
            visible="perm.Claim.viewpayments(Exposure.Claim)"/>
          <CurrencyInput
            id="TotalPayments"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.TotalPayments&quot;)"
            value="Exposure.ExposureRpt.TotalPayments"
            visible="perm.Claim.viewpayments(Exposure.Claim)"/>
          <CurrencyInput
            id="TotalRecoveries"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.TotalRecoveries&quot;)"
            value="Exposure.ExposureRpt.TotalRecoveries"
            visible="perm.Claim.viewrecoveries(Exposure.Claim)"/>
          <CurrencyInput
            formatType="currency"
            id="TotalIncurredNet"
            label="DisplayKey.get(&quot;NVV.Exposure.SubView.MedPay.Exposure.TotalIncurredNet&quot;)"
            value="Exposure.ExposureRpt.TotalIncurredNet"
            visible="perm.Claim.viewnettotalincurred(Exposure.Claim)"/>
        </InputColumn>
      </DetailViewPanel>
    </Card>
    <Card
      id="Exposure_ISOCard"
      title="DisplayKey.get(&quot;NVV.Exposure.ISO&quot;)"
      visible="!Exposure.Claim.ISOClaimLevelMessaging">
      <PanelRef
        def="ISODetailsDV(Exposure)"/>
    </Card>
    <Code><![CDATA[
property get ContactProhibited() : boolean {
return Exposure.Claim.getClaimContact(Exposure.Claimant).ContactProhibited
}

property set ContactProhibited(prohibited : boolean) {
var claimContact = Exposure.Claim.getClaimContact(Exposure.Claimant)
if (claimContact != null) claimContact.ContactProhibited = prohibited
}
    ]]></Code>
  </CardViewPanel>
</PCF>
