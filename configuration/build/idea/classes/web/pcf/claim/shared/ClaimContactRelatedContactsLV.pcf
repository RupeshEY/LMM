<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <ListViewPanel
    desc="List of Related Contacts"
    id="ClaimContactRelatedContactsLV">
    <ExposeIterator
      flags="relationship"
      valueType="entity.ContactContact"
      widget="ClaimContactRelatedContactsLV"/>
    <!-- NOTE: This shared section requires a gw.api.contact.ContactHandle, rather than a Contact, because it's
    possible for some actions on a contact detail screen to fundamentally change the contact. In particular, syncing
    a contact that leads to a downcast of that contact to a more specific subtype causes the original contact to
    become invalid. To protect against this, contacts on shared sections should be wrapped in a ContactHandle. If the
    contact is fundamentally changed, then only the handle needs to be updated, and all existing references will see
    the new contact.

    Because it is verbose to have to write "contactHandle.Contact" instead of, simply, "contact", this shared section
    defines a read-only property, "Contact", which can be used to access the most current value of the contact. -->
    <Require
      name="contactHandle"
      type="gw.api.contact.ContactHandle"/>
    <Require
      name="claim"
      type="Claim"/>
    <RowIterator
      editable="true"
      elementName="contactContact"
      hasCheckBoxes="true"
      hideCheckBoxesIfReadOnly="true"
      pageSize="10"
      toAdd="Contact.addContactContact(contactContact)"
      toRemove="Contact.removeContactContact(contactContact)"
      value="Contact.AllContactContacts"
      valueType="entity.ContactContact[]">
      <ToolbarFlag
        name="relationship"/>
      <Row>
        <ClaimRelatedContactCell
          claim="claim"
          editable="true"
          forceContactSubtype="new util.lvwrapper.ClaimContactContactLVWrapper(contactContact, Contact, claim).OtherContactType"
          id="Contact"
          label="DisplayKey.get(&quot;Web.RelatedContactsLV.Contact&quot;)"
          parentContact="Contact"
          required="true"
          sortBy="contactContact.getOtherContact(Contact).PrimarySortValue,contactContact.getOtherContact(Contact).SecondarySortValue,contactContact.getOtherContact(Contact).TertiarySortValue,contactContact.getOtherContact(Contact).QuaternarySortValue"
          sortOrder="2"
          value="new util.lvwrapper.ClaimContactContactLVWrapper(contactContact, Contact, claim).OtherContact"
          valueRange="claim.RelatedContacts"/>
        <RangeCell
          editable="true"
          id="Rel"
          label="DisplayKey.get(&quot;Web.RelatedContactsLV.Rel&quot;)"
          required="true"
          sortOrder="1"
          value="new util.lvwrapper.ClaimContactContactLVWrapper(contactContact, Contact, claim).BidiRel"
          valueRange="Contact.getPossibleBidiRelsToContact(contactContact.getOtherContact(Contact))"
          valueType="typekey.ContactBidiRel">
          <Reflect
            triggerIds="Contact"
            valueRange="Contact.getPossibleBidiRelsToContact(VALUE)"/>
        </RangeCell>
      </Row>
    </RowIterator>
    <Code><![CDATA[
property get Contact() : Contact { return contactHandle.Contact; }
      
    ]]></Code>
  </ListViewPanel>
</PCF>