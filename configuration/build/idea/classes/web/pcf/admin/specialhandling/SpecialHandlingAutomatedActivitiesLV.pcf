<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <ListViewPanel
    id="SpecialHandlingAutomatedActivitiesLV">
    <Require
      name="specialHandling"
      type="SpecialHandling"/>
    <Require
      name="permEditActivities"
      type="boolean"/>
    <Variable
      initialValue="initializeHandlersForListView()"
      name="specialHandlers"
      recalculateOnRefresh="true"
      type="AutomatedActivityHandler[]"/>
    <Variable
      initialValue="generateEmailTemplateDisplayNameMap()"
      name="templateNameMap"
      recalculateOnRefresh="true"
      type="java.util.Map&lt;String, String&gt;"/>
    <ExposeIterator
      valueType="entity.AutomatedActivityHandler"
      widget="AutomatedActivitiesRowIterator"/>
    <RowIterator
      checkBoxVisible="permEditActivities"
      editable="true"
      elementName="automatedActivity"
      id="AutomatedActivitiesRowIterator"
      toRemove="automatedActivity.remove()"
      value="specialHandlers"
      valueType="entity.AutomatedActivityHandler[]">
      <Row>
        <TextCell
          id="Type"
          label="DisplayKey.get(&quot;Web.Admin.SpecialHandlingAutomatedActivities.TypeHeader&quot;)"
          required="true"
          value="automatedActivity.Trigger.Type"/>
        <TextCell
          action="AutomatedActivityHandlerDetailPopup.push(automatedActivity, CurrentLocation.InEditMode, permEditActivities)"
          id="Event"
          label="DisplayKey.get(&quot;Web.Admin.SpecialHandlingAutomatedActivities.EventHeader&quot;)"
          required="true"
          value="automatedActivity.Trigger.Event"/>
        <TextCell
          id="PolicyType"
          label="DisplayKey.get(&quot;Web.Admin.SpecialHandlingAutomatedActivities.PolicyTypeHeader&quot;)"
          outputConversion="convertPolicyTypeForOutput(VALUE)"
          required="false"
          sortOrder="1"
          value="automatedActivity.PolicyType"
          valueType="typekey.PolicyType"/>
        <TextCell
          id="ActivityPattern"
          label="DisplayKey.get(&quot;Web.Admin.SpecialHandlingAutomatedActivities.ActivityPatternHeader&quot;)"
          outputConversion="VALUE.Subject"
          required="false"
          value="automatedActivity.ActivityPattern"
          valueType="entity.ActivityPattern"/>
        <TextCell
          id="EmailTemplate"
          label="DisplayKey.get(&quot;Web.Admin.SpecialHandlingAutomatedActivities.EmailTemplateHeader&quot;)"
          value="templateNameMap.get(getEmailTemplateToUse(automatedActivity))"/>
      </Row>
    </RowIterator>
    <Code><![CDATA[uses java.util.Map
uses java.util.ArrayList
uses gw.pcf.specialhandling.EmailTemplateUtil

function generateEmailTemplateDisplayNameMap() : Map<String, String> {
  var templateNames = new ArrayList<String>()
  for (specialHandler in specialHandlers) {
    var templateToLookup = getEmailTemplateToUse(specialHandler)
    if (null != templateToLookup) {
      templateNames.add(templateToLookup)
    }
  }

  return EmailTemplateUtil.buildEmailTemplateDisplayNameMap(templateNames)
}

function getEmailTemplateToUse(handler : AutomatedActivityHandler) : String {
  var defaultTemplate = handler.ActivityPattern.EmailTemplate
  var overrideTemplate = handler.EmailTemplateOverride
  return (not (null == overrideTemplate or overrideTemplate.Empty)) ? overrideTemplate : defaultTemplate
}
    
function initializeHandlersForListView() : AutomatedActivityHandler[] {
  var allHandlers = specialHandling.AutomatedHandlers
  var activityHandlers : AutomatedActivityHandler[] = null
  if (null != allHandlers) {
    activityHandlers = allHandlers.whereTypeIs(AutomatedActivityHandler)
  } else {
    activityHandlers = new AutomatedActivityHandler[0]
  }
  
  return activityHandlers
}

function convertPolicyTypeForOutput(policyType : PolicyType) : String {
  if (null == policyType) {
    return DisplayKey.get("Web.Admin.SpecialHandlingAutomatedActivities.AllPolicyTypes")
  } else {
    return policyType.DisplayName
  }
}]]></Code>
  </ListViewPanel>
</PCF>