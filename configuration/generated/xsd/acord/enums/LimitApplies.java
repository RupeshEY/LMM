/* Generated by Guidewire XML Code Generator */

package xsd.acord.enums;

@javax.annotation.Generated("gw.xml.codegen.XmlCodeGenerator")
@gw.lang.SimplePropertyProcessing
public enum LimitApplies implements gw.xml.IXmlSchemaEnumValue {
  AccDeath( "AccDeath" ),
  ACFloats( "ACFloats" ),
  ACSkis( "ACSkis" ),
  Aggregate( "Aggregate" ),
  AllCoveredProperty( "AllCoveredProperty" ),
  AnnualAgg( "AnnualAgg" ),
  AnyAirCarrier( "AnyAirCarrier" ),
  AnyLocationOtherThanJobSite( "AnyLocationOtherThanJobSite" ),
  AnyMessenger( "AnyMessenger" ),
  AnyNewlyAcquiredTerminals( "AnyNewlyAcquiredTerminals" ),
  AnyNewlyAcquiredVehicles( "AnyNewlyAcquiredVehicles" ),
  AnyOneJobSite( "AnyOneJobSite" ),
  AnyOneShippingPackage( "AnyOneShippingPackage" ),
  AnyOneTerminal( "AnyOneTerminal" ),
  AnyOneUnnamedPremises( "AnyOneUnnamedPremises" ),
  AnyRail( "AnyRail" ),
  AnyTerminal( "AnyTerminal" ),
  AnyVehicle( "AnyVehicle" ),
  AutoDeath( "AutoDeath" ),
  AV1Aircraft( "AV1Aircraft" ),
  AVMaxAV1Aircraft( "AVMaxAV1Aircraft" ),
  AwayFromPremises( "AwayFromPremises" ),
  BeginVal( "BeginVal" ),
  BIEachOcc( "BIEachOcc" ),
  BIEachPers( "BIEachPers" ),
  BIEachPerson( "BIEachPerson" ),
  Bldg( "Bldg" ),
  Cleanup( "Cleanup" ),
  ComCarrier( "ComCarrier" ),
  CommCause( "CommCause" ),
  Contents( "Contents" ),
  ContractCarrier( "ContractCarrier" ),
  Coverage( "Coverage" ),
  CSL( "CSL" ),
  CustStatedAmt( "CustStatedAmt" ),
  DisEachEmpl( "DisEachEmpl" ),
  DisPol( "DisPol" ),
  EaAircraft( "EaAircraft" ),
  EaAuto( "EaAuto" ),
  EachClaim( "EachClaim" ),
  EachEmployee( "EachEmployee" ),
  EachPed( "EachPed" ),
  EachWorkDay( "EachWorkDay" ),
  EaDoc( "EaDoc" ),
  EaEng( "EaEng" ),
  EaEvLossExStAmt( "EaEvLossExStAmt" ),
  EaItem( "EaItem" ),
  EaMember( "EaMember" ),
  EaOccAnAggProd( "EaOccAnAggProd" ),
  EmplTools( "EmplTools" ),
  EndVal( "EndVal" ),
  Excl( "Excl" ),
  Floats( "Floats" ),
  FuneralAg( "FuneralAg" ),
  FuneralExp( "FuneralExp" ),
  GroundUp( "GroundUp" ),
  IncEconLoss( "IncEconLoss" ),
  Incl( "Incl" ),
  IncomeBen( "IncomeBen" ),
  Increased( "Increased" ),
  IncrWorkWk( "IncrWorkWk" ),
  InsuredVal( "InsuredVal" ),
  Liability( "Liability" ),
  Limit9010( "Limit9010" ),
  LossOfUse( "LossOfUse" ),
  MaxAmount( "MaxAmount" ),
  Medical( "Medical" ),
  Monthly( "Monthly" ),
  Nincl( "Nincl" ),
  OneFire( "OneFire" ),
  Other( "Other" ),
  OtherStructures( "OtherStructures" ),
  OwnVehicle( "OwnVehicle" ),
  PDEachOcc( "PDEachOcc" ),
  PerAcc( "PerAcc" ),
  PerAddresseePerDay( "PerAddresseePerDay" ),
  PerAircraft( "PerAircraft" ),
  PerDay( "PerDay" ),
  PerItem( "PerItem" ),
  PerLoc( "PerLoc" ),
  PerLoss( "PerLoss" ),
  PerOcc( "PerOcc" ),
  PerPackage( "PerPackage" ),
  PerPass( "PerPass" ),
  PerPers( "PerPers" ),
  PerPerson( "PerPerson" ),
  PerPolicy( "PerPolicy" ),
  PerProject( "PerProject" ),
  PerRailCar( "PerRailCar" ),
  PerTerminal( "PerTerminal" ),
  PerVehicle( "PerVehicle" ),
  PerVehicleCommonCarrier( "PerVehicleCommonCarrier" ),
  PerVehicleContractCarrier( "PerVehicleContractCarrier" ),
  PerVehicleNotScheduled( "PerVehicleNotScheduled" ),
  PerVehiclePrivateCarrier( "PerVehiclePrivateCarrier" ),
  PerWeek( "PerWeek" ),
  PI1Off( "PI1Off" ),
  PicTapes( "PicTapes" ),
  PolicyLimit( "PolicyLimit" ),
  PrincipalSum( "PrincipalSum" ),
  PrivateCarrier( "PrivateCarrier" ),
  Prop( "Prop" ),
  PropDam( "PropDam" ),
  PropertyInTemporaryStorage( "PropertyInTemporaryStorage" ),
  PropertyInTransit( "PropertyInTransit" ),
  Records( "Records" ),
  RedInd( "RedInd" ),
  Shipment( "Shipment" ),
  ShipperOwnedProperty( "ShipperOwnedProperty" ),
  SIR( "SIR" ),
  Skis( "Skis" ),
  Sound( "Sound" ),
  Space( "Space" ),
  StatedAmt( "StatedAmt" ),
  Statutory( "Statutory" ),
  Structures( "Structures" ),
  SurvLossBen( "SurvLossBen" ),
  Theft( "Theft" ),
  TotalAircraft( "TotalAircraft" ),
  TotalBen( "TotalBen" ),
  TotalCov( "TotalCov" ),
  TotalDays( "TotalDays" ),
  TotalOcc( "TotalOcc" ),
  TransitOffPremises( "TransitOffPremises" ),
  WeekBenAmt( "WeekBenAmt" ),
  WorkLoss( "WorkLoss" ),
  WorkLossWk( "WorkLossWk" ),
  WrAct( "WrAct" ),
  WrongfulOcc( "WrongfulOcc" ),
  YourPremises( "YourPremises" );
  private static final gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl> TYPE = new gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl>() {
    @java.lang.Override
    public gw.internal.xml.XmlEnumerationTypeDataImpl init() {
      return (gw.internal.xml.XmlEnumerationTypeDataImpl) ( (gw.internal.xml.XmlSchemaAccessImpl) xsd.acord.util.SchemaAccess ).getSchemaIndex().getTypeData( "xsd.acord.enums.LimitApplies" );
    }
  };

  private final java.lang.String _stringValue;

  private LimitApplies( java.lang.String stringValue ) {
    _stringValue = stringValue;
  }

  public static final xsd.acord.enums.LimitApplies forValue( java.lang.String value ) {
    return (xsd.acord.enums.LimitApplies) TYPE.get().cg_forValue( value );
  } // xmlRefactorRemove

  public static final xsd.acord.enums.LimitApplies forGosuValue( java.lang.String value ) {
    return (xsd.acord.enums.LimitApplies) TYPE.get().cg_forValue( value );
  }

  @java.lang.Override
  public final gw.xml.XmlSimpleValue getSimpleValue() {
    return TYPE.get().getEnumSimpleValue( this );
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getStringValue() {
    return _stringValue; // xmlRefactorRemove
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getSerializedValue() {
    return _stringValue;
  }

  @java.lang.Override
  public final java.lang.String getValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getGosuValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  }

  @java.lang.Override
  public final String getCode() {
    return name();
  }

  @java.lang.Override
  public final int getOrdinal() {
    return ordinal();
  }

  @java.lang.Override
  public final String toString() {
    return _stringValue;
  }

}
