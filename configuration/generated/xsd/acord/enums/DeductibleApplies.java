/* Generated by Guidewire XML Code Generator */

package xsd.acord.enums;

@javax.annotation.Generated("gw.xml.codegen.XmlCodeGenerator")
@gw.lang.SimplePropertyProcessing
public enum DeductibleApplies implements gw.xml.IXmlSchemaEnumValue {
  AA( "AA" ),
  ACC( "ACC" ),
  Aggregate( "Aggregate" ),
  Airline( "Airline" ),
  AllOth( "AllOth" ),
  AllOthClaim( "AllOthClaim" ),
  AllPeril( "AllPeril" ),
  AN( "AN" ),
  BagEaEv( "BagEaEv" ),
  BIPD( "BIPD" ),
  BodInj( "BodInj" ),
  CargoEaEv( "CargoEaEv" ),
  CL( "CL" ),
  Coll( "Coll" ),
  Comp( "Comp" ),
  COPC( "COPC" ),
  Coverage( "Coverage" ),
  CY( "CY" ),
  DAY( "DAY" ),
  EaAircraft( "EaAircraft" ),
  EaEng( "EaEng" ),
  EaEvLoss( "EaEvLoss" ),
  EmplTool( "EmplTool" ),
  EQK( "EQK" ),
  Fire( "Fire" ),
  GrndEq( "GrndEq" ),
  HkEaEv( "HkEaEv" ),
  HR( "HR" ),
  HURR( "HURR" ),
  ID( "ID" ),
  IND( "IND" ),
  InMot( "InMot" ),
  L( "L" ),
  LA( "LA" ),
  LandGear( "LandGear" ),
  MED( "MED" ),
  MedExp( "MedExp" ),
  MEDIND( "MEDIND" ),
  MedRehab( "MedRehab" ),
  NonSchEq( "NonSchEq" ),
  NotFlight( "NotFlight" ),
  NotMot( "NotMot" ),
  NotMotHang( "NotMotHang" ),
  O( "O" ),
  P( "P" ),
  PerOcc( "PerOcc" ),
  PerVehicle( "PerVehicle" ),
  PropDam( "PropDam" ),
  RotorMot( "RotorMot" ),
  RotorNotMot( "RotorNotMot" ),
  S( "S" ),
  SchedEq( "SchedEq" ),
  SparEaEv( "SparEaEv" ),
  Theft( "Theft" ),
  Tool( "Tool" ),
  Trees( "Trees" ),
  TurbAircraft( "TurbAircraft" ),
  Wind( "Wind" ),
  WindHail( "WindHail" ),
  WorkDays( "WorkDays" );
  private static final gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl> TYPE = new gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl>() {
    @java.lang.Override
    public gw.internal.xml.XmlEnumerationTypeDataImpl init() {
      return (gw.internal.xml.XmlEnumerationTypeDataImpl) ( (gw.internal.xml.XmlSchemaAccessImpl) xsd.acord.util.SchemaAccess ).getSchemaIndex().getTypeData( "xsd.acord.enums.DeductibleApplies" );
    }
  };

  private final java.lang.String _stringValue;

  private DeductibleApplies( java.lang.String stringValue ) {
    _stringValue = stringValue;
  }

  public static final xsd.acord.enums.DeductibleApplies forValue( java.lang.String value ) {
    return (xsd.acord.enums.DeductibleApplies) TYPE.get().cg_forValue( value );
  } // xmlRefactorRemove

  public static final xsd.acord.enums.DeductibleApplies forGosuValue( java.lang.String value ) {
    return (xsd.acord.enums.DeductibleApplies) TYPE.get().cg_forValue( value );
  }

  @java.lang.Override
  public final gw.xml.XmlSimpleValue getSimpleValue() {
    return TYPE.get().getEnumSimpleValue( this );
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getStringValue() {
    return _stringValue; // xmlRefactorRemove
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getSerializedValue() {
    return _stringValue;
  }

  @java.lang.Override
  public final java.lang.String getValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getGosuValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  }

  @java.lang.Override
  public final String getCode() {
    return name();
  }

  @java.lang.Override
  public final int getOrdinal() {
    return ordinal();
  }

  @java.lang.Override
  public final String toString() {
    return _stringValue;
  }

}
