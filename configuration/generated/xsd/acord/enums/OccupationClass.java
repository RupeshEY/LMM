/* Generated by Guidewire XML Code Generator */

package xsd.acord.enums;

@javax.annotation.Generated("gw.xml.codegen.XmlCodeGenerator")
@gw.lang.SimplePropertyProcessing
public enum OccupationClass implements gw.xml.IXmlSchemaEnumValue {
  ACT( "ACT" ),
  ADD( "ADD" ),
  ADJ( "ADJ" ),
  ADM( "ADM" ),
  AGR( "AGR" ),
  AIR( "AIR" ),
  ALLOT( "ALLOT" ),
  APR( "APR" ),
  AR( "AR" ),
  ART( "ART" ),
  ATH( "ATH" ),
  ATY( "ATY" ),
  AUD( "AUD" ),
  AUM( "AUM" ),
  AUS( "AUS" ),
  BAD( "BAD" ),
  BFI( "BFI" ),
  BKP( "BKP" ),
  BMG( "BMG" ),
  BRB( "BRB" ),
  BUY( "BUY" ),
  CA( "CA" ),
  CAN( "CAN" ),
  CAS( "CAS" ),
  CCE( "CCE" ),
  CCL( "CCL" ),
  CFT( "CFT" ),
  CHF( "CHF" ),
  Chiropractor( "Chiropractor" ),
  CHM( "CHM" ),
  CHR( "CHR" ),
  CL( "CL" ),
  CMP( "CMP" ),
  CMT( "CMT" ),
  COL( "COL" ),
  COT( "COT" ),
  CPA( "CPA" ),
  CRP( "CRP" ),
  CRT( "CRT" ),
  CS( "CS" ),
  CST( "CST" ),
  CTR( "CTR" ),
  DAY( "DAY" ),
  DELY( "DELY" ),
  DEN( "DEN" ),
  DHY( "DHY" ),
  DIE( "DIE" ),
  DIET( "DIET" ),
  DIS( "DIS" ),
  DMO( "DMO" ),
  DRI( "DRI" ),
  DRL( "DRL" ),
  DRM( "DRM" ),
  DRP( "DRP" ),
  DRT( "DRT" ),
  ELE( "ELE" ),
  ENG( "ENG" ),
  ENT( "ENT" ),
  EXE( "EXE" ),
  FAC( "FAC" ),
  FF( "FF" ),
  FIN( "FIN" ),
  FIT( "FIT" ),
  FL( "FL" ),
  FLA( "FLA" ),
  FOD( "FOD" ),
  FOI( "FOI" ),
  FOR( "FOR" ),
  FRM( "FRM" ),
  FSH( "FSH" ),
  GC( "GC" ),
  GDP( "GDP" ),
  HO( "HO" ),
  HOT( "HOT" ),
  HRT( "HRT" ),
  IAB( "IAB" ),
  IAD( "IAD" ),
  INS( "INS" ),
  IUW( "IUW" ),
  JAN( "JAN" ),
  LAB( "LAB" ),
  LAW( "LAW" ),
  LIB( "LIB" ),
  LOCK( "LOCK" ),
  MAITR( "MAITR" ),
  MDR( "MDR" ),
  MGR( "MGR" ),
  MI( "MI" ),
  MIN( "MIN" ),
  MKT( "MKT" ),
  MNT( "MNT" ),
  MSG( "MSG" ),
  MSP( "MSP" ),
  NRS( "NRS" ),
  NTR( "NTR" ),
  OF( "OF" ),
  OPI( "OPI" ),
  OPT( "OPT" ),
  OT( "OT" ),
  PAD( "PAD" ),
  PAY( "PAY" ),
  PCD( "PCD" ),
  PHO( "PHO" ),
  PHR( "PHR" ),
  PHY( "PHY" ),
  PLT( "PLT" ),
  PNT( "PNT" ),
  PO( "PO" ),
  POL( "POL" ),
  PRO( "PRO" ),
  PST( "PST" ),
  PTO( "PTO" ),
  PUR( "PUR" ),
  REA( "REA" ),
  REC( "REC" ),
  RET( "RET" ),
  RGO( "RGO" ),
  RSB( "RSB" ),
  RSC( "RSC" ),
  RTS( "RTS" ),
  SA( "SA" ),
  SAL( "SAL" ),
  SC( "SC" ),
  SCT( "SCT" ),
  SE( "SE" ),
  SEC( "SEC" ),
  SHP( "SHP" ),
  SK( "SK" ),
  SMS( "SMS" ),
  SPR( "SPR" ),
  SPS( "SPS" ),
  SSAT( "SSAT" ),
  ST( "ST" ),
  STK( "STK" ),
  STO( "STO" ),
  STR( "STR" ),
  SUP( "SUP" ),
  TEC( "TEC" ),
  TES( "TES" ),
  THR( "THR" ),
  TMK( "TMK" ),
  TMSEC( "TMSEC" ),
  TRD( "TRD" ),
  TRK( "TRK" ),
  UN( "UN" ),
  UNEM( "UNEM" ),
  US( "US" ),
  VET( "VET" ),
  WH( "WH" ),
  WNC( "WNC" ),
  WNS( "WNS" ),
  WRT( "WRT" );
  private static final gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl> TYPE = new gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl>() {
    @java.lang.Override
    public gw.internal.xml.XmlEnumerationTypeDataImpl init() {
      return (gw.internal.xml.XmlEnumerationTypeDataImpl) ( (gw.internal.xml.XmlSchemaAccessImpl) xsd.acord.util.SchemaAccess ).getSchemaIndex().getTypeData( "xsd.acord.enums.OccupationClass" );
    }
  };

  private final java.lang.String _stringValue;

  private OccupationClass( java.lang.String stringValue ) {
    _stringValue = stringValue;
  }

  public static final xsd.acord.enums.OccupationClass forValue( java.lang.String value ) {
    return (xsd.acord.enums.OccupationClass) TYPE.get().cg_forValue( value );
  } // xmlRefactorRemove

  public static final xsd.acord.enums.OccupationClass forGosuValue( java.lang.String value ) {
    return (xsd.acord.enums.OccupationClass) TYPE.get().cg_forValue( value );
  }

  @java.lang.Override
  public final gw.xml.XmlSimpleValue getSimpleValue() {
    return TYPE.get().getEnumSimpleValue( this );
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getStringValue() {
    return _stringValue; // xmlRefactorRemove
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getSerializedValue() {
    return _stringValue;
  }

  @java.lang.Override
  public final java.lang.String getValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getGosuValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  }

  @java.lang.Override
  public final String getCode() {
    return name();
  }

  @java.lang.Override
  public final int getOrdinal() {
    return ordinal();
  }

  @java.lang.Override
  public final String toString() {
    return _stringValue;
  }

}
