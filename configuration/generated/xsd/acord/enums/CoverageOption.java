/* Generated by Guidewire XML Code Generator */

package xsd.acord.enums;

@javax.annotation.Generated("gw.xml.codegen.XmlCodeGenerator")
@gw.lang.SimplePropertyProcessing
public enum CoverageOption implements gw.xml.IXmlSchemaEnumValue {
  _0( "0" ),
  _00( "00" ),
  _01( "01" ),
  _02( "02" ),
  _03( "03" ),
  _04( "04" ),
  _05( "05" ),
  _06( "06" ),
  _07( "07" ),
  _08( "08" ),
  _09( "09" ),
  _1( "1" ),
  _10( "10" ),
  _100( "100" ),
  _11( "11" ),
  _12( "12" ),
  _180( "180" ),
  _2( "2" ),
  _20( "20" ),
  _25( "25" ),
  _3( "3" ),
  _30( "30" ),
  _35( "35" ),
  _4( "4" ),
  _40( "40" ),
  _5( "5" ),
  _5A( "5A" ),
  _5B( "5B" ),
  _6( "6" ),
  _7( "7" ),
  _90( "90" ),
  A( "A" ),
  AB( "AB" ),
  ABLDP( "ABLDP" ),
  ABTAX( "ABTAX" ),
  AC( "AC" ),
  ACB( "ACB" ),
  ACLOC( "ACLOC" ),
  ACP( "ACP" ),
  ACT( "ACT" ),
  ACVGP( "ACVGP" ),
  ADDLOC( "ADDLOC" ),
  AdjFld( "AdjFld" ),
  AE( "AE" ),
  AF( "AF" ),
  AG( "AG" ),
  AircRepServ( "AircRepServ" ),
  AircStorHang( "AircStorHang" ),
  AL( "AL" ),
  AM( "AM" ),
  AO( "AO" ),
  AP( "AP" ),
  APIP( "APIP" ),
  APNC( "APNC" ),
  APNS( "APNS" ),
  AR( "AR" ),
  AS( "AS" ),
  AV( "AV" ),
  B( "B" ),
  BA( "BA" ),
  BB( "BB" ),
  BIAOP( "BIAOP" ),
  BIBRK( "BIBRK" ),
  BIBRR( "BIBRR" ),
  BIEMR( "BIEMR" ),
  BIEPI( "BIEPI" ),
  BIMLI( "BIMLI" ),
  BIMPI( "BIMPI" ),
  BIOnly( "BIOnly" ),
  BIOPE( "BIOPE" ),
  BIPA( "BIPA" ),
  BIPUC( "BIPUC" ),
  BISLM( "BISLM" ),
  BITAF( "BITAF" ),
  BLDOI( "BLDOI" ),
  BLDOR( "BLDOR" ),
  BM( "BM" ),
  BMP( "BMP" ),
  BNL( "BNL" ),
  BO( "BO" ),
  BP( "BP" ),
  BR( "BR" ),
  BRCLP( "BRCLP" ),
  BRRF( "BRRF" ),
  BRSCC( "BRSCC" ),
  BRSCE( "BRSCE" ),
  BS( "BS" ),
  BU( "BU" ),
  BUSD( "BUSD" ),
  BW( "BW" ),
  C( "C" ),
  CA( "CA" ),
  CBGLS( "CBGLS" ),
  CC( "CC" ),
  CF( "CF" ),
  CFIB( "CFIB" ),
  CH( "CH" ),
  ChemBI( "ChemBI" ),
  ChemBIPD( "ChemBIPD" ),
  ChemPD( "ChemPD" ),
  CL( "CL" ),
  CM( "CM" ),
  CN( "CN" ),
  CO( "CO" ),
  COIN( "COIN" ),
  COL( "COL" ),
  COM( "COM" ),
  Comp( "Comp" ),
  CON( "CON" ),
  CP( "CP" ),
  CR( "CR" ),
  CS( "CS" ),
  CSLBIPD( "CSLBIPD" ),
  CSLBIPDIPass( "CSLBIPDIPass" ),
  CSLBIPDXPass( "CSLBIPDXPass" ),
  CT( "CT" ),
  CU( "CU" ),
  CV( "CV" ),
  CVLAU( "CVLAU" ),
  CY( "CY" ),
  D( "D" ),
  DEDLM( "DEDLM" ),
  DL( "DL" ),
  DR( "DR" ),
  DSNW( "DSNW" ),
  DW( "DW" ),
  E( "E" ),
  EaAirc( "EaAirc" ),
  EG( "EG" ),
  EL( "EL" ),
  EM( "EM" ),
  EMPL( "EMPL" ),
  EmplTool( "EmplTool" ),
  EN( "EN" ),
  EO( "EO" ),
  EOG( "EOG" ),
  EQINC( "EQINC" ),
  EV( "EV" ),
  EVS( "EVS" ),
  EW( "EW" ),
  EX( "EX" ),
  ExChemPD( "ExChemPD" ),
  Excl( "Excl" ),
  ExCompOp( "ExCompOp" ),
  ExCrew( "ExCrew" ),
  ExFlight( "ExFlight" ),
  ExSpace( "ExSpace" ),
  Extend( "Extend" ),
  F( "F" ),
  FamilyLiability( "FamilyLiability" ),
  FB( "FB" ),
  FE( "FE" ),
  FF( "FF" ),
  FG( "FG" ),
  FI( "FI" ),
  FM( "FM" ),
  FMORT( "FMORT" ),
  FoodBev( "FoodBev" ),
  FP( "FP" ),
  FR( "FR" ),
  FT( "FT" ),
  FU( "FU" ),
  Fuel( "Fuel" ),
  FullTime( "FullTime" ),
  G( "G" ),
  G1( "G1" ),
  GA( "GA" ),
  GE( "GE" ),
  GG( "GG" ),
  GLSVB( "GLSVB" ),
  GN( "GN" ),
  GP( "GP" ),
  GR( "GR" ),
  GrndFlAllRisk( "GrndFlAllRisk" ),
  GrndNoFlight( "GrndNoFlight" ),
  GrndNoMot( "GrndNoMot" ),
  GrndOnly( "GrndOnly" ),
  GrndTaxi( "GrndTaxi" ),
  GS( "GS" ),
  GU( "GU" ),
  HeliRepServ( "HeliRepServ" ),
  HI( "HI" ),
  HK( "HK" ),
  HP( "HP" ),
  HR( "HR" ),
  HT( "HT" ),
  I( "I" ),
  IGP( "IGP" ),
  IL( "IL" ),
  IN( "IN" ),
  INCBA( "INCBA" ),
  Incident( "Incident" ),
  Incl( "Incl" ),
  InCompOp( "InCompOp" ),
  InCrew( "InCrew" ),
  InFlight( "InFlight" ),
  INLOC( "INLOC" ),
  InMotExFlight( "InMotExFlight" ),
  INS( "INS" ),
  InSpace( "InSpace" ),
  INSRV( "INSRV" ),
  InTaxi( "InTaxi" ),
  IO( "IO" ),
  IR( "IR" ),
  IW( "IW" ),
  IY( "IY" ),
  KN( "KN" ),
  L( "L" ),
  LA( "LA" ),
  LI( "LI" ),
  LLL( "LLL" ),
  LN( "LN" ),
  LP( "LP" ),
  LSDPR( "LSDPR" ),
  LSSPA( "LSSPA" ),
  LT( "LT" ),
  LU( "LU" ),
  M( "M" ),
  M1( "M1" ),
  M2( "M2" ),
  M3( "M3" ),
  M4( "M4" ),
  M5( "M5" ),
  M6( "M6" ),
  MB( "MB" ),
  MC( "MC" ),
  ME( "ME" ),
  MechTool( "MechTool" ),
  MFGCL( "MFGCL" ),
  MI1( "MI1" ),
  MINPR( "MINPR" ),
  MobileEq( "MobileEq" ),
  MP( "MP" ),
  MS1( "MS1" ),
  MS2( "MS2" ),
  MT( "MT" ),
  MW( "MW" ),
  MY( "MY" ),
  N( "N" ),
  ND( "ND" ),
  NFM( "NFM" ),
  NH( "NH" ),
  NL( "NL" ),
  NO( "NO" ),
  No( "No" ),
  NOA( "NOA" ),
  NPERL( "NPERL" ),
  NR( "NR" ),
  NS( "NS" ),
  NT( "NT" ),
  NU( "NU" ),
  NY1( "NY1" ),
  NY2( "NY2" ),
  NY3( "NY3" ),
  NY4( "NY4" ),
  NY5( "NY5" ),
  NY6( "NY6" ),
  NY7( "NY7" ),
  O( "O" ),
  OB( "OB" ),
  OBEL( "OBEL" ),
  OF( "OF" ),
  OffPrem( "OffPrem" ),
  OG( "OG" ),
  OLT( "OLT" ),
  OnPrem( "OnPrem" ),
  OPERL( "OPERL" ),
  OPOT( "OPOT" ),
  OPOTX( "OPOTX" ),
  OPPF( "OPPF" ),
  OPS( "OPS" ),
  OPSTE( "OPSTE" ),
  OT( "OT" ),
  OTC( "OTC" ),
  OTLIN( "OTLIN" ),
  OTRES( "OTRES" ),
  OUTSV( "OUTSV" ),
  OWNER( "OWNER" ),
  P( "P" ),
  PartInst( "PartInst" ),
  PartNoInst( "PartNoInst" ),
  PartTime( "PartTime" ),
  PC( "PC" ),
  PCO( "PCO" ),
  PDNM( "PDNM" ),
  PERES( "PERES" ),
  PERM( "PERM" ),
  PF( "PF" ),
  PH( "PH" ),
  PHE( "PHE" ),
  PHI( "PHI" ),
  PHNR( "PHNR" ),
  PilotSup( "PilotSup" ),
  PL( "PL" ),
  PN( "PN" ),
  POPPF( "POPPF" ),
  POTS( "POTS" ),
  PP( "PP" ),
  PRC( "PRC" ),
  PRE( "PRE" ),
  PREM( "PREM" ),
  PRPIO( "PRPIO" ),
  PS( "PS" ),
  PT( "PT" ),
  R( "R" ),
  RA( "RA" ),
  Rein( "Rein" ),
  Rej( "Rej" ),
  RELOC( "RELOC" ),
  RepServ( "RepServ" ),
  RESID( "RESID" ),
  RESOS( "RESOS" ),
  Restaurant( "Restaurant" ),
  Restrict( "Restrict" ),
  RF( "RF" ),
  RG( "RG" ),
  RJ( "RJ" ),
  RM( "RM" ),
  RO( "RO" ),
  RPTFM( "RPTFM" ),
  RR( "RR" ),
  RS( "RS" ),
  RY( "RY" ),
  S( "S" ),
  SA( "SA" ),
  SaleFuel( "SaleFuel" ),
  SaleNewAirc( "SaleNewAirc" ),
  SaleUsedAir( "SaleUsedAir" ),
  SC( "SC" ),
  SCOTH( "SCOTH" ),
  SE( "SE" ),
  SEASN( "SEASN" ),
  SF( "SF" ),
  SG( "SG" ),
  SH( "SH" ),
  SI( "SI" ),
  SM( "SM" ),
  SP( "SP" ),
  SpareEng( "SpareEng" ),
  SPLG( "SPLG" ),
  SR( "SR" ),
  SRLL( "SRLL" ),
  SS( "SS" ),
  ST( "ST" ),
  STK( "STK" ),
  STOCK( "STOCK" ),
  SU( "SU" ),
  Sus( "Sus" ),
  SW( "SW" ),
  TAFED( "TAFED" ),
  TAFST( "TAFST" ),
  TD( "TD" ),
  TEN( "TEN" ),
  THEFT( "THEFT" ),
  THFT( "THFT" ),
  TI( "TI" ),
  TIB( "TIB" ),
  TN( "TN" ),
  TO( "TO" ),
  TotalLim( "TotalLim" ),
  TR( "TR" ),
  TRN( "TRN" ),
  TSP( "TSP" ),
  TV( "TV" ),
  TX( "TX" ),
  U( "U" ),
  UL( "UL" ),
  V( "V" ),
  VACPR( "VACPR" ),
  VP( "VP" ),
  VR( "VR" ),
  VS( "VS" ),
  VT( "VT" ),
  VX( "VX" ),
  W( "W" ),
  WB( "WB" ),
  WC( "WC" ),
  WD( "WD" ),
  WH( "WH" ),
  WI( "WI" ),
  WR( "WR" ),
  WS( "WS" ),
  WTHE( "WTHE" ),
  WTHI( "WTHI" ),
  X( "X" ),
  XL( "XL" ),
  XP( "XP" ),
  XXDP( "XXDP" ),
  Y( "Y" ),
  Yes( "Yes" );
  private static final gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl> TYPE = new gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl>() {
    @java.lang.Override
    public gw.internal.xml.XmlEnumerationTypeDataImpl init() {
      return (gw.internal.xml.XmlEnumerationTypeDataImpl) ( (gw.internal.xml.XmlSchemaAccessImpl) xsd.acord.util.SchemaAccess ).getSchemaIndex().getTypeData( "xsd.acord.enums.CoverageOption" );
    }
  };

  private final java.lang.String _stringValue;

  private CoverageOption( java.lang.String stringValue ) {
    _stringValue = stringValue;
  }

  public static final xsd.acord.enums.CoverageOption forValue( java.lang.String value ) {
    return (xsd.acord.enums.CoverageOption) TYPE.get().cg_forValue( value );
  } // xmlRefactorRemove

  public static final xsd.acord.enums.CoverageOption forGosuValue( java.lang.String value ) {
    return (xsd.acord.enums.CoverageOption) TYPE.get().cg_forValue( value );
  }

  @java.lang.Override
  public final gw.xml.XmlSimpleValue getSimpleValue() {
    return TYPE.get().getEnumSimpleValue( this );
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getStringValue() {
    return _stringValue; // xmlRefactorRemove
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getSerializedValue() {
    return _stringValue;
  }

  @java.lang.Override
  public final java.lang.String getValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getGosuValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  }

  @java.lang.Override
  public final String getCode() {
    return name();
  }

  @java.lang.Override
  public final int getOrdinal() {
    return ordinal();
  }

  @java.lang.Override
  public final String toString() {
    return _stringValue;
  }

}
