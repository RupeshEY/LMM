/* Generated by Guidewire XML Code Generator */

package xsd.acord.enums;

@javax.annotation.Generated("gw.xml.codegen.XmlCodeGenerator")
@gw.lang.SimplePropertyProcessing
public enum MaterialType implements gw.xml.IXmlSchemaEnumValue {
  AlumSoff( "AlumSoff" ),
  AshPlnk( "AshPlnk" ),
  Atile( "Atile" ),
  B( "B" ),
  BlkGlass( "BlkGlass" ),
  BlkSol( "BlkSol" ),
  Bookcase( "Bookcase" ),
  Brk( "Brk" ),
  BrkBlk( "BrkBlk" ),
  BrkGlaz( "BrkGlaz" ),
  BrkSol( "BrkSol" ),
  BrkVen( "BrkVen" ),
  Carpet( "Carpet" ),
  CarpetN( "CarpetN" ),
  CarpetNC( "CarpetNC" ),
  CarpetOHN( "CarpetOHN" ),
  CarpetOHNC( "CarpetOHNC" ),
  CarpetOHW( "CarpetOHW" ),
  CarpetWool( "CarpetWool" ),
  CerTile( "CerTile" ),
  CerTileImp( "CerTileImp" ),
  ChPlnk( "ChPlnk" ),
  Cloth( "Cloth" ),
  ConGyps( "ConGyps" ),
  Cork( "Cork" ),
  CrvStud( "CrvStud" ),
  Drywall( "Drywall" ),
  DrywallTex( "DrywallTex" ),
  EIFS( "EIFS" ),
  Epoxy( "Epoxy" ),
  Flagstone( "Flagstone" ),
  Foil( "Foil" ),
  G( "G" ),
  Granite( "Granite" ),
  GrassC( "GrassC" ),
  Hardener( "Hardener" ),
  Hardwd( "Hardwd" ),
  KnPine( "KnPine" ),
  LamFlr( "LamFlr" ),
  Maple( "Maple" ),
  Marble( "Marble" ),
  Mirror( "Mirror" ),
  MuralTile( "MuralTile" ),
  OakParq( "OakParq" ),
  OakPlnk( "OakPlnk" ),
  Paint( "Paint" ),
  PaintMarb( "PaintMarb" ),
  PaintSp( "PaintSp" ),
  PanelA( "PanelA" ),
  PanelB( "PanelB" ),
  PanelC( "PanelC" ),
  PanelD( "PanelD" ),
  PanelE( "PanelE" ),
  PanelM( "PanelM" ),
  PanelSW( "PanelSW" ),
  PanelTG( "PanelTG" ),
  PanelWS( "PanelWS" ),
  Paper( "Paper" ),
  Parq( "Parq" ),
  Peg( "Peg" ),
  PinePlnk( "PinePlnk" ),
  Plaster( "Plaster" ),
  PlasterExt( "PlasterExt" ),
  PlasterHH( "PlasterHH" ),
  PlasterText( "PlasterText" ),
  Plywood( "Plywood" ),
  Pmasonry( "Pmasonry" ),
  Qtile( "Qtile" ),
  Slate( "Slate" ),
  Stone( "Stone" ),
  StoneBlk( "StoneBlk" ),
  StoneSol( "StoneSol" ),
  StoneVen( "StoneVen" ),
  StrStud( "StrStud" ),
  Stucco( "Stucco" ),
  SuspCeil( "SuspCeil" ),
  TeakPlnk( "TeakPlnk" ),
  Terraz( "Terraz" ),
  Textured( "Textured" ),
  Tin( "Tin" ),
  TrayCeil( "TrayCeil" ),
  Vinyl( "Vinyl" ),
  VinylSh( "VinylSh" ),
  VinylSoff( "VinylSoff" ),
  VinylTile( "VinylTile" ),
  WalnutPlnk( "WalnutPlnk" ),
  Wood( "Wood" );
  private static final gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl> TYPE = new gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl>() {
    @java.lang.Override
    public gw.internal.xml.XmlEnumerationTypeDataImpl init() {
      return (gw.internal.xml.XmlEnumerationTypeDataImpl) ( (gw.internal.xml.XmlSchemaAccessImpl) xsd.acord.util.SchemaAccess ).getSchemaIndex().getTypeData( "xsd.acord.enums.MaterialType" );
    }
  };

  private final java.lang.String _stringValue;

  private MaterialType( java.lang.String stringValue ) {
    _stringValue = stringValue;
  }

  public static final xsd.acord.enums.MaterialType forValue( java.lang.String value ) {
    return (xsd.acord.enums.MaterialType) TYPE.get().cg_forValue( value );
  } // xmlRefactorRemove

  public static final xsd.acord.enums.MaterialType forGosuValue( java.lang.String value ) {
    return (xsd.acord.enums.MaterialType) TYPE.get().cg_forValue( value );
  }

  @java.lang.Override
  public final gw.xml.XmlSimpleValue getSimpleValue() {
    return TYPE.get().getEnumSimpleValue( this );
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getStringValue() {
    return _stringValue; // xmlRefactorRemove
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getSerializedValue() {
    return _stringValue;
  }

  @java.lang.Override
  public final java.lang.String getValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getGosuValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  }

  @java.lang.Override
  public final String getCode() {
    return name();
  }

  @java.lang.Override
  public final int getOrdinal() {
    return ordinal();
  }

  @java.lang.Override
  public final String toString() {
    return _stringValue;
  }

}
