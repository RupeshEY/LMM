/* Generated by Guidewire XML Code Generator */

package xsd.acord.enums;

@javax.annotation.Generated("gw.xml.codegen.XmlCodeGenerator")
@gw.lang.SimplePropertyProcessing
public enum AttachmentType implements gw.xml.IXmlSchemaEnumValue {
  _040( "040" ),
  _041( "041" ),
  _042( "042" ),
  _139( "139" ),
  _610( "610" ),
  _815( "815" ),
  _816( "816" ),
  AccountantsProfessional( "AccountantsProfessional" ),
  ACR( "ACR" ),
  AER( "AER" ),
  AIR( "AIR" ),
  APP( "APP" ),
  APR( "APR" ),
  ARA( "ARA" ),
  Architects( "Architects" ),
  ARP( "ARP" ),
  ATD( "ATD" ),
  BCL( "BCL" ),
  BFA( "BFA" ),
  BillingDetail( "BillingDetail" ),
  BillingHistory( "BillingHistory" ),
  BLT( "BLT" ),
  BOS( "BOS" ),
  BSE( "BSE" ),
  CAB( "CAB" ),
  CALC( "CALC" ),
  CC( "CC" ),
  CEE( "CEE" ),
  CGC( "CGC" ),
  CIR( "CIR" ),
  ClaimsDetail( "ClaimsDetail" ),
  ClaimsHistory( "ClaimsHistory" ),
  ClaimsPayDetail( "ClaimsPayDetail" ),
  ClaimsPayHistory( "ClaimsPayHistory" ),
  COE( "COE" ),
  COI( "COI" ),
  CON( "CON" ),
  CONTR( "CONTR" ),
  COR( "COR" ),
  CQ( "CQ" ),
  Crime( "Crime" ),
  CRR( "CRR" ),
  CSA( "CSA" ),
  CTA( "CTA" ),
  CTD( "CTD" ),
  DAndO( "DAndO" ),
  DOD( "DOD" ),
  DTC( "DTC" ),
  EAndO( "EAndO" ),
  EAP( "EAP" ),
  EBF( "EBF" ),
  EDP( "EDP" ),
  EE1( "EE1" ),
  EEO( "EEO" ),
  EER( "EER" ),
  EGP( "EGP" ),
  EHB( "EHB" ),
  EPE( "EPE" ),
  EPLI( "EPLI" ),
  EQK( "EQK" ),
  EXP( "EXP" ),
  EXPRT( "EXPRT" ),
  FEX( "FEX" ),
  Fiduciary( "Fiduciary" ),
  FIN( "FIN" ),
  FNOLAuto( "FNOLAuto" ),
  FNOLLiability( "FNOLLiability" ),
  FNOLProperty( "FNOLProperty" ),
  FROIWorkComp( "FROIWorkComp" ),
  FS( "FS" ),
  FSA( "FSA" ),
  GSC( "GSC" ),
  HBB( "HBB" ),
  HHH( "HHH" ),
  IA( "IA" ),
  ILOC( "ILOC" ),
  INJ( "INJ" ),
  INS( "INS" ),
  InsuranceAgents( "InsuranceAgents" ),
  InternetLiability( "InternetLiability" ),
  INV( "INV" ),
  ISU( "ISU" ),
  ITR( "ITR" ),
  JVA( "JVA" ),
  KidnapRansom( "KidnapRansom" ),
  KRP( "KRP" ),
  LAR( "LAR" ),
  LAU( "LAU" ),
  LawyersProfessional( "LawyersProfessional" ),
  LBL( "LBL" ),
  LFI( "LFI" ),
  LFP( "LFP" ),
  LHI( "LHI" ),
  LQA( "LQA" ),
  LRR( "LRR" ),
  LSA( "LSA" ),
  MED( "MED" ),
  MediaProfessional( "MediaProfessional" ),
  MedicalMalpractice( "MedicalMalpractice" ),
  MTC( "MTC" ),
  MVR( "MVR" ),
  NFA( "NFA" ),
  OEF( "OEF" ),
  OT( "OT" ),
  OUT( "OUT" ),
  PDC( "PDC" ),
  PDI( "PDI" ),
  PDS( "PDS" ),
  PEU( "PEU" ),
  PFS( "PFS" ),
  PHE( "PHE" ),
  PHI( "PHI" ),
  PHO( "PHO" ),
  PIF( "PIF" ),
  PJS( "PJS" ),
  POA( "POA" ),
  PolicyDetail( "PolicyDetail" ),
  PolicyHistory( "PolicyHistory" ),
  POV( "POV" ),
  PPH( "PPH" ),
  PQS( "PQS" ),
  ProfessionalLiability( "ProfessionalLiability" ),
  PROM( "PROM" ),
  PSB( "PSB" ),
  PTA( "PTA" ),
  QRP( "QRP" ),
  QuoteProposal( "QuoteProposal" ),
  RAR( "RAR" ),
  RBB( "RBB" ),
  RBF( "RBF" ),
  RCW( "RCW" ),
  REC( "REC" ),
  ROE( "ROE" ),
  RSM( "RSM" ),
  RTA( "RTA" ),
  SAF( "SAF" ),
  SAL( "SAL" ),
  SC( "SC" ),
  SCH( "SCH" ),
  SFS( "SFS" ),
  SHQ( "SHQ" ),
  SHR( "SHR" ),
  SLT( "SLT" ),
  SOR( "SOR" ),
  SSL( "SSL" ),
  STAT( "STAT" ),
  SUB( "SUB" ),
  SUP( "SUP" ),
  SUR( "SUR" ),
  TEV( "TEV" ),
  TRUST( "TRUST" ),
  UMR( "UMR" ),
  URQ( "URQ" ),
  VET( "VET" ),
  VM( "VM" ),
  VRS( "VRS" ),
  WAT( "WAT" ),
  WBS( "WBS" ),
  WIL( "WIL" ),
  WIS( "WIS" ),
  WIT( "WIT" ),
  WLE( "WLE" ),
  WLM( "WLM" ),
  WorkplaceViolence( "WorkplaceViolence" ),
  WP( "WP" ),
  WPH( "WPH" ),
  WQ( "WQ" ),
  YDQ( "YDQ" );
  private static final gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl> TYPE = new gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl>() {
    @java.lang.Override
    public gw.internal.xml.XmlEnumerationTypeDataImpl init() {
      return (gw.internal.xml.XmlEnumerationTypeDataImpl) ( (gw.internal.xml.XmlSchemaAccessImpl) xsd.acord.util.SchemaAccess ).getSchemaIndex().getTypeData( "xsd.acord.enums.AttachmentType" );
    }
  };

  private final java.lang.String _stringValue;

  private AttachmentType( java.lang.String stringValue ) {
    _stringValue = stringValue;
  }

  public static final xsd.acord.enums.AttachmentType forValue( java.lang.String value ) {
    return (xsd.acord.enums.AttachmentType) TYPE.get().cg_forValue( value );
  } // xmlRefactorRemove

  public static final xsd.acord.enums.AttachmentType forGosuValue( java.lang.String value ) {
    return (xsd.acord.enums.AttachmentType) TYPE.get().cg_forValue( value );
  }

  @java.lang.Override
  public final gw.xml.XmlSimpleValue getSimpleValue() {
    return TYPE.get().getEnumSimpleValue( this );
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getStringValue() {
    return _stringValue; // xmlRefactorRemove
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getSerializedValue() {
    return _stringValue;
  }

  @java.lang.Override
  public final java.lang.String getValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getGosuValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  }

  @java.lang.Override
  public final String getCode() {
    return name();
  }

  @java.lang.Override
  public final int getOrdinal() {
    return ordinal();
  }

  @java.lang.Override
  public final String toString() {
    return _stringValue;
  }

}
