/* Generated by Guidewire XML Code Generator */

package xsd.acord.enums;

@javax.annotation.Generated("gw.xml.codegen.XmlCodeGenerator")
@gw.lang.SimplePropertyProcessing
public enum Risk implements gw.xml.IXmlSchemaEnumValue {
  ABTX( "ABTX" ),
  ACCTS( "ACCTS" ),
  ACREQ( "ACREQ" ),
  AGIRR( "AGIRR" ),
  AGPRO( "AGPRO" ),
  AGRCH( "AGRCH" ),
  AGRLS( "AGRLS" ),
  AGRMA( "AGRMA" ),
  AGRPL( "AGRPL" ),
  AGRSA( "AGRSA" ),
  AGRTE( "AGRTE" ),
  ANIMAL( "ANIMAL" ),
  ANIML( "ANIML" ),
  AnnualTransit( "AnnualTransit" ),
  APCO( "APCO" ),
  AR( "AR" ),
  ARINT( "ARINT" ),
  ARSRE( "ARSRE" ),
  AUTOS( "AUTOS" ),
  AVAL( "AVAL" ),
  AWNG( "AWNG" ),
  BAILE( "BAILE" ),
  BAILL( "BAILL" ),
  BE( "BE" ),
  BI( "BI" ),
  BIAOL( "BIAOL" ),
  BICA( "BICA" ),
  BIDP( "BIDP" ),
  BIEFT( "BIEFT" ),
  BIIAS( "BIIAS" ),
  BIINT( "BIINT" ),
  BILUT( "BILUT" ),
  BLDCC( "BLDCC" ),
  BLDDC( "BLDDC" ),
  BLDG( "BLDG" ),
  BLDGM( "BLDGM" ),
  BLDOP( "BLDOP" ),
  BLDRK( "BLDRK" ),
  BLNKT( "BLNKT" ),
  BMAIB( "BMAIB" ),
  BMSBP( "BMSBP" ),
  BN( "BN" ),
  BO( "BO" ),
  BOAT( "BOAT" ),
  BOIRT( "BOIRT" ),
  BOLAW( "BOLAW" ),
  BPP( "BPP" ),
  BRBMS( "BRBMS" ),
  BRDCL( "BRDCL" ),
  BRDLL( "BRDLL" ),
  BRDML( "BRDML" ),
  BRDRL( "BRDRL" ),
  BRIDG( "BRIDG" ),
  BRNEW( "BRNEW" ),
  BroadcastEquipmentTowersPD( "BroadcastEquipmentTowersPD" ),
  BroadcastEquipmentTowersUO( "BroadcastEquipmentTowersUO" ),
  BRPSG( "BRPSG" ),
  BRTBM( "BRTBM" ),
  BRTWR( "BRTWR" ),
  BRUSH( "BRUSH" ),
  BRWOR( "BRWOR" ),
  BRWR( "BRWR" ),
  BSBB( "BSBB" ),
  BSBR( "BSBR" ),
  BSBS( "BSBS" ),
  BUC( "BUC" ),
  BURMN( "BURMN" ),
  BUROB( "BUROB" ),
  BURST( "BURST" ),
  BUSEE( "BUSEE" ),
  BUSIN( "BUSIN" ),
  BUSPROF( "BUSPROF" ),
  BUSPT( "BUSPT" ),
  BUSTM( "BUSTM" ),
  BY( "BY" ),
  C( "C" ),
  CABLD( "CABLD" ),
  CAMRA( "CAMRA" ),
  CATV( "CATV" ),
  CB( "CB" ),
  CBCC( "CBCC" ),
  CBI( "CBI" ),
  CBISE( "CBISE" ),
  CC( "CC" ),
  CCCB( "CCCB" ),
  CCCLL( "CCCLL" ),
  CCCPP( "CCCPP" ),
  CEPM( "CEPM" ),
  CFFTF( "CFFTF" ),
  CFURS( "CFURS" ),
  CGSPP( "CGSPP" ),
  CHSPL( "CHSPL" ),
  CIPM( "CIPM" ),
  CL( "CL" ),
  CM( "CM" ),
  CN( "CN" ),
  CNBUS( "CNBUS" ),
  CNPC( "CNPC" ),
  COLSA( "COLSA" ),
  COMAR( "COMAR" ),
  COMOPS( "COMOPS" ),
  COMRP( "COMRP" ),
  CONEQ( "CONEQ" ),
  CONLS( "CONLS" ),
  CP( "CP" ),
  CPP( "CPP" ),
  CPVIR( "CPVIR" ),
  CSA( "CSA" ),
  CSTPI( "CSTPI" ),
  CTRFT( "CTRFT" ),
  DEALR( "DEALR" ),
  DEBRL( "DEBRL" ),
  DECPP( "DECPP" ),
  DFORG( "DFORG" ),
  DFPAP( "DFPAP" ),
  DIC( "DIC" ),
  DOTA( "DOTA" ),
  DPM( "DPM" ),
  DRYCL( "DRYCL" ),
  DV( "DV" ),
  EDAOL( "EDAOL" ),
  EDEFT( "EDEFT" ),
  EDMIN( "EDMIN" ),
  EDPBI( "EDPBI" ),
  EDPEE( "EDPEE" ),
  EDPEQ( "EDPEQ" ),
  EDPHW( "EDPHW" ),
  EDPIN( "EDPIN" ),
  EDPMB( "EDPMB" ),
  EDPPC( "EDPPC" ),
  EDPPP( "EDPPP" ),
  EDPSW( "EDPSW" ),
  EDPTE( "EDPTE" ),
  EDQIN( "EDQIN" ),
  EE( "EE" ),
  EEELL( "EEELL" ),
  EEOP( "EEOP" ),
  EL( "EL" ),
  ELECO( "ELECO" ),
  EMPDH( "EMPDH" ),
  EQ( "EQ" ),
  EQFF( "EQFF" ),
  EQOP( "EQOP" ),
  EQSL( "EQSL" ),
  EXHIB( "EXHIB" ),
  FAINT( "FAINT" ),
  FBWHA( "FBWHA" ),
  FBWOH( "FBWOH" ),
  FDSC( "FDSC" ),
  FENCE( "FENCE" ),
  FF( "FF" ),
  FI( "FI" ),
  FIA( "FIA" ),
  FILM( "FILM" ),
  FINEA( "FINEA" ),
  FIRE( "FIRE" ),
  FIX( "FIX" ),
  FLOOD( "FLOOD" ),
  FLOWR( "FLOWR" ),
  FLPLN( "FLPLN" ),
  FM( "FM" ),
  FOOD( "FOOD" ),
  FR( "FR" ),
  FREEZ( "FREEZ" ),
  FURBL( "FURBL" ),
  FURN( "FURN" ),
  GC( "GC" ),
  GE( "GE" ),
  GF( "GF" ),
  GLASS( "GLASS" ),
  GLDSV( "GLDSV" ),
  GOLF( "GOLF" ),
  GPP( "GPP" ),
  GT( "GT" ),
  GU( "GU" ),
  HA( "HA" ),
  HAIL( "HAIL" ),
  HAYOF( "HAYOF" ),
  HE( "HE" ),
  HF( "HF" ),
  HMBUS( "HMBUS" ),
  HO( "HO" ),
  HOLE( "HOLE" ),
  HP( "HP" ),
  HPP( "HPP" ),
  IDRC( "IDRC" ),
  IMEDP( "IMEDP" ),
  INACC( "INACC" ),
  INAJS( "INAJS" ),
  INEDP( "INEDP" ),
  INFL( "INFL" ),
  INST( "INST" ),
  INSTL( "INSTL" ),
  INVAP( "INVAP" ),
  INVPA( "INVPA" ),
  JEWBL( "JEWBL" ),
  JL( "JL" ),
  LAWN( "LAWN" ),
  LBI( "LBI" ),
  LE( "LE" ),
  LEGLB( "LEGLB" ),
  LI( "LI" ),
  LIGHT( "LIGHT" ),
  LIIAB( "LIIAB" ),
  LOG( "LOG" ),
  LR( "LR" ),
  LSINT( "LSINT" ),
  LSTCK( "LSTCK" ),
  LTDCL( "LTDCL" ),
  LTDLL( "LTDLL" ),
  LTDML( "LTDML" ),
  LTDRL( "LTDRL" ),
  MACEQ( "MACEQ" ),
  MAIL( "MAIL" ),
  Mail( "Mail" ),
  MB( "MB" ),
  MC( "MC" ),
  MECHO( "MECHO" ),
  MENO( "MENO" ),
  MERC( "MERC" ),
  MESC( "MESC" ),
  MFP( "MFP" ),
  MI( "MI" ),
  MINES( "MINES" ),
  MISC( "MISC" ),
  MiscArticles( "MiscArticles" ),
  ML( "ML" ),
  MN( "MN" ),
  MNSEC( "MNSEC" ),
  MNSOF( "MNSOF" ),
  MNSON( "MNSON" ),
  MOLL( "MOLL" ),
  MOPS( "MOPS" ),
  MotorTruckCargoCarriers( "MotorTruckCargoCarriers" ),
  MotorTruckCargoOwnCargoOwnersVehicles( "MotorTruckCargoOwnCargoOwnersVehicles" ),
  MSCAR( "MSCAR" ),
  MTR( "MTR" ),
  MTRTK( "MTRTK" ),
  MUEMS( "MUEMS" ),
  MUSIC( "MUSIC" ),
  MusicalInstrumentsIP( "MusicalInstrumentsIP" ),
  MusicalInstrumentsOTI( "MusicalInstrumentsOTI" ),
  NEWAQ( "NEWAQ" ),
  NEWPP( "NEWPP" ),
  NOTRL( "NOTRL" ),
  NTRIA( "NTRIA" ),
  OF( "OF" ),
  OGF( "OGF" ),
  OPPF( "OPPF" ),
  OPS( "OPS" ),
  OPTBD( "OPTBD" ),
  OPTPP( "OPTPP" ),
  Organs( "Organs" ),
  OT( "OT" ),
  OTLIAB( "OTLIAB" ),
  OTST( "OTST" ),
  OUTPR( "OUTPR" ),
  OUTSI( "OUTSI" ),
  PAPER( "PAPER" ),
  PARCL( "PARCL" ),
  PATDI( "PATDI" ),
  PC( "PC" ),
  PETCO( "PETCO" ),
  PG( "PG" ),
  PHYSF( "PHYSF" ),
  PINTR( "PINTR" ),
  PNCPP( "PNCPP" ),
  PO( "PO" ),
  POOLS( "POOLS" ),
  POP( "POP" ),
  POTOP( "POTOP" ),
  POTS( "POTS" ),
  POULT( "POULT" ),
  PP( "PP" ),
  PPAOL( "PPAOL" ),
  PPEFT( "PPEFT" ),
  PPEMP( "PPEMP" ),
  PPOA( "PPOA" ),
  PPOU( "PPOU" ),
  PPRFL( "PPRFL" ),
  PPXS( "PPXS" ),
  PR( "PR" ),
  PREFL( "PREFL" ),
  PREM( "PREM" ),
  PROD( "PROD" ),
  PRPIO( "PRPIO" ),
  PRRFO( "PRRFO" ),
  PRTSG( "PRTSG" ),
  PRVSO( "PRVSO" ),
  PS( "PS" ),
  PSPP( "PSPP" ),
  PUEG( "PUEG" ),
  PULCR( "PULCR" ),
  RCCST( "RCCST" ),
  RDPRP( "RDPRP" ),
  RE( "RE" ),
  RECHG( "RECHG" ),
  RECV( "RECV" ),
  RELOC( "RELOC" ),
  RENUC( "RENUC" ),
  RETWR( "RETWR" ),
  RREIM( "RREIM" ),
  RSTEQ( "RSTEQ" ),
  RT( "RT" ),
  RTVA( "RTVA" ),
  RV( "RV" ),
  SBBAS( "SBBAS" ),
  SBSD( "SBSD" ),
  SBUSI( "SBUSI" ),
  SBWBL( "SBWBL" ),
  SBWOB( "SBWOB" ),
  SCHPP( "SCHPP" ),
  SCHPR( "SCHPR" ),
  SCINS( "SCINS" ),
  SDB( "SDB" ),
  SE( "SE" ),
  SG( "SG" ),
  SGLAS( "SGLAS" ),
  SIGN( "SIGN" ),
  SK( "SK" ),
  SLIDE( "SLIDE" ),
  SLSMP( "SLSMP" ),
  SM( "SM" ),
  SN( "SN" ),
  SNOWM( "SNOWM" ),
  SO( "SO" ),
  SOC( "SOC" ),
  SOCA( "SOCA" ),
  SOCU( "SOCU" ),
  SPOIL( "SPOIL" ),
  ST( "ST" ),
  STOCK( "STOCK" ),
  STSG( "STSG" ),
  SV( "SV" ),
  TAEND( "TAEND" ),
  TCASH( "TCASH" ),
  THPRP( "THPRP" ),
  TIB( "TIB" ),
  TIBOP( "TIBOP" ),
  TIMEL( "TIMEL" ),
  TL( "TL" ),
  TOOLS( "TOOLS" ),
  TORN( "TORN" ),
  TOWER( "TOWER" ),
  TRANS( "TRANS" ),
  TRIA( "TRIA" ),
  TripTransit( "TripTransit" ),
  TRPTR( "TRPTR" ),
  TSM( "TSM" ),
  TSP( "TSP" ),
  TSPOP( "TSPOP" ),
  TUIT( "TUIT" ),
  TUNLS( "TUNLS" ),
  TURBO( "TURBO" ),
  UM( "UM" ),
  UseOccupancy( "UseOccupancy" ),
  VBI( "VBI" ),
  VETKL( "VETKL" ),
  VOLAC( "VOLAC" ),
  VPAOL( "VPAOL" ),
  VPAPR( "VPAPR" ),
  VPINT( "VPINT" ),
  WD( "WD" ),
  WE( "WE" ),
  WFF( "WFF" ),
  WHTT( "WHTT" ),
  WI( "WI" ),
  WIND( "WIND" ),
  WST( "WST" ),
  WXWHTT( "WXWHTT" ),
  YACHT( "YACHT" ),
  YBPPA( "YBPPA" ),
  YBPPU( "YBPPU" ),
  YS( "YS" ),
  YSOP( "YSOP" );
  private static final gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl> TYPE = new gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl>() {
    @java.lang.Override
    public gw.internal.xml.XmlEnumerationTypeDataImpl init() {
      return (gw.internal.xml.XmlEnumerationTypeDataImpl) ( (gw.internal.xml.XmlSchemaAccessImpl) xsd.acord.util.SchemaAccess ).getSchemaIndex().getTypeData( "xsd.acord.enums.Risk" );
    }
  };

  private final java.lang.String _stringValue;

  private Risk( java.lang.String stringValue ) {
    _stringValue = stringValue;
  }

  public static final xsd.acord.enums.Risk forValue( java.lang.String value ) {
    return (xsd.acord.enums.Risk) TYPE.get().cg_forValue( value );
  } // xmlRefactorRemove

  public static final xsd.acord.enums.Risk forGosuValue( java.lang.String value ) {
    return (xsd.acord.enums.Risk) TYPE.get().cg_forValue( value );
  }

  @java.lang.Override
  public final gw.xml.XmlSimpleValue getSimpleValue() {
    return TYPE.get().getEnumSimpleValue( this );
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getStringValue() {
    return _stringValue; // xmlRefactorRemove
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getSerializedValue() {
    return _stringValue;
  }

  @java.lang.Override
  public final java.lang.String getValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getGosuValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  }

  @java.lang.Override
  public final String getCode() {
    return name();
  }

  @java.lang.Override
  public final int getOrdinal() {
    return ordinal();
  }

  @java.lang.Override
  public final String toString() {
    return _stringValue;
  }

}
