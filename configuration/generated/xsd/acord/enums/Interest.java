/* Generated by Guidewire XML Code Generator */

package xsd.acord.enums;

@javax.annotation.Generated("gw.xml.codegen.XmlCodeGenerator")
@gw.lang.SimplePropertyProcessing
public enum Interest implements gw.xml.IXmlSchemaEnumValue {
  AB( "AB" ),
  ABP( "ABP" ),
  AC( "AC" ),
  ADDIN( "ADDIN" ),
  AG( "AG" ),
  AIF( "AIF" ),
  AIL( "AIL" ),
  AILH( "AILH" ),
  AILL( "AILL" ),
  AIM( "AIM" ),
  AINL( "AINL" ),
  AINT( "AINT" ),
  ANI( "ANI" ),
  ASP( "ASP" ),
  AUC( "AUC" ),
  BLC( "BLC" ),
  BO( "BO" ),
  BW( "BW" ),
  Client( "Client" ),
  CLMC( "CLMC" ),
  CON( "CON" ),
  CONLES( "CONLES" ),
  CONOCC( "CONOCC" ),
  CONSP( "CONSP" ),
  COOCC( "COOCC" ),
  COPUR( "COPUR" ),
  CORPO( "CORPO" ),
  COS( "COS" ),
  COSEL( "COSEL" ),
  COWN( "COWN" ),
  COWNIP( "COWNIP" ),
  CRTH( "CRTH" ),
  CRTR( "CRTR" ),
  CTINT( "CTINT" ),
  CUO( "CUO" ),
  DA( "DA" ),
  DESIN( "DESIN" ),
  DPORG( "DPORG" ),
  EAI( "EAI" ),
  EMPL( "EMPL" ),
  EO( "EO" ),
  ESCROW( "ESCROW" ),
  EXEC( "EXEC" ),
  FACUL( "FACUL" ),
  FEEOWN( "FEEOWN" ),
  FINCO( "FINCO" ),
  FRAN( "FRAN" ),
  GOVSUB( "GOVSUB" ),
  INSPCT( "INSPCT" ),
  INTCAF( "INTCAF" ),
  INTCAFI( "INTCAFI" ),
  INTCAO( "INTCAO" ),
  LAI( "LAI" ),
  LANDINT( "LANDINT" ),
  LEASB( "LEASB" ),
  LEASD( "LEASD" ),
  LENDLOSS( "LENDLOSS" ),
  Lessee( "Lessee" ),
  Lessor( "Lessor" ),
  LF( "LF" ),
  LIEN( "LIEN" ),
  LOSSP( "LOSSP" ),
  LOSSPAI( "LOSSPAI" ),
  LOSSPAIAIN( "LOSSPAIAIN" ),
  LOSSPAIN( "LOSSPAIN" ),
  LSEQP( "LSEQP" ),
  MA( "MA" ),
  MFT( "MFT" ),
  MGRLES( "MGRLES" ),
  MORTG( "MORTG" ),
  MORTGLOSSP( "MORTGLOSSP" ),
  MORTSR( "MORTSR" ),
  MUNI( "MUNI" ),
  OCCU( "OCCU" ),
  OCP( "OCP" ),
  OLCFA( "OLCFA" ),
  OLCFB( "OLCFB" ),
  OLTCYC( "OLTCYC" ),
  OM( "OM" ),
  OO( "OO" ),
  OT( "OT" ),
  OWNED( "OWNED" ),
  OWNER( "OWNER" ),
  Participant( "Participant" ),
  PERLIA( "PERLIA" ),
  PETRO( "PETRO" ),
  POLIT( "POLIT" ),
  POLITSUB( "POLITSUB" ),
  RG( "RG" ),
  SC( "SC" ),
  SECLP( "SECLP" ),
  ST( "ST" ),
  TENANT( "TENANT" ),
  TITLEH( "TITLEH" ),
  TOWNH( "TOWNH" ),
  TR( "TR" ),
  VENDBF( "VENDBF" ),
  VENDLF( "VENDLF" ),
  VENDOR( "VENDOR" ),
  VO( "VO" );
  private static final gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl> TYPE = new gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlEnumerationTypeDataImpl>() {
    @java.lang.Override
    public gw.internal.xml.XmlEnumerationTypeDataImpl init() {
      return (gw.internal.xml.XmlEnumerationTypeDataImpl) ( (gw.internal.xml.XmlSchemaAccessImpl) xsd.acord.util.SchemaAccess ).getSchemaIndex().getTypeData( "xsd.acord.enums.Interest" );
    }
  };

  private final java.lang.String _stringValue;

  private Interest( java.lang.String stringValue ) {
    _stringValue = stringValue;
  }

  public static final xsd.acord.enums.Interest forValue( java.lang.String value ) {
    return (xsd.acord.enums.Interest) TYPE.get().cg_forValue( value );
  } // xmlRefactorRemove

  public static final xsd.acord.enums.Interest forGosuValue( java.lang.String value ) {
    return (xsd.acord.enums.Interest) TYPE.get().cg_forValue( value );
  }

  @java.lang.Override
  public final gw.xml.XmlSimpleValue getSimpleValue() {
    return TYPE.get().getEnumSimpleValue( this );
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getStringValue() {
    return _stringValue; // xmlRefactorRemove
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getSerializedValue() {
    return _stringValue;
  }

  @java.lang.Override
  public final java.lang.String getValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  } // xmlRefactorRemove

  @java.lang.Override
  public final java.lang.String getGosuValue() {
    return (java.lang.String) TYPE.get().getEnumSimpleValue( this ).getValue();
  }

  @java.lang.Override
  public final String getCode() {
    return name();
  }

  @java.lang.Override
  public final int getOrdinal() {
    return ordinal();
  }

  @java.lang.Override
  public final String toString() {
    return _stringValue;
  }

}
