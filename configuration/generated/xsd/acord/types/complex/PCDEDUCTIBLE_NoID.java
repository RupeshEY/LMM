/* Generated by Guidewire XML Code Generator */

package xsd.acord.types.complex;

@javax.annotation.Generated("gw.xml.codegen.XmlCodeGenerator")
@gw.lang.SimplePropertyProcessing
@gw.xml.annotation.SuperTypeData(xsd.acord.types.complex.FORMATTEDNUMBER_NoID.class)
public class PCDEDUCTIBLE_NoID extends xsd.acord.types.complex.FORMATTEDNUMBER_NoID {

  public static final javax.xml.namespace.QName $QNAME = new javax.xml.namespace.QName( "", "PCDEDUCTIBLE_NoID", "" );
  public static final gw.xml.XmlNamespace $NAMESPACE = new gw.xml.XmlNamespace( "", "" );
  public static final javax.xml.namespace.QName $ELEMENT_QNAME_DeductibleBasisCd = new javax.xml.namespace.QName( "", "DeductibleBasisCd", "" );
  public static final javax.xml.namespace.QName $ELEMENT_QNAME_DeductibleTypeCd = new javax.xml.namespace.QName( "", "DeductibleTypeCd", "" );
  public static final javax.xml.namespace.QName $ELEMENT_QNAME_DeductibleAppliesToCd = new javax.xml.namespace.QName( "", "DeductibleAppliesToCd", "" );
  public static final javax.xml.namespace.QName $ELEMENT_QNAME_FormatInteger = new javax.xml.namespace.QName( "", "FormatInteger", "" );
  public static final javax.xml.namespace.QName $ELEMENT_QNAME_FormatCurrencyAmt = new javax.xml.namespace.QName( "", "FormatCurrencyAmt", "" );
  public static final javax.xml.namespace.QName $ELEMENT_QNAME_FormatModFactor = new javax.xml.namespace.QName( "", "FormatModFactor", "" );
  public static final javax.xml.namespace.QName $ELEMENT_QNAME_FormatPct = new javax.xml.namespace.QName( "", "FormatPct", "" );
  public static final javax.xml.namespace.QName $ELEMENT_QNAME_FormatText = new javax.xml.namespace.QName( "", "FormatText", "" );
  private static final gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlTypeInstanceTypeDataImpl> TYPE = new gw.internal.xml.util.LockingLazyVar<gw.internal.xml.XmlTypeInstanceTypeDataImpl>() {
    @java.lang.Override
    public gw.internal.xml.XmlTypeInstanceTypeDataImpl init() {
      return (gw.internal.xml.XmlTypeInstanceTypeDataImpl) ( (gw.internal.xml.XmlSchemaAccessImpl) xsd.acord.util.SchemaAccess ).getSchemaIndex().getTypeData( "xsd.acord.types.complex.PCDEDUCTIBLE_NoID" );
    }
  };

  public PCDEDUCTIBLE_NoID() {
    super( 1667198988, TYPE.get() );
  }

  private PCDEDUCTIBLE_NoID( gw.internal.xml.XmlTypeInstanceState state ) {
    super( 1667198988, state );
  }

  protected PCDEDUCTIBLE_NoID( int magic, gw.internal.xml.XmlTypeInstanceTypeDataImpl typeData ) {
    super(magic, typeData);
  }

  protected PCDEDUCTIBLE_NoID( int magic, gw.internal.xml.XmlTypeInstanceState state ) {
    super(magic, state);
  }

  public static gw.xml.XmlTypeInstanceTypeData asTypeData() {
    return TYPE.get();
  }

  @java.lang.Override
  public java.lang.Class<? extends xsd.acord.types.complex.PCDEDUCTIBLE_NoID> get$Class() {
    return getClass();
  }

  @java.lang.Override
  public xsd.acord.types.complex.PCDEDUCTIBLE_NoID get$TypeInstance() {
    return this;
  }



  @gw.lang.Autocreate
  @gw.lang.Autoinsert
  public final xsd.acord.enums.DeductibleBasis getDeductibleBasisCd() {
    return (xsd.acord.enums.DeductibleBasis) TYPE.get().getPropertyValue( this, "_DeductibleBasisCd" );
  }


  public final void setDeductibleBasisCd( xsd.acord.enums.DeductibleBasis value ) {
    TYPE.get().setPropertyValue( this, "_DeductibleBasisCd", value );
  }


  @gw.lang.Autocreate
  @gw.lang.Autoinsert
  public final xsd.acord.DeductibleBasisCd getDeductibleBasisCd_elem() {
    return (xsd.acord.DeductibleBasisCd) TYPE.get().getPropertyValue( this, "_DeductibleBasisCd_elem" );
  }


  public final void setDeductibleBasisCd_elem( xsd.acord.DeductibleBasisCd value ) {
    TYPE.get().setPropertyValue( this, "_DeductibleBasisCd_elem", value );
  }


  @gw.lang.Autocreate
  @gw.lang.Autoinsert
  public final xsd.acord.enums.DeductibleType getDeductibleTypeCd() {
    return (xsd.acord.enums.DeductibleType) TYPE.get().getPropertyValue( this, "_DeductibleTypeCd" );
  }


  public final void setDeductibleTypeCd( xsd.acord.enums.DeductibleType value ) {
    TYPE.get().setPropertyValue( this, "_DeductibleTypeCd", value );
  }


  @gw.lang.Autocreate
  @gw.lang.Autoinsert
  public final xsd.acord.DeductibleTypeCd getDeductibleTypeCd_elem() {
    return (xsd.acord.DeductibleTypeCd) TYPE.get().getPropertyValue( this, "_DeductibleTypeCd_elem" );
  }


  public final void setDeductibleTypeCd_elem( xsd.acord.DeductibleTypeCd value ) {
    TYPE.get().setPropertyValue( this, "_DeductibleTypeCd_elem", value );
  }


  @gw.lang.Autocreate
  @gw.lang.Autoinsert
  public final java.util.List<xsd.acord.enums.DeductibleApplies> getDeductibleAppliesToCd() {
    return (java.util.List<xsd.acord.enums.DeductibleApplies>) TYPE.get().getPropertyValue( this, "_DeductibleAppliesToCd" );
  }


  public final void setDeductibleAppliesToCd( java.util.List<xsd.acord.enums.DeductibleApplies> value ) {
    TYPE.get().setPropertyValue( this, "_DeductibleAppliesToCd", value );
  }



  @gw.lang.Autocreate
  @gw.lang.Autoinsert
  public final java.util.List<xsd.acord.DeductibleAppliesToCd> getDeductibleAppliesToCd_elem() {
    return (java.util.List<xsd.acord.DeductibleAppliesToCd>) TYPE.get().getPropertyValue( this, "_DeductibleAppliesToCd_elem" );
  }


  public final void setDeductibleAppliesToCd_elem( java.util.List<xsd.acord.DeductibleAppliesToCd> value ) {
    TYPE.get().setPropertyValue( this, "_DeductibleAppliesToCd_elem", value );
  }


}
