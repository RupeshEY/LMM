Ext.define('gw.override.form.trigger.Trigger', {
  override: 'Ext.form.trigger.Trigger',
  /**
   * @protected
   * Called when this trigger's field is rendered
   *
   * @UpgradedSencha - use the proper selector as generated by Ext.makeIdSelector()
   */
  onFieldRender: function() {
    var me = this,
        /**
         * @property {Ext.dom.Element} el
         * @private
         * The trigger's main element
         */
        // Override -- begin
        //el = me.el = me.field.triggerWrap.selectNode('#' + me.domId, false);
        el = me.el = me.field.triggerWrap.selectNode(Ext.makeIdSelector(me.domId), false);
        // end override

    // ensure that the trigger does not consume space when hidden
    el.setVisibilityMode(Ext.Element.DISPLAY);
    me.rendered = true;
  },
  /**
   * Generates the trigger markup. Called during rendering of the field the trigger
   * belongs to.
   * @param {Object} fieldData The render data object of the parent field.
   * @private
   * @return {String}
   */
  renderTrigger: function(fieldData) {
    var me = this,
        width = me.width,
        triggerStyle = me.hidden ? 'display:none;' : '';

    if (width) {
      triggerStyle += 'width:' + width;
    }

    // @UpgradedSencha - allow Guidewire to pass a proscribed domId for the trigger, otherwise generate it properly
    // --- Override
    if (!me.domId) {
      me.domId = me.field.id + '-trigger-' + me.id
    }
    // --- end override

    return Ext.XTemplate.getTpl(me, 'renderTpl').apply({
      $trigger: me,
      fieldData: fieldData,
      ui: fieldData.ui,
      childElCls: fieldData.childElCls,
      // --- Override replace the commented line below with a simple assignment
      // triggerId: me.domId = me.field.id + '-trigger-' + me.id,
      triggerId: me.domId,
      // --- end override
      cls: me.cls,
      triggerStyle: triggerStyle,
      extraCls: me.extraCls,
      baseCls: me.baseCls
    });
  }

});
