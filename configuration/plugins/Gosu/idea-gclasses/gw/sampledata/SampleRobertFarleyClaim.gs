package gw.sampledata
uses gw.api.locale.DisplayKey
uses gw.pl.persistence.core.Bundle
uses gw.api.util.CurrencyUtil
uses gw.api.databuilder.ServiceRequestChangeBuilder
uses gw.api.databuilder.ServiceRequestBuilder

@Export
class SampleRobertFarleyClaim extends SampleDataBase {

  construct(inCache : SampleDataCache) {
    super(inCache)
  }

  override property get Description() : String {
    return "Robert Farley Personal Auto Claim and associated Contacts, Policy, Exposures, Notes, ClaimContacts, Activities and Financials"
  }
   
  override function testSampleData(bundle : Bundle) {
    create(bundle)
  }
     
  function create(bundle : Bundle) : ClaimInfo {

    var contactDemoSample3024 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Farley")
      .withPublicId("demo_sample:3024")
      .withFirstName("Robert")
      .withPrimaryPhone(TC_WORK)
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("503 2nd Ave.")
        .withCountry(TC_US)
        .withPostalCode("92101")
        .withState(State.TC_CA)
        .withAddressType(TC_HOME)
        .withCity("San Diego"))
      .withWorkPhone("619-275-2346")
      .create(bundle)

    var contactDemoSample9 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Weeks")
      .withPublicId("demo_sample:9")
      .withFirstName("William")
      .withPrimaryPhone(TC_WORK)
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("345 Fir Lane")
        .withCountry(TC_US)
        .withPostalCode("91352")
        .withState(State.TC_CA)
        .withAddressType(TC_HOME)
        .withCity("La Canada"))
      .withWorkPhone("619-275-5986")
      .create(bundle)

    var contactDemoSample10011 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Egertson")
      .withPublicId("demo_sample:10011")
      .withFirstName("Karen")
      .withPrimaryPhone(TC_WORK)
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("908 Angels Landing Rd.")
        .withCountry(TC_US)
        .withPostalCode("91352")
        .withState(State.TC_CA)
        .withAddressType(TC_HOME)
        .withCity("Anaheim"))
      .withWorkPhone("213-457-6378")
      .create(bundle)

    var contactDemoSampleAutoShop1 = new gw.api.databuilder.AutoRepairShopBuilder()
            .withName("Joe's Auto Body Shop")
            .withPrimaryPhone(TC_WORK)
            .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
              .withAddressLine1("6246 Rock Ave")
              .withCountry(TC_US)
              .withPostalCode("91006")
              .withState(State.TC_CA)
              .withAddressType(TC_HOME)
              .withCity("Arcadia"))
            .withWorkPhone("579-628-5555")
            .create(bundle)
            
    var contactDemoSampleAutoShop2 = new gw.api.databuilder.AutoRepairShopBuilder()
            .withName("Frank's Car Repair")
            .withPrimaryPhone(TC_WORK)
            .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
              .withAddressLine1("456 Stone Ave")
              .withCountry(TC_US)
              .withPostalCode("91006")
              .withState(State.TC_CA)
              .withAddressType(TC_HOME)
              .withCity("Arcadia"))
            .withWorkPhone("579-628-4444")
            .create(bundle)

    var claim = new gw.api.databuilder.ClaimBuilder()
      .withIncidentReport(false)
      .withWeather(TC_CL)
      .withAssignmentStatus(TC_ASSIGNED)
      .withLossDate(BaseDate.addDays(-8))
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStrategy(TC_AUTO_NORMAL)
      .withAssignmentDate(BaseDate.addDays(0))
      .withFlagged(TC_NEVERFLAGGED)
      .withLossLocation(new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("506 2nd Ave.")
        .withCountry(TC_US)
        .withPostalCode("92101")
        .withState(State.TC_CA)
        .withAddressType(TC_HOME)
        .withCity("San Diego"))
      .withLossCause(TC_VEHCOLLISION)
      .withClaimNumber("235-53-365889")
      .withMainContactType(TC_SELF)
      .withReportedByType(TC_OTHER)
      .withLossType(TC_AUTO)
      .withValidationLevel(TC_NEWLOSS)
      .withPolicy( new gw.api.databuilder.PolicyBuilder()
        .withExpirationDate(BaseDate.addDays(274))
        .withUnderwritingCo(TC_PARENT)
        .withVerified(true)
        .withOrigEffectiveDate(BaseDate.addDays(-3266))
        .withAccount("Account 1")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withUnderwritingGroup(TC_ACME_AUTO)
        .withEffectiveDate(BaseDate.addDays(-90))
        .withStatus(TC_INFORCE)
        .withPolicyNumber("54-586734")
        .withPublicId("demo_sample:8")
        .withTotalProperties(0)
        .withPolicyType(TC_PERSONALAUTO)
        .withTotalVehicles(1)
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(1)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
            .withYear(2002)
            .withLicensePlate("2GDH967")
            .withPublicId("demo_sample:18")
            .withMake("Pontiac")
            .withState(Jurisdiction.TC_CA)
            .withModel("Grand Prix")
            .withVin("3DGF78575GD891525"))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(20000bd.ofDefaultCurrency())
            .withType(TC_PACOLLISIONCOV)
            .withDeductible(0bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(20000bd.ofDefaultCurrency())
            .withType(TC_PACOMPREHENSIVECOV)
            .withDeductible(0bd.ofDefaultCurrency()))
          .withCoverage(new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(300000bd.ofDefaultCurrency())
            .withType(TC_PALIABILITYCOV)
            .withExposureLimit(150000bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(1000bd.ofDefaultCurrency())
            .withType(TC_PAMEDPAYCOV))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(1000bd.ofDefaultCurrency())
            .withType(CoverageType.TC_PATOWINGLABORCOV)))
        .withContactInRole(contactDemoSample3024, TC_INSURED)
        .withContactInRole(contactDemoSample10011, TC_AGENT))
      .withFault(80)
      .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
      .withJurisdictionState(TC_CA)
      .withSegment(TC_AUTO_MID)
      .withReportedDate(BaseDate.addDays(-3))
      .withCoverageInQuestion(false)
      .withLOBCode(TC_PERSONALAUTOLINE)
      .withPublicID("demo_sample:20")
      .withDescription("Insured swerved to avoid an animal, struck claimant's car head-on")
      .withState(TC_OPEN)
      .withAssignedUser(findUserByUserName("aapplegate"))
      .withContactInRole(contactDemoSample9, TC_CHECKPAYEE)
      .withContactInRole(contactDemoSample3024, TC_MAINCONTACT)
      .withContactInRole(contactDemoSample9, TC_REPORTER)
      .withContactInRole(contactDemoSampleAutoShop1, ContactRole.TC_SERVICEREQUESTSPECIALIST)
      .withContactInRole(contactDemoSampleAutoShop2, ContactRole.TC_SERVICEREQUESTSPECIALIST)
      .withServiceRequest(new ServiceRequestBuilder()
        .withRequestedQuoteCompletionDate(BaseDate.addDays(14))
        .withExpectedQuoteCompletionDate(BaseDate.addDays(14))
        .withInstruction(gw.api.databuilder.ServiceRequestInstructionBuilder.uiReady())
        .withProgress(ServiceRequestProgress.TC_DRAFT)
        .withKind(ServiceRequestKind.TC_QUOTEANDSERVICE)
        .withQuoteStatus(ServiceRequestQuoteStatus.TC_NOQUOTE)
        .withInstruction(new gw.api.databuilder.ServiceRequestInstructionBuilder()
          .withCustomerContact(contactDemoSample3024)
          .withSpecialistService(SampleSpecialistServicesBase.AutoRepairBody)
          .withInstructionText("The insured prefers to be contacted by email")
          .withServiceAddress(contactDemoSampleAutoShop1.AddressOwner.Address))
        .withSpecialistCommMethod(SpecialistCommMethod.TC_GWPORTAL)
        .withSpecialist(contactDemoSampleAutoShop1)
        .withPublicId("demo_sample:1")
        .withAssignedUserAndDefaultGroup(AndyApplegate))
      .withServiceRequest(new ServiceRequestBuilder()
        .withRequestedServiceCompletionDate(BaseDate.addDays(7))
        .withExpectedServiceCompletionDate(BaseDate.addDays(7))
        .withProgress(ServiceRequestProgress.TC_DRAFT)
        .withQuoteStatus(ServiceRequestQuoteStatus.TC_NOQUOTE)
        .withKind(ServiceRequestKind.TC_SERVICEONLY)
        .withInstruction(new gw.api.databuilder.ServiceRequestInstructionBuilder()
          .withCustomerContact(contactDemoSample9)
          .withSpecialistService(SampleSpecialistServicesBase.AutoRepairGlass)
          .withInstructionText("The claimant prefers to be contacted by email")
          .withServiceAddress(contactDemoSampleAutoShop2.AddressOwner.Address))
        .withSpecialistCommMethod(SpecialistCommMethod.TC_GWPORTAL)
        .withSpecialist(contactDemoSampleAutoShop2)
        .withPublicId("demo_sample:2")
        .withAssignedUserAndDefaultGroup(AndyApplegate))
      .withNote( new gw.api.databuilder.NoteBuilder()
        .withTopic(TC_GENERAL)
        .withAuthoringDate(BaseDate.addDays(-2))
        .withSubject("Initial phone call with insured")
        .withAuthor(findUserByUserName("cclark"))
        .withBody("Insured claims he swerved to avoid a dog in the road, then hit an oncoming car in the other lane."))
      .withNote( new gw.api.databuilder.NoteBuilder()
        .withTopic(TC_GENERAL)
        .withAuthoringDate(BaseDate.addDays(-1))
        .withSubject("Initial phone call with claimant")
        .withAuthor(findUserByUserName("aapplegate"))
        .withBody("Spoke to claimant - he was hospitalized due to a fracture in a bone behind his eye and is under observation, and may need to undergo surgery.  Because claimant does not have other insurance, authorized a check to cover vehicle towing and initial hospital stay."))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-3))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withCloseDate(BaseDate.addDays(-1))
        .withMandatory(true)
        .withPriority(TC_HIGH)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType(TC_GENERAL)
        .withEscalationDate(BaseDate.addDays(4))
        .withStatus(TC_COMPLETE)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("contact_insured"))
        .withSubject("Contact insured")
        .withAssignedUser(findUserByUserName("aapplegate"))
        .withTargetDate(BaseDate.addDays(-1)))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-3))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withCloseDate(BaseDate.addDays(-1))
        .withMandatory(true)
        .withPriority(TC_HIGH)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType(TC_GENERAL)
        .withEscalationDate(BaseDate.addDays(4))
        .withStatus(TC_COMPLETE)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("contact_claimant"))
        .withSubject("Contact claimant")
        .withAssignedUser(findUserByUserName("aapplegate"))
        .withTargetDate(BaseDate.addDays(-1)))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-3))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withMandatory(false)
        .withPriority(TC_NORMAL)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType(TC_GENERAL)
        .withEscalationDate(BaseDate.addDays(17))
        .withStatus(TC_OPEN)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("initial_30day_review"))
        .withSubject("10 day review")
        .withAssignedUser(findUserByUserName("ssmith"))
        .withTargetDate(BaseDate.addDays(7)))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-3))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withCloseDate(BaseDate.addDays(0))
        .withMandatory(true)
        .withPriority(TC_HIGH)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType(TC_GENERAL)
        .withEscalationDate(BaseDate.addDays(10))
        .withStatus(TC_COMPLETE)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("coverage"))
        .withSubject("Check coverage")
        .withAssignedUser(findUserByUserName("aapplegate"))
        .withTargetDate(BaseDate.addDays(0)))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-3))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withMandatory(true)
        .withPriority(TC_NORMAL)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType(TC_GENERAL)
        .withEscalationDate(BaseDate.addDays(19))
        .withStatus(TC_OPEN)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("general_reminder"))
        .withSubject("Set initial reserve")
        .withAssignedUser(findUserByUserName("aapplegate"))
        .withTargetDate(BaseDate.addDays(4)))
      .create(bundle)

    var coverageForAggLimit = claim.Policy.RiskUnits.singleWhere( \ r -> r.RUNumber == 1 ).Coverages.singleWhere(\ c -> c.Type == TC_PALIABILITYCOV)

    var robertFarleyClaimInfo = new gw.api.databuilder.ClaimInfoBuilder()
      .withRootPublicId("demo_sample:20")
      .withClaimNumber("235-53-365889")
      .onClaim(claim)
      .create(bundle)

    var policyPeriodDemoSample70008 = new gw.api.databuilder.PolicyPeriodBuilder()
      .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(robertFarleyClaimInfo))
      .withPolicyPeriodType(TC_POLICY)
      .withExpirationDate(BaseDate.addDays(274))
      .withPolicyNumber("54-586734")
      .withPublicId("demo_sample:70008")
      .withPolicyType(TC_PERSONALAUTO)
      .withEffectiveDate(BaseDate.addDays(-90))
      .create(bundle)

    var aggregateLimitDemoSample90002 = new gw.api.databuilder.AggregateLimitBuilder()
      .withLimitCurrencyAmount(300000bd.ofDefaultCurrency())
      .withCoverageLine( new gw.api.databuilder.CoverageLineLimitBuilder()
        .withCoverageLine( new gw.api.databuilder.CoverageLineBuilder()
          .withExposureUnitNumber(1)
          .withCoverageType(TC_PALIABILITYCOV)
          .withCoverageSubtype(TC_VEHICLECOVERAGE)
          .withCoverage(coverageForAggLimit)
          .onPolicyPeriod(policyPeriodDemoSample70008)) )
      .withPublicId("demo_sample:90002")
      .withLimitType(TC_LOSSDATE)
      .onPolicyPeriod(policyPeriodDemoSample70008)
      .create(bundle)

    var exposureDemoSample10003 = new gw.api.databuilder.ExposureBuilder()
      .withOtherCoverage(false)
      .withLossParty(TC_INSURED)
      .withExposureType(TC_VEHICLEDAMAGE)
      .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
      .withAssignmentStatus(TC_ASSIGNED)
      .withStrategy(TC_AUTO_FAST)
      .withProgress(TC_INVESTIGATION)
      .withJurisdictionState(TC_CA)
      .withAssignmentDate(BaseDate.addDays(0))
      .withPrimaryCoverage(TC_PACOLLISIONCOV)
      .withSegment(TC_AUTO_LOW)
      .withClaimantType(TC_INSURED)
      .withClaimOrder(1)
      .withPublicID("demo_sample:10003")
      .withState(TC_OPEN)
      .withAssignedUser(findUserByUserName("aapplegate"))
      .onClaim(claim)
      .withCoverageSubType(TC_PACOLLISIONCOV)
      .withIncident( new gw.api.databuilder.VehicleIncidentBuilder()
        .withSpeed(40)
        .withSeverity(TC_MODERATE_AUTO)
        .withCollisionPoint(TC_FRONT)
        .withDriverRelation(TC_SELF)
        .withDescription("Damage to bumper and front panels")
        .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1993)
          .withLicensePlate("7FDG745")
          .withPublicId("demo_sample:8")
          .withMake("Mercury")
          .withState(Jurisdiction.TC_CA)
          .withModel("Sable")
          .withVin("6GYF54637HD645370"))
        .withOwnersPermission(true)
        .withContactInRole(contactDemoSample3024, TC_DRIVER))
      .withContactInRole(contactDemoSample3024, TC_CLAIMANT)
      .create(bundle)

    var exposureDemoSample10004 = new gw.api.databuilder.ExposureBuilder()
      .withOtherCoverage(false)
      .withLossParty(TC_THIRD_PARTY)
      .withExposureType(TC_VEHICLEDAMAGE)
      .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
      .withAssignmentStatus(TC_ASSIGNED)
      .withStrategy(TC_AUTO_NORMAL)
      .withProgress(TC_INVESTIGATION)
      .withJurisdictionState(TC_CA)
      .withAssignmentDate(BaseDate.addDays(0))
      .withPrimaryCoverage(TC_PALIABILITYCOV)
      .withSegment(TC_AUTO_MID)
      .withClaimantType(TC_VEH_OTHER_OWNER)
      .withClaimOrder(2)
      .withPublicID("demo_sample:10004")
      .withState(TC_OPEN)
      .withAssignedUser(findUserByUserName("aapplegate"))
      .onClaim(claim)
      .withCoverageSubType(TC_PALIABILITYCOV_VD)
      .withIncident( new gw.api.databuilder.VehicleIncidentBuilder()
        .withSpeed(30)
        .withSeverity(TC_MAJOR_AUTO)
        .withCollisionPoint(TC_FRONT)
        .withDriverRelation(TC_SELF)
        .withDescription("Severely crumpled front end, not driveable")
        .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("2GDH967")
          .withPublicId("demo_sample:12")
          .withMake("BMW")
          .withState(Jurisdiction.TC_CA)
          .withModel("355i")
          .withVin("3DGF78575GD892534"))
        .withOwnersPermission(true)
        .withContactInRole(contactDemoSample9, TC_DRIVER))
      .withContactInRole(contactDemoSample9, TC_CLAIMANT)
      .create(bundle)

    var exposureDemoSample20003 = new gw.api.databuilder.ExposureBuilder()
      .withOtherCoverage(false)
      .withLossParty(TC_THIRD_PARTY)
      .withExposureType(TC_BODILYINJURYDAMAGE)
      .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
      .withAssignmentStatus(TC_ASSIGNED)
      .withStrategy(TC_INJURY_NORMAL)
      .withProgress(TC_INVESTIGATION)
      .withJurisdictionState(TC_CA)
      .withAssignmentDate(BaseDate.addDays(0))
      .withPrimaryCoverage(TC_PALIABILITYCOV)
      .withSegment(TC_INJURY_MID)
      .withClaimantType(TC_VEH_OTHER_OWNER)
      .withClaimOrder(3)
      .withPublicID("demo_sample:20003")
      .withState(TC_OPEN)
      .withAssignedUser(findUserByUserName("aapplegate"))
      .onClaim(claim)
      .withCoverageSubType(TC_PALIABILITYCOV_BI)
      .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
        .withGeneralInjuryType(TC_SPECIFIC)
        .withSeverity(TC_MAJOR_INJURY)
        .withDescription("Bruises and lacerations to face and neck, broken orbital bone, potential vision loss")
        .withMedicalTreatmentType(TC_HOSPITAL)
        .withDetailedInjuryType(TC_58)
        .withLostWages(true)
        .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
          .withPrimaryBodyPart(TC_HEAD)
          .withAppropriateDetailedBodyPart()
          .withOrdering(100))
        .withContactInRole(contactDemoSample9, TC_INJURED))
      .withContactInRole(contactDemoSample9, TC_CLAIMANT)
      .create(bundle)

    var transactionSetDemoSample20006 = new gw.api.databuilder.CheckSetBuilder()
      .withApprovalDate(BaseDate.addDays(-7))
      .withRequestingUser(findUserByUserName("aapplegate"))
      .withApprovalStatus(TC_APPROVED)
      .onClaim(claim)
      .create(bundle)

    var transactionSetDemoSample20007 = new gw.api.databuilder.ReserveSetBuilder()
      .withApprovalDate(BaseDate.addDays(-2))
      .withRequestingUser(findUserByUserName("aapplegate"))
      .withApprovalStatus(TC_APPROVED)
      .onClaim(claim)
      .create(bundle)

    var reserveLineDemoSample14 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample10003)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_BODY)
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample15 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample10004)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_BODY)
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample16 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample20003)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_MEDICAL)
      .withClaim(claim)
      .create(bundle)

    var checkDemoSample10106 = new gw.api.databuilder.CheckBuilder()
      .onClaim(claim)
      .withIssueDate(BaseDate.addDays(-6))
      .withScheduledSendDate(BaseDate.addDays(-6))
      .withBankAccount(TC_DEFAULT)
      .onCheckSet(transactionSetDemoSample20006)
      .withPayTo("William Weeks")
      .withStatus(TC_ISSUED)
      .withPaymentMethod(TC_CHECK)
      .withCheckNumber("11059")
      .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
            .withPayee(contactDemoSample9)
            .withPayeeType(TC_CLAIMANT))
      .withType(TC_PRIMARY)
      .create(bundle)

    var transactionDemoSample10016 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample14)
      .onExposure(exposureDemoSample10003)
      .onTransactionSet(transactionSetDemoSample20007)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_BODY)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .onClaim(claim)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Repairs")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(2500bd.ofDefaultCurrency())
        .withClaimAmount(2500bd.ofDefaultCurrency())
        .withReservingAmount(2500bd.ofDefaultCurrency())
        .withTransactionAmount(2500bd.ofDefaultCurrency())
        .withLineCategory(TC_OTHER)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample10017 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample15)
      .onExposure(exposureDemoSample10004)
      .onTransactionSet(transactionSetDemoSample20007)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_BODY)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .onClaim(claim)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Repairs")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(5000bd.ofDefaultCurrency())
        .withClaimAmount(5000bd.ofDefaultCurrency())
        .withReservingAmount(5000bd.ofDefaultCurrency())
        .withTransactionAmount(5000bd.ofDefaultCurrency())
        .withLineCategory(TC_OTHER)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample10018 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample16)
      .onExposure(exposureDemoSample20003)
      .onTransactionSet(transactionSetDemoSample20007)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_MEDICAL)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .onClaim(claim)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Initial hospitalization costs")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(12000bd.ofDefaultCurrency())
        .withClaimAmount(12000bd.ofDefaultCurrency())
        .withReservingAmount(12000bd.ofDefaultCurrency())
        .withTransactionAmount(12000bd.ofDefaultCurrency())
        .withLineCategory(TC_DOCTOR)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample20014 = new gw.api.databuilder.PaymentBuilder()
      .withReserveLine(reserveLineDemoSample15)
      .onTransactionSet(transactionSetDemoSample20006)
      .withCostCategory(TC_BODY)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .onCheck(checkDemoSample10106)
      .withPaymentType(TC_PARTIAL)
      .onExposure(exposureDemoSample10004)
      .withCostType(TC_CLAIMCOST)
      .onClaim(claim)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Towing and inspection")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(300bd.ofDefaultCurrency())
        .withClaimAmount(300bd.ofDefaultCurrency())
        .withReservingAmount(300bd.ofDefaultCurrency())
        .withTransactionAmount(300bd.ofDefaultCurrency())
        .withLineCategory(TC_OTHER)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample20015 = new gw.api.databuilder.PaymentBuilder()
      .withReserveLine(reserveLineDemoSample16)
      .onTransactionSet(transactionSetDemoSample20006)
      .withCostCategory(TC_MEDICAL)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .onCheck(checkDemoSample10106)
      .withPaymentType(TC_PARTIAL)
      .onExposure(exposureDemoSample20003)
      .withCostType(TC_CLAIMCOST)
      .onClaim(claim)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Initial hospitalization and examination")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(9000bd.ofDefaultCurrency())
        .withClaimAmount(9000bd.ofDefaultCurrency())
        .withReservingAmount(9000bd.ofDefaultCurrency())
        .withTransactionAmount(9000bd.ofDefaultCurrency())
        .withLineCategory(TC_DOCTOR)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)
    
    var doc1 = new gw.api.databuilder.DocumentBuilder()
          .onClaim(claim)
          .withName("AutoRepairEstimate")
          .withType(DocumentType.TC_REPAIRESTIMATE)
          .withStatus(DocumentStatusType.TC_APPROVING)
          .withAuthor("ClaimCenter")
          .withDateModified(BaseDate)
          .create(bundle)
     
    var serviceRequests = claim.ServiceRequests.toList().orderBy(\ s -> s.PublicID)
    
    // transition to instructed/record transition
    serviceRequests[0].Progress = ServiceRequestProgress.TC_REQUESTED
    serviceRequests[0].QuoteStatus = ServiceRequestQuoteStatus.TC_WAITINGFORQUOTE
    // Record the change for the service request history
    ServiceRequestChangeBuilder
        .recordProgressAndQuoteStatusChange(
          :newProgress = ServiceRequestProgress.TC_REQUESTED,
          :newQuoteStatus = ServiceRequestQuoteStatus.TC_WAITINGFORQUOTE)
        .onServiceRequest(serviceRequests[0])
        .withDescription(DisplayKey.get("Web.ServiceRequest.StateTransition.Description.InstructionSubmitted"))
        .withSequence(serviceRequests[0].LatestChange != null ? serviceRequests[0].LatestChange.Sequence + 1 : 1)
        .withTimestamp(BaseDate.addBusinessDays(2))
        .create(bundle)

    // transition to instructed/record transition
    serviceRequests[1].Progress = ServiceRequestProgress.TC_REQUESTED
    // Record the change for the service request history
    ServiceRequestChangeBuilder
        .recordProgressAndQuoteStatusChange(
          :newProgress = ServiceRequestProgress.TC_REQUESTED)
        .onServiceRequest(serviceRequests[1])
        .withDescription(DisplayKey.get("Web.ServiceRequest.StateTransition.Description.InstructionSubmitted"))
        .withSequence(serviceRequests[1].LatestChange != null ? serviceRequests[1].LatestChange.Sequence + 1 : 1)
        .withTimestamp(BaseDate.addBusinessDays(1))
        .create(bundle)
    
    var quoteWithDocuments1 = new gw.api.databuilder.ServiceRequestQuoteBuilder()
              .onServiceRequest(serviceRequests[0])
              .withAmount(1750bd.ofDefaultCurrency())
              .withDescription("Repair quote")    
              .withDocument(doc1)
              .withStatementCreationTime(BaseDate)
              .withExpectedDaysToPerformService(5)
              .withReferenceNumber("abc-123")
              .create(bundle)
    serviceRequests[0].LatestQuote = quoteWithDocuments1
    serviceRequests[0].Progress = ServiceRequestProgress.TC_SPECIALISTWAITING
    serviceRequests[0].QuoteStatus = ServiceRequestQuoteStatus.TC_WAITINGFORAPPROVAL  
    
   // Record the change for adding a quote to the service request
   ServiceRequestChangeBuilder
       .recordProgressAndQuoteStatusChange(
          :newProgress = ServiceRequestProgress.TC_SPECIALISTWAITING,
          :newQuoteStatus = ServiceRequestQuoteStatus.TC_WAITINGFORAPPROVAL)
        .onServiceRequest(serviceRequests[0])
        .withTimestamp(BaseDate.addBusinessDays(3))
        .withDescription(DisplayKey.get("Web.ServiceRequest.StateTransition.Description.AddedQuoteWithReferenceNumber", quoteWithDocuments1.ReferenceNumber, quoteWithDocuments1.Amount))
        .withRelatedStatement(quoteWithDocuments1)
        .withOperation(TC_ADDQUOTE)
        .withSequence(serviceRequests[0].LatestChange != null ? serviceRequests[0].LatestChange.Sequence + 1 : 1)
        .create(bundle)
    
    var serviceRequestActivity11 = new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withActivityPatternByCode("appraisal_independent")
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-7))
        .withEscalated(false)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withStatus(TC_COMPLETE)
        .withCloseDate(BaseDate.addDays(-5))
        .withAutoGenerated(true)
        .withTargetDate(BaseDate.addDays(-5))
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withAssignedUser(findUserByUserName("aapplegate"))
        .withServiceRequest(serviceRequests[1])
        .create(bundle)
        
    var serviceRequestActivity12 = new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withActivityPatternByCode("quote")
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-5))
        .withMandatory(true)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withStatus(TC_COMPLETE)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withAssignedUser(findUserByUserName("aapplegate"))
        .withTargetDate(BaseDate.addDays(1))
        .withEscalationDate(BaseDate.addDays(-2))
        .withCloseDate(BaseDate.addDays(-4))
        .withServiceRequest(serviceRequests[1])
        .create(bundle)    
      
    var serviceRequestActivity13 = new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withActivityPatternByCode("review_quote")
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-4))
        .withEscalated(false)
        .withMandatory(true)
        .withPriority(TC_HIGH)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withStatus(TC_COMPLETE)
        .withTargetDate(BaseDate.addDays(-3))
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withAssignedUser(findUserByUserName("ssmith"))
        .withCloseDate(BaseDate.addDays(-3))        
        .withServiceRequest(serviceRequests[1])
        .create(bundle)
        
    var serviceRequestActivity14 = new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withActivityPatternByCode("vehicle_inspection")
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-3))
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withStatus(TC_OPEN)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withAssignedUser(findUserByUserName("aapplegate"))
        .withTargetDate(BaseDate.addDays(7))
        .withServiceRequest(serviceRequests[1])
        .create(bundle)    
        
    var serviceRequestActivity01 = new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withActivityPatternByCode("appraisal_independent")
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-1))
        .withEscalated(false)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withStatus(TC_COMPLETE)
        .withCloseDate(BaseDate.addDays(1))
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withTargetDate(BaseDate.addDays(1))
        .withAssignedUser(findUserByUserName("aapplegate"))
        .withServiceRequest(serviceRequests[0])
        .create(bundle)
        
    var serviceRequestActivity02 = new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withActivityPatternByCode("quote")
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(1))
        .withMandatory(true)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withStatus(TC_COMPLETE)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withAssignedUser(findUserByUserName("aapplegate"))
        .withTargetDate(BaseDate.addDays(3))
        .withEscalationDate(BaseDate.addDays(4))
        .withCloseDate(BaseDate.addDays(3))
        .withServiceRequest(serviceRequests[0])
        .create(bundle)    
      
    var serviceRequestActivity03 = new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withActivityPatternByCode("review_quote")
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(3))
        .withEscalationDate(BaseDate.addDays(5))
        .withTargetDate(BaseDate.addDays(4))
        .withEscalated(false)
        .withMandatory(true)
        .withPriority(TC_HIGH)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withStatus(TC_OPEN)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withAssignedUser(findUserByUserName("ssmith"))
        .withServiceRequest(serviceRequests[0])
        .create(bundle)
        
    var serviceRequestActivity04 = new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withActivityPatternByCode("vehicle_inspection")
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(4))
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withStatus(TC_OPEN)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withAssignedUser(findUserByUserName("aapplegate"))
        .withTargetDate(BaseDate.addDays(12))
        .withServiceRequest(serviceRequests[0])
        .create(bundle)    
                
   var serviceRequestNote1 = new gw.api.databuilder.NoteBuilder()
        .onClaim(claim)
        .withTopic(TC_GENERAL)
        .withAuthoringDate(BaseDate)
        .withSubject("phone call with vendor")
        .withAuthor(findUserByUserName("aapplegate"))
        .withBody("Frank called and said the mechanic assigned to the vehicle is out sick; will reassign and doesn't expect delays")
        .withServiceRequest(serviceRequests[1])
        .create(bundle)
        
   var serviceRequestNote2 = new gw.api.databuilder.NoteBuilder()
        .onClaim(claim)
        .withTopic(TC_GENERAL)
        .withAuthoringDate(BaseDate.addDays(-1))
        .withSubject("claimant request")
        .withAuthor(findUserByUserName("aapplegate"))
        .withBody("Claimant requested this vendor because of their proximity to his workplace.")
        .withServiceRequest(serviceRequests[1])
        .create(bundle)

    return robertFarleyClaimInfo
  }
}
