package gw.sampledata
uses gw.pl.persistence.core.Bundle
uses gw.api.databuilder.DeductibleBuilder
uses gw.api.util.CurrencyUtil

@Export
class SamplePersonalAutoClaims extends SampleDataBase {

  construct(inCache : SampleDataCache) {
    super(inCache)
  }

  override property get Description() : String {
    return "Personal Auto Claims and associated Contacts, Policies, Exposures, Notes, ClaimContacts, Activities and Financials"
  }
    
  override function testSampleData(bundle : Bundle) {

    var rayNewtonClaimInfo = new SampleRayNewtonClaim(Cache).create(bundle)
    new SampleAllenRobertsonClaim(Cache).create(bundle)
    var robertFarleyClaimInfo = new SampleRobertFarleyClaim(Cache).create(bundle)
    
    {
      var contactDemoSample3025 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Cole")
        .withPublicId("demo_sample:3025")
        .withFirstName("Alecia")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("52 Dove Ct.")
          .withCountry(TC_US)
          .withPostalCode("91006")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Riverside"))
        .withWorkPhone("619-275-2346")
        .create(bundle)

      var contactDemoSample3035 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Jackson")
        .withPublicId("demo_sample:3035")
        .withFirstName("Richard")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("725 Pacific Circle")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Long Beach"))
        .withWorkPhone("619-275-2346")
        .create(bundle)

      var contactDemoSample3034 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Henderson")
        .withPublicId("demo_sample:3034")
        .withFirstName("Bill")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("250 Commerce Way")
          .withCountry(TC_US)
          .withPostalCode("91155")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Los Angeles"))
        .withWorkPhone("213-457-6378")
        .create(bundle)

      var contactDemoSample11 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Henderson")
        .withPublicId("demo_sample:11")
        .withFirstName("Mark")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("85 Circle Rd")
          .withCountry(TC_US)
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("West Lake Village"))
        .withWorkPhone("626-473-9576")
        .create(bundle)

      var contactDemoSample10015 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Egertson")
        .withPublicId("demo_sample:10015")
        .withFirstName("Karen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("908 Angels Landing Rd.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Anaheim"))
        .withWorkPhone("213-457-6378")
        .create(bundle)

      var contactDemoSample504 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Cole")
        .withPublicId("demo_sample:504")
        .withFirstName("Fred")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("85 Circle Rd")
          .withCountry(TC_US)
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("West Lake Village"))
        .withWorkPhone("213-475-9465")
        .create(bundle)

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withIncidentReport(false)
        .withWeather(TC_CL)
        .withAssignmentStatus(TC_ASSIGNED)
        .withLossDate(BaseDate.addDays(-10))
        .withFlaggedReason("Overdue, high-priority activity")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy(TC_AUTO_FAST)
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged(TC_ISFLAGGED)
        .withLossLocation(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1075 Aspen Lane")
          .withCountry(TC_US)
          .withPostalCode("91357")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Diamond View"))
        .withLossCause(TC_VEHCOLLISION)
        .withClaimNumber("235-53-373870")
        .withMainContactType(TC_SELF)
        .withReportedByType(TC_SELF)
        .withLossType(TC_AUTO)
        .withValidationLevel(TC_NEWLOSS)
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-3266))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(BaseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("53-263535")
          .withPublicId("demo_sample:11")
          .withTotalProperties(0)
          .withPolicyType(TC_PERSONALAUTO)
          .withTotalVehicles(2)
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Towing and Labor Costs Coverage")
            .withFormNumber("PP 03 03 "))
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Extended Non-Owned Coverage For Named Individual")
            .withFormNumber("PP 03 06"))
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Coverage For Excess Sound Reproducing Equipment, Audio, Visual & Data Electronic Equipment & Tapes, Records, Discs & Other Media")
            .withFormNumber("PP 03 13"))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("1")
            .withLineNumber(1)
            .withState(State.TC_CA)
            .withMajorPeril(TC_GLASS)
            .withInsuranceLine(TC_GLASS)
            .withInsuranceSubLine(TC_GLASS))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("1")
            .withLineNumber(2)
            .withState(State.TC_CA)
            .withMajorPeril(TC_BODILY_INJURY)
            .withInsuranceLine(TC_PERS_AUTO_LIAB)
            .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("1")
            .withLineNumber(3)
            .withState(State.TC_CA)
            .withMajorPeril(TC_PROP_DAMAGE)
            .withInsuranceLine(TC_PERS_AUTO_LIAB)
            .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("1")
            .withLineNumber(4)
            .withState(State.TC_CA)
            .withMajorPeril(TC_MED_PAY)
            .withInsuranceLine(TC_PERS_AUTO_LIAB)
            .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("1")
            .withLineNumber(5)
            .withState(State.TC_CA)
            .withMajorPeril(TC_UNINSURED_BI)
            .withInsuranceLine(TC_PERS_AUTO_LIAB)
            .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("1")
            .withLineNumber(6)
            .withState(State.TC_CA)
            .withMajorPeril(TC_UNDER_INSURED_BI)
            .withInsuranceLine(TC_PERS_AUTO_LIAB)
            .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("1")
            .withLineNumber(7)
            .withState(State.TC_CA)
            .withMajorPeril(TC_COMPREHENSIVE)
            .withInsuranceLine(TC_PERS_AUTO_PHYS)
            .withInsuranceSubLine(TC_PERS_AUTO_PHYS))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("1")
            .withLineNumber(8)
            .withState(State.TC_CA)
            .withMajorPeril(TC_COLLISION)
            .withInsuranceLine(TC_PERS_AUTO_PHYS)
            .withInsuranceSubLine(TC_PERS_AUTO_PHYS))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("1")
            .withLineNumber(9)
            .withState(State.TC_CA)
            .withMajorPeril(TC_RENTAL)
            .withInsuranceLine(TC_PERS_AUTO_PHYS)
            .withInsuranceSubLine(TC_PERS_AUTO_PHYS))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("1")
            .withLineNumber(10)
            .withState(State.TC_CA)
            .withMajorPeril(TC_PERS_NOFAULT)
            .withInsuranceLine(TC_PERS_AUTO_NOFLT)
            .withInsuranceSubLine(TC_PERS_AUTO_NOFLT))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("2")
            .withLineNumber(11)
            .withState(State.TC_CA)
            .withMajorPeril(TC_GLASS)
            .withInsuranceLine(TC_GLASS)
            .withInsuranceSubLine(TC_GLASS))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("2")
            .withLineNumber(12)
            .withState(State.TC_CA)
            .withMajorPeril(TC_BODILY_INJURY)
            .withInsuranceLine(TC_PERS_AUTO_LIAB)
            .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("2")
            .withLineNumber(13)
            .withState(State.TC_CA)
            .withMajorPeril(TC_PROP_DAMAGE)
            .withInsuranceLine(TC_PERS_AUTO_LIAB)
            .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("2")
            .withLineNumber(14)
            .withState(State.TC_CA)
            .withMajorPeril(TC_MED_PAY)
            .withInsuranceLine(TC_PERS_AUTO_LIAB)
            .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("2")
            .withLineNumber(15)
            .withState(State.TC_CA)
            .withMajorPeril(TC_UNINSURED_BI)
            .withInsuranceLine(TC_PERS_AUTO_LIAB)
            .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("2")
            .withLineNumber(16)
            .withState(State.TC_CA)
            .withMajorPeril(TC_UNDER_INSURED_BI)
            .withInsuranceLine(TC_PERS_AUTO_LIAB)
            .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("2")
            .withLineNumber(17)
            .withState(State.TC_CA)
            .withMajorPeril(TC_COMPREHENSIVE)
            .withInsuranceLine(TC_PERS_AUTO_PHYS)
            .withInsuranceSubLine(TC_PERS_AUTO_PHYS))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("2")
            .withLineNumber(18)
            .withState(State.TC_CA)
            .withMajorPeril(TC_COLLISION)
            .withInsuranceLine(TC_PERS_AUTO_PHYS)
            .withInsuranceSubLine(TC_PERS_AUTO_PHYS))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("2")
            .withLineNumber(19)
            .withState(State.TC_CA)
            .withMajorPeril(TC_RENTAL)
            .withInsuranceLine(TC_PERS_AUTO_PHYS)
            .withInsuranceSubLine(TC_PERS_AUTO_PHYS))
          .withStatCode( new gw.api.databuilder.StatCodeBuilder()
            .withVehicleNumber("2")
            .withLineNumber(20)
            .withState(State.TC_CA)
            .withMajorPeril(TC_PERS_NOFAULT)
            .withInsuranceLine(TC_PERS_AUTO_NOFLT)
            .withInsuranceSubLine(TC_PERS_AUTO_NOFLT))
          .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
            .withRUNumber(1)
            .withVehicle( new gw.api.databuilder.VehicleBuilder()
              .withYear(1998)
              .withLicensePlate("7FDG745")
              .withPublicId("demo_sample:11")
              .withMake("Jaguar")
              .withState(Jurisdiction.TC_CA)
              .withModel("XJ6")
              .withVin("6GYF54637HD641756"))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(15000bd.ofDefaultCurrency())
              .withType(TC_PACOLLISIONCOV)
              .withDeductible(500bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(10000bd.ofDefaultCurrency())
              .withType(TC_PACOMPREHENSIVECOV)
              .withDeductible(500bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(30000bd.ofDefaultCurrency())
              .withType(TC_PALIABILITYCOV)
              .withExposureLimit(15000bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(500bd.ofDefaultCurrency())
              .withType(TC_PAMEDPAYCOV)))
          .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
            .withRUNumber(2)
            .withVehicle( new gw.api.databuilder.VehicleBuilder()
              .withYear(1991)
              .withLicensePlate("2GDH967")
              .withPublicId("demo_sample:15")
              .withMake("Ford")
              .withState(Jurisdiction.TC_CA)
              .withModel("Wagon")
              .withVin("3DGF78575GDG89243"))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(10000bd.ofDefaultCurrency())
              .withType(TC_PACOLLISIONCOV)
              .withDeductible(500bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(5000bd.ofDefaultCurrency())
              .withType(TC_PACOMPREHENSIVECOV)
              .withDeductible(500bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(150000bd.ofDefaultCurrency())
              .withType(TC_PALIABILITYCOV)
              .withExposureLimit(75000bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(500bd.ofDefaultCurrency())
              .withType(TC_PAMEDPAYCOV)))
          .withContactInRole(contactDemoSample11, TC_INSURED)
          .withContactInRole(contactDemoSample10015, TC_AGENT)
          .withCoveredParty(contactDemoSample3034, 1, null)
          .withContactInRole(contactDemoSample504, TC_EXCLUDEDPARTY))
        .withFault(80)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withJurisdictionState(TC_CA)
        .withSegment(TC_AUTO_MID)
        .withReportedDate(BaseDate.addDays(-10))
        .withCoverageInQuestion(false)
        .withLOBCode(TC_PERSONALAUTOLINE)
        .withPublicId("demo_sample:8001")
        .withDescription("Insured hit other party's car on the front passenger side while making a left turn.")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("bbaker"))
        .withContactInRole(contactDemoSample3025, TC_CHECKPAYEE)
        .withContactInRole(contactDemoSample3025, TC_MAINCONTACT)
        .withContactInRole(contactDemoSample3025, TC_REPORTER)
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_GENERAL)
          .withAuthoringDate(BaseDate.addDays(-9))
          .withSubject("Initial phone call with insured")
          .withAuthor(findUserByUserName("cclark"))
          .withBody("Insured hit other party's car on the front passenger side while making a left turn.  Claimant was crossing the intersection in front of the insured (from left to right) when the collision occurred.  Insured says that he had a left turn arrow, but apparently the claimant also thought he had a green light."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_GENERAL)
          .withAuthoringDate(BaseDate.addDays(-7))
          .withSubject("Phone call with insured driver")
          .withAuthor(findUserByUserName("bbaker"))
          .withBody("Spoke to insured driver.  He reported that the other party's car had suffered some damage and that although the other driver had not had any apparent injuries, he complained of non-specific pain and was taken from the scene of the accident by ambulance."))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-9))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
          .withType(TC_GENERAL)
          .withDocumentTemplate("ReservationRights.doc")
          .withEscalationDate(BaseDate.addDays(14))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("res_of_rights_letter"))
          .withSubject("Send reservation of rights letter")
          .withAssignedUser(findUserByUserName("bbaker"))
          .withTargetDate(BaseDate.addDays(11)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-9))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-2))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("general_reminder"))
          .withSubject("Determine fault rating")
          .withAssignedUser(findUserByUserName("bbaker"))
          .withTargetDate(BaseDate.addDays(-7)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-9))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-8))
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-3))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_insured"))
          .withSubject("Contact insured")
          .withAssignedUser(findUserByUserName("bbaker"))
          .withTargetDate(BaseDate.addDays(-8)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-9))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(false)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(5))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("witness_statement"))
          .withSubject("Call witness")
          .withAssignedUser(findUserByUserName("bbaker"))
          .withTargetDate(BaseDate.addDays(-5)))
        .create(bundle)

      var claimInfoDemoSample8001 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:8001")
        .withClaimNumber("235-53-373870")
        .onClaim(claim)
        .create(bundle)

      var policyPeriodDemoSample70011 = new gw.api.databuilder.PolicyPeriodBuilder()
        .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claimInfoDemoSample8001))
        .withPolicyPeriodType(TC_POLICY)
        .withExpirationDate(BaseDate.addDays(274))
        .withPolicyNumber("53-263535")
        .withPublicId("demo_sample:70011")
        .withPolicyType(TC_PERSONALAUTO)
        .withEffectiveDate(BaseDate.addDays(-90))
        .create(bundle)

      var vehicleDemoSample1_copy = new gw.api.databuilder.VehicleBuilder()
        .withYear(1997)
        .withLicensePlate("1HGJ465")
        .withMake("Saturn")
        .withState(Jurisdiction.TC_CA)
        .withModel("SL")
        .withVin("1GV234TV347463345")
        .create(bundle)

      var exposureDemoSample80001 = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(false)
        .withLossParty(TC_INSURED)
        .withExposureType(TC_VEHICLEDAMAGE)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_AUTO_FAST)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_CA)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_PACOLLISIONCOV)
        .withSegment(TC_AUTO_LOW)
        .withClaimantType(TC_INSURED)
        .withClaimOrder(1)
        .withPublicId("demo_sample:80001")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("bbaker"))
        .onClaim(claim)
        .withCoverageSubType(TC_PACOLLISIONCOV)
        .withIncident( new gw.api.databuilder.VehicleIncidentBuilder()
          .withSpeed(20)
          .withSeverity(TC_MINOR)
          .withCollisionPoint(TC_FRONT)
          .withDriverRelation(TC_SELF)
          .withDescription("Damage to front left fender, body, and frame.  Cracked driver-side mirror.")
          .withVehicle(vehicleDemoSample1_copy)
          .withOwnersPermission(true)
          .withVehicleDirection(TC_FORWARD)
          .withContactInRole(contactDemoSample3025, TC_DRIVER))
        .withContactInRole(contactDemoSample3025, TC_CLAIMANT)
        
        .create(bundle)

      var exposureDemoSample80002 = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(true)
        .withLossParty(TC_THIRD_PARTY)
        .withExposureType(TC_VEHICLEDAMAGE)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_AUTO_NORMAL)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_CA)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_PALIABILITYCOV)
        .withSegment(TC_AUTO_MID)
        .withClaimantType(TC_VEH_OTHER_OWNER)
        .withClaimOrder(2)
        .withPublicId("demo_sample:80002")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("bbaker"))
        .onClaim(claim)
        .withCoverageSubType(TC_PALIABILITYCOV_VD)
        .withIncident( new gw.api.databuilder.VehicleIncidentBuilder()
          .withSpeed(30)
          .withSeverity(TC_MAJOR_AUTO)
          .withCollisionPoint(TC_RIGHTSIDE)
          .withDriverRelation(TC_SELF)
          .withDescription("Damage to right side doors and front quarter panel.")
          .withVehicle(new gw.api.databuilder.VehicleBuilder()
            .withYear(1990)
            .withLicensePlate("7FDG745")
            .withMake("Mazda")
            .withState(Jurisdiction.TC_CA)
            .withModel("626")
            .withVin("6GYF54637HD647402"))
          .withOwnersPermission(true)
          .withVehicleDirection(TC_FORWARD)
          .withContactInRole(contactDemoSample3035, TC_DRIVER))
        .withContactInRole(contactDemoSample3035, TC_CLAIMANT)
        .create(bundle)

      var exposureDemoSample20010 = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(false)
        .withLossParty(TC_INSURED)
        .withExposureType(TC_MEDPAY)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_INJURY_FAST)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_CA)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_PAMEDPAYCOV)
        .withSegment(TC_INJURY_LOW)
        .withClaimantType(TC_HOUSEHOLDMEMBER)
        .withClaimOrder(3)
        .withPublicId("demo_sample:20010")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("bbaker"))
        .onClaim(claim)
        .withCoverageSubType(TC_PAMEDPAYCOV)
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
          .withGeneralInjuryType(TC_SPECIFIC)
          .withSeverity(TC_MINOR)
          .withDescription("Broken left arm, stitches in left temple from impact with car.")
          .withMedicalTreatmentType(TC_ONE_DOCTOR)
          .withDetailedInjuryType(TC_28)
          .withLostWages(false)
          .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
            .withPrimaryBodyPart(TC_UPPER)
            .withOrdering(100))
          .withContactInRole(contactDemoSample3034, TC_INJURED))
        .withContactInRole(contactDemoSample3025, TC_ALTCONTACT)
        .withContactInRole(contactDemoSample3034, TC_CLAIMANT)
        .create(bundle)

      var exposureDemoSample20011 = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(true)
        .withLossParty(TC_THIRD_PARTY)
        .withOtherCoverageInfo("employer health plan with Kaiser")
        .withExposureType(TC_BODILYINJURYDAMAGE)
        .withAssignedGroup(findGroupByName("BI Review Team"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_INJURY_NORMAL)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_CA)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_PALIABILITYCOV)
        .withSegment(TC_INJURY_MID)
        .withClaimantType(TC_VEH_OTHER_OWNER)
        .withClaimOrder(4)
        .withPublicId("demo_sample:20011")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("clevitt"))
        .onClaim(claim)
        .withCoverageSubType(TC_PALIABILITYCOV_BI)
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
          .withGeneralInjuryType(TC_SPECIFIC)
          .withSeverity(TC_MODERATE_GEN)
          .withDescription("Multiple broken ribs, punctured lung, lacerations of the face and left arm")
          .withMedicalTreatmentType(TC_HOSPITAL)
          .withDetailedInjuryType(TC_28)
          .withLostWages(true)
          .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
            .withPrimaryBodyPart(TC_TRUNK)
            .withOrdering(100))
          .withContactInRole(contactDemoSample3035, TC_INJURED))
        .withContactInRole(contactDemoSample3035, TC_CLAIMANT)
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_GENERAL)
          .withAuthoringDate(BaseDate.addDays(-5))
          .withSubject("Initial phone call with claimant")
          .onClaim(claim)
          .withAuthor(findUserByUserName("bbaker"))
          .withBody("Spoke with the claimant.  He was not admitted to the hospital, but was treated in the emergency room for bruised or broken ribs.  I asked him to send medical reports and any bills to me while telling him that we are not accepting liability yet until we can gather more facts about the claim.  He also said that he recalled the person driving the car was named Bill, not Mark."))
        .create(bundle)

      var exposureDemoSample20020 = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(false)
        .withLossParty(TC_INSURED)
        .withExposureType(TC_GENERALDAMAGE)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_INJURY_FAST)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_CA)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_PAMEDPAYCOV)
        .withSegment(TC_INJURY_LOW)
        .withClaimantType(TC_HOUSEHOLDMEMBER)
        .withClaimOrder(5)
        .withPublicId("demo_sample:20020")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("bbaker"))
        .onClaim(claim)
        .withIncident( new gw.api.databuilder.IncidentBuilder()
          .withSeverity(TC_MINOR)
          .withDescription("General damage"))
        .withContactInRole(contactDemoSample3034, TC_CLAIMANT)
        .create(bundle)

      var exposureDemoSample20021 = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(true)
        .withLossParty(TC_THIRD_PARTY)
        .withExposureType(TC_GENERALDAMAGE)
        .withAssignedGroup(findGroupByName("BI Review Team"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_INJURY_NORMAL)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_CA)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_PALIABILITYCOV)
        .withSegment(TC_INJURY_MID)
        .withClaimantType(TC_VEH_OTHER_OWNER)
        .withClaimOrder(6)
        .withPublicId("demo_sample:20021")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("clevitt"))
        .onClaim(claim)
        .withIncident( new gw.api.databuilder.IncidentBuilder()
          .withSeverity(TC_MODERATE_GEN)
          .withDescription("General damage"))
        .withContactInRole(contactDemoSample3035, TC_CLAIMANT)
        .create(bundle)

      new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-9))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withMandatory(false)
        .withPriority(TC_NORMAL)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(findGroupByName("BI Review Team"))
        .withType(TC_GENERAL)
        .withEscalationDate(BaseDate.addDays(7))
        .withStatus(TC_OPEN)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("medical_report_claimant"))
        .withSubject("Review medical reports for claimant injuries")
        .withAssignedUser(findUserByUserName("clevitt"))
        .withTargetDate(BaseDate.addDays(4))
        .withExposure(exposureDemoSample20011)
        .create(bundle)

      new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-9))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withMandatory(false)
        .withPriority(TC_NORMAL)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(findGroupByName("BI Review Team"))
        .withType(TC_GENERAL)
        .withEscalationDate(BaseDate.addDays(19))
        .withStatus(TC_OPEN)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("general_reminder"))
        .withSubject("Use injury evaluation system")
        .withAssignedUser(findUserByUserName("clevitt"))
        .withTargetDate(BaseDate.addDays(5))
        .withExposure(exposureDemoSample20011)
        .create(bundle)

      new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-9))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withMandatory(true)
        .withPriority(TC_HIGH)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType(TC_GENERAL)
        .withEscalationDate(BaseDate.addDays(-2))
        .withStatus(TC_OPEN)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("general_reminder"))
        .withSubject("Determine fault rating")
        .withAssignedUser(findUserByUserName("bbaker"))
        .withTargetDate(BaseDate.addDays(-7))
        .withClaimContact(claim.getClaimContact(contactDemoSample3025))
        .create(bundle)

      new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-9))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withCloseDate(BaseDate.addDays(-8))
        .withMandatory(true)
        .withPriority(TC_HIGH)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType(TC_GENERAL)
        .withEscalationDate(BaseDate.addDays(-3))
        .withStatus(TC_COMPLETE)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("contact_claimant"))
        .withSubject("Make initial claimant contact")
        .withAssignedUser(findUserByUserName("bbaker"))
        .withTargetDate(BaseDate.addDays(-8))
        .withClaimContact(claim.getClaimContact(contactDemoSample3034))
        .create(bundle)

      new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-9))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withMandatory(false)
        .withPriority(TC_NORMAL)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType(TC_GENERAL)
        .withEscalationDate(BaseDate.addDays(15))
        .withStatus(TC_OPEN)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("police_report"))
        .withSubject("Get police report")
        .withAssignedUser(findUserByUserName("bbaker"))
        .withTargetDate(BaseDate.addDays(5))
        .withClaimContact(claim.getClaimContact(contactDemoSample3035))
        .create(bundle)

      new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-9))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withMandatory(false)
        .withPriority(TC_NORMAL)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType(TC_GENERAL)
        .withEscalationDate(BaseDate.addDays(18))
        .withStatus(TC_OPEN)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withDescription("Saturn SL")
        .withActivityPattern(findActivityPatternByCode("vehicle_inspection"))
        .withSubject("Get vehicle inspected")
        .withAssignedUser(findUserByUserName("bbaker"))
        .withTargetDate(BaseDate.addDays(4))
        .withExposure(exposureDemoSample80001)
        .create(bundle)

      new gw.api.databuilder.ActivityBuilder()
        .onClaim(claim)
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-9))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withMandatory(false)
        .withPriority(TC_NORMAL)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withType(TC_GENERAL)
        .withEscalationDate(BaseDate.addDays(18))
        .withStatus(TC_OPEN)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withDescription("Mazda 626")
        .withActivityPattern(findActivityPatternByCode("vehicle_inspection"))
        .withSubject("Get vehicle inspected")
        .withAssignedUser(findUserByUserName("bbaker"))
        .withTargetDate(BaseDate.addDays(4))
        .withExposure(exposureDemoSample80002)
        .create(bundle)

      var transactionSetDemoSample20021 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-6))
        .withRequestingUser(findUserByUserName("bbaker"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20031 = new gw.api.databuilder.ReserveSetBuilder()
        .withApprovalDate(BaseDate.addDays(-9))
        .withRequestingUser(findUserByUserName("bbaker"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var reserveLineDemoSample19 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample80001)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_BODY)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample20 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample80002)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_BODY)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample21 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample20010)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_MEDICAL)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample22 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample20011)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_MEDICAL)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample23 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample80001)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_OTHER)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample24 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample80002)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_INSPECTION)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample25 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample20010)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_OTHER)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample26 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample20011)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_OTHER)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample34 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample80001)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_INSPECTION)
        .withClaim(claim)
        .create(bundle)

      var checkDemoSample10107 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-6))
        .withScheduledSendDate(BaseDate.addDays(-6))
        .withBankAccount(TC_DEFAULT)
        .onCheckSet(transactionSetDemoSample20021)
        .withPayTo("Mark Henderson")
        .withStatus(TC_ISSUED)
        .withPaymentMethod(TC_CHECK)
        .withCheckNumber("12121")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample3025)
              .withPayeeType(TC_CLAIMANT))
        .withType(TC_PRIMARY)
        .create(bundle)

      var transactionDemoSample12020 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample19)
        .onExposure(exposureDemoSample80001)
        .onTransactionSet(transactionSetDemoSample20031)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_BODY)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Repairs")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12021 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample20)
        .onExposure(exposureDemoSample80002)
        .onTransactionSet(transactionSetDemoSample20031)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_BODY)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Repairs")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(4000bd.ofDefaultCurrency())
          .withClaimAmount(4000bd.ofDefaultCurrency())
          .withReservingAmount(4000bd.ofDefaultCurrency())
          .withTransactionAmount(4000bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12022 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample21)
        .onExposure(exposureDemoSample20010)
        .onTransactionSet(transactionSetDemoSample20031)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Doctor's visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_DOCTOR)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12023 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample21)
        .onExposure(exposureDemoSample20010)
        .onTransactionSet(transactionSetDemoSample20031)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Physical Therapy")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(2500bd.ofDefaultCurrency())
          .withClaimAmount(2500bd.ofDefaultCurrency())
          .withReservingAmount(2500bd.ofDefaultCurrency())
          .withTransactionAmount(2500bd.ofDefaultCurrency())
          .withLineCategory(TC_PT)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12024 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample22)
        .onExposure(exposureDemoSample20011)
        .onTransactionSet(transactionSetDemoSample20031)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Emergency room visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(6500bd.ofDefaultCurrency())
          .withClaimAmount(6500bd.ofDefaultCurrency())
          .withReservingAmount(6500bd.ofDefaultCurrency())
          .withTransactionAmount(6500bd.ofDefaultCurrency())
          .withLineCategory(TC_DOCTOR)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Therapy")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(1500bd.ofDefaultCurrency())
          .withClaimAmount(1500bd.ofDefaultCurrency())
          .withReservingAmount(1500bd.ofDefaultCurrency())
          .withTransactionAmount(1500bd.ofDefaultCurrency())
          .withLineCategory(TC_PT)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12025 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample23)
        .onExposure(exposureDemoSample80001)
        .onTransactionSet(transactionSetDemoSample20031)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_OTHER)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Collision specialist fee")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(400bd.ofDefaultCurrency())
          .withClaimAmount(400bd.ofDefaultCurrency())
          .withReservingAmount(400bd.ofDefaultCurrency())
          .withTransactionAmount(400bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12026 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample24)
        .onExposure(exposureDemoSample80002)
        .onTransactionSet(transactionSetDemoSample20031)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_INSPECTION)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Vehicle inspection fee")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(1000bd.ofDefaultCurrency())
          .withClaimAmount(1000bd.ofDefaultCurrency())
          .withReservingAmount(1000bd.ofDefaultCurrency())
          .withTransactionAmount(1000bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12027 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample25)
        .onExposure(exposureDemoSample20010)
        .onTransactionSet(transactionSetDemoSample20031)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_OTHER)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Injury report fee")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12028 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample26)
        .onExposure(exposureDemoSample20011)
        .onTransactionSet(transactionSetDemoSample20031)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_OTHER)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("BI specialist fee")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(1000bd.ofDefaultCurrency())
          .withClaimAmount(1000bd.ofDefaultCurrency())
          .withReservingAmount(1000bd.ofDefaultCurrency())
          .withTransactionAmount(1000bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20021 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample19)
        .onTransactionSet(transactionSetDemoSample20021)
        .withCostCategory(TC_BODY)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10107)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample80001)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Repairs")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(100bd.ofDefaultCurrency())
          .withClaimAmount(100bd.ofDefaultCurrency())
          .withReservingAmount(100bd.ofDefaultCurrency())
          .withTransactionAmount(100bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20022 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample21)
        .onTransactionSet(transactionSetDemoSample20021)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10107)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample20010)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Doctor's visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_DOCTOR)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20023 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample21)
        .onTransactionSet(transactionSetDemoSample20021)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10107)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample20010)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Physical Therapy")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_PT)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20024 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample34)
        .onTransactionSet(transactionSetDemoSample20021)
        .withCostCategory(TC_INSPECTION)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10107)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample80001)
        .withCostType(TC_AOEXPENSE)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Vehicle inspection")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(400bd.ofDefaultCurrency())
          .withClaimAmount(400bd.ofDefaultCurrency())
          .withReservingAmount(400bd.ofDefaultCurrency())
          .withTransactionAmount(400bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20025 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample25)
        .onTransactionSet(transactionSetDemoSample20021)
        .withCostCategory(TC_OTHER)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10107)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample20010)
        .withCostType(TC_AOEXPENSE)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("BI specialist")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)
    }

    {
      var contactDemoSample3026 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Turner")
        .withPublicId("demo_sample:3026")
        .withFirstName("Brittany")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("2563 West Ave.")
          .withCountry(TC_US)
          .withPostalCode("91357")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Orange"))
        .withWorkPhone("213-457-6378")
        .create(bundle)

      var contactDemoSample3037 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Hammet")
        .withPublicId("demo_sample:3037")
        .withFirstName("Kathy")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("253 McAfee Ct.")
          .withCountry(TC_US)
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Thousand Oaks"))
        .withWorkPhone("213-475-9465")
        .create(bundle)

      var contactDemoSample10017 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Egertson")
        .withPublicId("demo_sample:10017")
        .withFirstName("Karen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("908 Angels Landing Rd.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Anaheim"))
        .withWorkPhone("213-457-6378")
        .create(bundle)

      var contactDemoSample506 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Shiu")
        .withPublicId("demo_sample:506")
        .withFirstName("Scott")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("503 2nd Ave.")
          .withCountry(TC_US)
          .withPostalCode("92101")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("San Diego"))
        .withWorkPhone("619-275-2346")
        .create(bundle)

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withIncidentReport(false)
        .withWeather(TC_CL)
        .withAssignmentStatus(TC_ASSIGNED)
        .withLossDate(BaseDate.addDays(-11))
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy(TC_AUTO_NORMAL)
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged(TC_NEVERFLAGGED)
        .withLossLocation(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("7361 Walnut Rd.")
          .withCountry(TC_US)
          .withPostalCode("91006")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("El Segundo")
          .create(bundle))
        .withLossCause(TC_VEHCOLLISION)
        .withClaimNumber("235-53-373871")
        .withMainContactType(TC_SELF)
        .withReportedByType(TC_OTHER)
        .withLossType(TC_AUTO)
        .withValidationLevel(TC_NEWLOSS)
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-3266))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(BaseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("56-475868")
          .withPublicId("demo_sample:13")
          .withTotalProperties(0)
          .withPolicyType(TC_PERSONALAUTO)
          .withTotalVehicles(1)
          .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
            .withRUNumber(1)
            .withVehicle( new gw.api.databuilder.VehicleBuilder()
              .withYear(2002)
              .withLicensePlate("2GDH967")
              .withPublicId("demo_sample:27")
              .withMake("Pontiac")
              .withState(Jurisdiction.TC_CA)
              .withModel("Grand Prix")
              .withVin("3DGF78575GD891525")))
          .withContactInRole(contactDemoSample3026, TC_INSURED)
          .withContactInRole(contactDemoSample10017, TC_AGENT)
          .withCoveredParty(contactDemoSample506, 1, null))
        .withFault(80)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withJurisdictionState(TC_CA)
        .withSegment(TC_AUTO_MID)
        .withReportedDate(BaseDate.addDays(-11))
        .withCoverageInQuestion(false)
        .withLOBCode(TC_PERSONALAUTOLINE)
        .withPublicId("demo_sample:8002")
        .withDescription("Insured swerved to avoid an animal, struck claimant's car head-on")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("bbaker"))
        .withContactInRole(contactDemoSample3026, TC_MAINCONTACT)
        .withContactInRole(contactDemoSample3026, TC_REPORTER)
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_GENERAL)
          .withAuthoringDate(BaseDate.addDays(-9))
          .withSubject("Initial phone call with insured")
          .withAuthor(findUserByUserName("cclark"))
          .withBody("Insured claims she swerved to avoid a dog in the road, then hit an oncoming car in the other lane."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_GENERAL)
          .withAuthoringDate(BaseDate.addDays(-6))
          .withSubject("Initial phone call with claimant")
          .withAuthor(findUserByUserName("bbaker"))
          .withBody("Spoke to claimant - she was hospitalized due to a fracture in a bone behind her eye and is under observation, and may need to undergo surgery.  Because claimant does not have other insurance, authorized a check to cover vehicle towing and initial hospital stay."))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-11))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(true)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-6))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_insured"))
          .withSubject("Call insured")
          .withAssignedUser(findUserByUserName("bbaker"))
          .withTargetDate(BaseDate.addDays(-10)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-11))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(false)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-3))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("coverage"))
          .withSubject("Check coverage")
          .withAssignedUser(findUserByUserName("bbaker"))
          .withTargetDate(BaseDate.addDays(-8)))
        .create(bundle)

      var claimInfoDemoSample8002 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:8002")
        .withClaimNumber("235-53-373871")
        .onClaim(claim)
        .create(bundle)

      var policyPeriodDemoSample70013 = new gw.api.databuilder.PolicyPeriodBuilder()
        .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claimInfoDemoSample8002))
        .withPolicyPeriodType(TC_POLICY)
        .withExpirationDate(BaseDate.addDays(274))
        .withPolicyNumber("56-475868")
        .withPublicId("demo_sample:70013")
        .withPolicyType(TC_PERSONALAUTO)
        .withEffectiveDate(BaseDate.addDays(-90))
        .create(bundle)

      var exposureDemoSample80003 = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(false)
        .withLossParty(TC_INSURED)
        .withExposureType(TC_VEHICLEDAMAGE)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_AUTO_FAST)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_CA)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_PACOLLISIONCOV)
        .withSegment(TC_AUTO_LOW)
        .withClaimantType(TC_INSURED)
        .withClaimOrder(1)
        .withPublicId("demo_sample:80003")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("bbaker"))
        .onClaim(claim)
        .withCoverageSubType(TC_PACOLLISIONCOV)
        .withIncident( new gw.api.databuilder.VehicleIncidentBuilder()
          .withSpeed(40)
          .withSeverity(TC_MODERATE_AUTO)
          .withCollisionPoint(TC_FRONT)
          .withDriverRelation(TC_SELF)
          .withDescription("Damage to bumper and front panels")
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
            .withYear(1993)
            .withLicensePlate("7FDG745")
            .withMake("Mercury")
            .withState(Jurisdiction.TC_CA)
            .withModel("Sable")
            .withVin("6GYF54637HD645370"))
          .withOwnersPermission(true)
          .withContactInRole(contactDemoSample3026, TC_DRIVER))
        .withContactInRole(contactDemoSample3026, TC_CLAIMANT)
        .create(bundle)

      var exposureDemoSample80004 = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(false)
        .withLossParty(TC_THIRD_PARTY)
        .withExposureType(TC_VEHICLEDAMAGE)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_AUTO_NORMAL)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_CA)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_PALIABILITYCOV)
        .withSegment(TC_AUTO_MID)
        .withClaimantType(TC_VEH_OTHER_OWNER)
        .withClaimOrder(2)
        .withPublicId("demo_sample:80004")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("bbaker"))
        .onClaim(claim)
        .withCoverageSubType(TC_PALIABILITYCOV_VD)
        .withIncident( new gw.api.databuilder.VehicleIncidentBuilder()
          .withSpeed(30)
          .withSeverity(TC_MAJOR_AUTO)
          .withCollisionPoint(TC_FRONT)
          .withDriverRelation(TC_SELF)
          .withDescription("Severely crumpled front end, not driveable")
          .withVehicle(new gw.api.databuilder.VehicleBuilder()
            .withYear(2003)
            .withLicensePlate("2GDH967")
            .withMake("BMW")
            .withState(Jurisdiction.TC_CA)
            .withModel("355i")
            .withVin("3DGF78575GD892534"))
          .withOwnersPermission(true)
          .withContactInRole(contactDemoSample3037, TC_DRIVER))
        .withContactInRole(contactDemoSample3037, TC_CLAIMANT)
        .create(bundle)

      var exposureDemoSample20012 = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(false)
        .withLossParty(TC_THIRD_PARTY)
        .withExposureType(TC_BODILYINJURYDAMAGE)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_INJURY_NORMAL)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_CA)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_PALIABILITYCOV)
        .withSegment(TC_INJURY_MID)
        .withClaimantType(TC_VEH_OTHER_OWNER)
        .withClaimOrder(3)
        .withPublicId("demo_sample:20012")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("bbaker"))
        .onClaim(claim)
        .withCoverageSubType(TC_PALIABILITYCOV_BI)
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
          .withGeneralInjuryType(TC_SPECIFIC)
          .withSeverity(TC_MAJOR_INJURY)
          .withDescription("Bruises and lacerations to face and neck, broken orbital bone, potential vision loss")
          .withMedicalTreatmentType(TC_HOSPITAL)
          .withDetailedInjuryType(TC_58)
          .withLostWages(true)
          .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
            .withPrimaryBodyPart(TC_HEAD)
            .withOrdering(100))
          .withContactInRole(contactDemoSample3037, TC_INJURED))
        .withContactInRole(contactDemoSample3037, TC_CLAIMANT)
        .create(bundle)
    }


    {
      var contactDemoSample3027 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Shiu")
        .withPublicId("demo_sample:3027")
        .withFirstName("Lisa")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("52 Dove Ct.")
          .withCountry(TC_US)
          .withPostalCode("91006")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Riverside"))
        .withWorkPhone("213-475-9465")
        .create(bundle)

      var contactDemoSample10018 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Egertson")
        .withPublicId("demo_sample:10018")
        .withFirstName("Karen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("908 Angels Landing Rd.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Anaheim"))
        .withWorkPhone("213-457-6378")
        .create(bundle)

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withLossDate(BaseDate.addDays(-32))
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged(TC_NEVERFLAGGED)
        .withLossLocation(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("12534 Ocean View Blvd. #2F")
          .withCountry(TC_US)
          .withPostalCode("91112")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Santa Monica"))
        .withClaimNumber("235-53-373872")
        .withMainContactType(TC_SELF)
        .withReportedByType(TC_SELF)
        .withLossType(TC_AUTO)
        .withValidationLevel(TC_NEWLOSS)
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-3266))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(BaseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("54-586897")
          .withPublicId("demo_sample:14")
          .withTotalProperties(0)
          .withPolicyType(TC_PERSONALAUTO)
          .withTotalVehicles(0)
          .withContactInRole(contactDemoSample3027, TC_INSURED)
          .withContactInRole(contactDemoSample10018, TC_AGENT))
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withJurisdictionState(TC_CA)
        .withReportedDate(BaseDate.addDays(-32))
        .withCoverageInQuestion(false)
        .withLOBCode(TC_PERSONALAUTOLINE)
        .withPublicId("demo_sample:8003")
        .withDescription("Swerved to avoid car and struck tree")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("bbaker"))
        .withContactInRole(contactDemoSample3027, TC_MAINCONTACT)
        .withContactInRole(contactDemoSample3027, TC_REPORTER)
        .create(bundle)

      var claimInfoDemoSample8003 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:8003")
        .withClaimNumber("235-53-373872")
        .onClaim(claim)
        .create(bundle)

      var policyPeriodDemoSample70014 = new gw.api.databuilder.PolicyPeriodBuilder()
        .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claimInfoDemoSample8003))
        .withPolicyPeriodType(TC_POLICY)
        .withExpirationDate(BaseDate.addDays(274))
        .withPolicyNumber("54-586897")
        .withPublicId("demo_sample:70014")
        .withPolicyType(TC_PERSONALAUTO)
        .withEffectiveDate(BaseDate.addDays(-90))
        .create(bundle)

      var exposureDemoSample80005 = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(false)
        .withLossParty(TC_INSURED)
        .withExposureType(TC_VEHICLEDAMAGE)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_AUTO_FAST)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_CA)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_PACOLLISIONCOV)
        .withSegment(TC_AUTO_LOW)
        .withClaimantType(TC_INSURED)
        .withClaimOrder(1)
        .withPublicId("demo_sample:80005")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("bbaker"))
        .onClaim(claim)
        .withCoverageSubType(TC_PACOLLISIONCOV)
        .withIncident( new gw.api.databuilder.VehicleIncidentBuilder()
          .withSeverity(TC_MINOR)
          .withDriverRelation(TC_SELF)
          .withDescription("Minor damage")
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
            .withYear(2000)
            .withLicensePlate("7FDG745")
            .withPublicId("demo_sample:14")
            .withMake("Fiat")
            .withState(Jurisdiction.TC_CA)
            .withModel("Cinquecento")
            .withVin("6GYF54637HD649448"))
          .withContactInRole(contactDemoSample3027, TC_DRIVER))
        .withContactInRole(contactDemoSample3027, TC_CLAIMANT)
        .create(bundle)
    }


    {
      var vehicleDemoSample5 = new gw.api.databuilder.VehicleBuilder()
        .withYear(2000)
        .withLicensePlate("7FDG745")
        .withPublicId("demo_sample:5")
        .withMake("Ford")
        .withState(Jurisdiction.TC_CA)
        .withModel("Explorer")
        .withVin("6GYF54637HD643579")
        .create(bundle)

      var contactDemoSample3028 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Gamney")
        .withPublicId("demo_sample:3028")
        .withFirstName("Larry")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("23465 97 St. #3D")
          .withCountry(TC_US)
          .withPostalCode("91357")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Carson"))
        .withWorkPhone("626-473-9576")
        .create(bundle)

      var contactDemoSample10010 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Egertson")
        .withPublicId("demo_sample:10010")
        .withFirstName("Karen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("908 Angels Landing Rd.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Anaheim"))
        .withWorkPhone("213-457-6378")
        .create(bundle)

      var contactDemoSample11445 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Robertson")
        .withPublicId("demo_sample:11445")
        .withFirstName("Allen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("4263 Live Oak Blvd.")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("San Gabriel"))
        .withWorkPhone("213-475-9465")
        .create(bundle)

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withLossDate(BaseDate.addDays(-6))
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged(TC_NEVERFLAGGED)
        .withLossLocation(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("867 Mann Ave.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Alhambra"))
        .withClaimNumber("235-53-373906")
        .withMainContactType(TC_SELF)
        .withReportedByType(TC_SELF)
        .withLossType(TC_AUTO)
        .withValidationLevel(TC_NEWLOSS)
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-3266))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(BaseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("54-847564")
          .withPublicId("demo_sample:7")
          .withTotalProperties(0)
          .withPolicyType(TC_PERSONALAUTO)
          .withTotalVehicles(2)
          .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
            .withRUNumber(1)
            .withVehicle( new gw.api.databuilder.VehicleBuilder()
              .withYear(2001)
              .withLicensePlate("1HGJ465")
              .withPublicId("demo_sample:4")
              .withMake("Honda")
              .withState(Jurisdiction.TC_CA)
              .withModel("Civic")
              .withVin("1GV234TV347463364"))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(10000bd.ofDefaultCurrency())
              .withType(TC_PACOLLISIONCOV)
              .withDeductible(500bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(5000bd.ofDefaultCurrency())
              .withType(TC_PACOMPREHENSIVECOV)
              .withDeductible(500bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(150000bd.ofDefaultCurrency())
              .withType(TC_PALIABILITYCOV)
              .withExposureLimit(75000bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(500bd.ofDefaultCurrency())
              .withType(TC_PAMEDPAYCOV)))
          .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
            .withRUNumber(2)
            .withVehicle(vehicleDemoSample5)
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(10000bd.ofDefaultCurrency())
              .withType(TC_PACOLLISIONCOV)
              .withDeductible(500bd.ofDefaultCurrency())
              .withClaimDeductible( new DeductibleBuilder().withAmount( 500bd.ofDefaultCurrency() ) ))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(5000bd.ofDefaultCurrency())
              .withType(TC_PACOMPREHENSIVECOV)
              .withDeductible(500bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(150000bd.ofDefaultCurrency())
              .withType(TC_PALIABILITYCOV)
              .withExposureLimit(75000bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(500bd.ofDefaultCurrency())
              .withType(TC_PAMEDPAYCOV)))
          .withContactInRole(contactDemoSample3028, TC_INSURED)
          .withContactInRole(contactDemoSample10010, TC_AGENT)
          .withCoveredParty(contactDemoSample11445, 1, null))
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withJurisdictionState(TC_CA)
        .withReportedDate(BaseDate.addDays(-2))
        .withCoverageInQuestion(false)
        .withLOBCode(TC_PERSONALAUTOLINE)
        .withPublicId("demo_sample:8037")
        .withDescription("Tree branch fell on the car")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("bbaker"))
        .withContactInRole(contactDemoSample3028, TC_MAINCONTACT)
        .withContactInRole(contactDemoSample3028, TC_REPORTER)
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_GENERAL)
          .withAuthoringDate(BaseDate.addDays(-2))
          .withSubject("Initial phone call with insured")
          .withAuthor(findUserByUserName("bbaker"))
          .withBody("Insured said that a tree branch fell on his roof while he was stopped at a light"))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-2))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-1))
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(4))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_insured"))
          .withSubject("Contact insured")
          .withAssignedUser(findUserByUserName("bbaker"))
          .withTargetDate(BaseDate.addDays(-1)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-2))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(false)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(19))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withDescription("Ford")
          .withActivityPattern(findActivityPatternByCode("vehicle_inspection"))
          .withSubject("Get vehicle inspected")
          .withAssignedUser(findUserByUserName("bbaker"))
          .withTargetDate(BaseDate.addDays(5)))
        .withClaimPopulatedOnCoverageLevelDeductibles()
        .create(bundle)

      var claimInfoDemoSample8037 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:8037")
        .withClaimNumber("235-53-373906")
        .onClaim(claim)
        .create(bundle)

      var policyPeriodDemoSample70007 = new gw.api.databuilder.PolicyPeriodBuilder()
        .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claimInfoDemoSample8037))
        .withPolicyPeriodType(TC_POLICY)
        .withExpirationDate(BaseDate.addDays(274))
        .withPolicyNumber("54-847564")
        .withPublicId("demo_sample:70007")
        .withPolicyType(TC_PERSONALAUTO)
        .withEffectiveDate(BaseDate.addDays(-90))
        .create(bundle)

      var exposureDemoSample80072 = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(false)
        .withLossParty(TC_INSURED)
        .withExposureType(TC_VEHICLEDAMAGE)
        .withAssignedGroup(findGroupByName("Auto1 - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_AUTO_FAST)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_CA)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_PACOLLISIONCOV)
        .withSegment(TC_AUTO_LOW)
        .withClaimantType(TC_INSURED)
        .withClaimOrder(1)
        .withPublicId("demo_sample:80072")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("bbaker"))
        .onClaim(claim)
        .withCoverageSubType(TC_PACOLLISIONCOV)
        .withCoverage(claim.Policy.RiskUnits.firstWhere( \ r -> r.RUNumber == 2 ).Coverages.firstWhere( \ r -> r.Type == CoverageType.TC_PACOLLISIONCOV ))
        .withIncident( new gw.api.databuilder.VehicleIncidentBuilder()
          .withSeverity(TC_MINOR)
          .withDriverRelation(TC_SELF)
          .withDescription("Minor damage to roof")
          .withVehicle(vehicleDemoSample5)
          .withContactInRole(contactDemoSample3028, TC_DRIVER))
        .withContactInRole(contactDemoSample3028, TC_CLAIMANT)
        .create(bundle)
    }
    
    new gw.api.databuilder.PolicyPeriodBuilder()
      .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(rayNewtonClaimInfo))
      .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(robertFarleyClaimInfo))
      .withPolicyPeriodType(TC_ACCOUNT)
      .withAccount("Account 1")
      .withPublicId("demo_sample:60001")
      .withPolicyType(TC_PERSONALAUTO)
      .create(bundle)

  }
  

}
