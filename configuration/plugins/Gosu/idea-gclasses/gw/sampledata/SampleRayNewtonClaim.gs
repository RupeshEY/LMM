package gw.sampledata
uses gw.api.databuilder.CompanyBuilder
uses gw.api.databuilder.DocumentBuilder
uses gw.api.databuilder.PersonBuilder
uses gw.api.databuilder.SubroAdversePartyBuilder
uses gw.api.databuilder.SubrogationBuilder
uses gw.api.databuilder.SubrogationSummaryBuilder
uses gw.api.locale.DisplayKey
uses gw.pl.persistence.core.Bundle
uses gw.plugin.policy.impl.PolicySearchPolicyGenerator
uses gw.api.util.CurrencyUtil
uses java.util.Date
uses gw.api.databuilder.ServiceRequestChangeBuilder
uses gw.api.databuilder.ServiceRequestBuilder
uses gw.api.financials.CurrencyAmount
uses gw.api.databuilder.ServiceRequestMessageBuilder
uses gw.vendormanagement.ServiceRequestActivityPattern
uses gw.api.databuilder.ServiceRequestStatementLineItemBuilder

@Export
class SampleRayNewtonClaim extends SampleDataBase {

  construct(inCache : SampleDataCache) {
    super(inCache)
  }

  override property get Description() : String {
    return "Ray Newton Personal Auto Claim and associated Contacts, Policy, Exposures, Notes, ClaimContacts, Activities and Financials"
  }
   
  override function testSampleData(bundle : Bundle) {
    create(bundle)
  }
     
  function create(bundle : Bundle) : ClaimInfo {
    var vehicleDemoSample1 = new gw.api.databuilder.VehicleBuilder()
      .withYear(1997)
      .withLicensePlate("1HGJ465")
      .withPublicId("demo_sample:1")
      .withMake("Saturn")
      .withState(Jurisdiction.TC_CA)
      .withModel("SL")
      .withVin("1GV234TV347463345")
      .create(bundle)

    var documentDemoSample1 = new gw.api.databuilder.DocumentBuilder()
      .withType(TC_ISO)
      .withDMS(false)
      .withObsolete(false)
      .withStatus(TC_FINAL)
      .withInbound(false)
      .withDateModified(BaseDate.addDays(0))
      .withName("ISOMatchReport-2006-02-01-19-20-20.xml")
      .withAuthor("ClaimCenter")
      .create(bundle)

    var contactDemoSample3022 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Newton")
      .withPublicId("demo_sample:3022")
      .withFirstName("Ray")
      .withPrimaryPhone(TC_WORK)
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("287 Kensington Rd. #1A")
        .withCountry(TC_US)
        .withPostalCode("91145")
        .withState(State.TC_CA)
        .withAddressType(TC_HOME)
        .withCity("South Pasadena"))
      .withWorkPhone("818-446-1206")
      .withTaxID("123-45-6789")
      .create(bundle)

    var contactDemoSample3031 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Simpson")
      .withPublicId("demo_sample:3031")
      .withFirstName("Bo")
      .withPrimaryPhone(TC_WORK)
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("435 Duarte Ave")
        .withCountry(TC_US)
        .withPostalCode("91006")
        .withState(State.TC_CA)
        .withAddressType(TC_HOME)
        .withCity("Arcadia"))
      .withWorkPhone("619-275-2346")
      .withTaxID("123-45-6791")
      .create(bundle)

    var contactDemoSample3032 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Newton")
      .withPublicId("demo_sample:3032")
      .withFirstName("Stan")
      .withPrimaryPhone(TC_WORK)
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("8356 Mountain View Rd.")
        .withCountry(TC_US)
        .withPostalCode("91112")
        .withState(State.TC_CA)
        .withAddressType(TC_HOME)
        .withCity("San Bernadino"))
      .withWorkPhone("818-446-1206")
      .withTaxID("123-45-6790")
      .create(bundle)

    var contactDemoSample17 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Egertson")
      .withPublicId("demo_sample:17")
      .withFirstName("Karen")
      .withPrimaryPhone(TC_WORK)
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("908 Angels Landing Rd.")
        .withCountry(TC_US)
        .withPostalCode("91352")
        .withState(State.TC_CA)
        .withAddressType(TC_HOME)
        .withCity("Anaheim"))
      .withWorkPhone("213-457-6378")
      .create(bundle)

    var contactDemoSample1001 = new gw.api.databuilder.PersonBuilder()
      .withLastName("Newton")
      .withPublicId("demo_sample:1001")
      .withFirstName("Brian")
      .withPrimaryPhone(TC_WORK)
      .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("867 Mann Ave.")
        .withCountry(TC_US)
        .withPostalCode("91352")
        .withState(State.TC_CA)
        .withAddressType(TC_HOME)
        .withCity("Alhambra"))
      .withWorkPhone("818-446-1206")
      .create(bundle)

    var contactDemoSampleAutoShop = new gw.api.databuilder.AutoRepairShopBuilder()
            .withName("Mike's Auto detailing shop")
            .withPrimaryPhone(TC_WORK)
            .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
              .withAddressLine1("231 Stone Ave")
              .withCountry(TC_US)
              .withPostalCode("91006")
              .withState(State.TC_CA)
              .withAddressType(TC_HOME)
              .withCity("Arcadia"))
            .withWorkPhone("579-628-7456")
            .create(bundle)
                                
    var doc1 = new gw.api.databuilder.DocumentBuilder()
          .withName("AutoRepairEstimate-2012-02-10")
          .withType(DocumentType.TC_REPAIRESTIMATE)
          .withStatus(DocumentStatusType.TC_DRAFT)
          .withAuthor("ClaimCenter")
          .withDateModified(Date.Today)
          .withDMS(false)
          .create(bundle)
          
    var doc2 = new gw.api.databuilder.DocumentBuilder()
          .withName("EstimateLetter-2012-02-10")
          .withType(DocumentType.TC_LETTER_SENT)
          .withStatus(DocumentStatusType.TC_FINAL)
          .withDMS(false)
          .withAuthor("ClaimCenter")
          .withDateModified(Date.Tomorrow)
          .create(bundle)    
    
    var doc3 = new gw.api.databuilder.DocumentBuilder()
          .withName("AutoRepairFinalStatement-2012-02-10")
          .withType(DocumentType.TC_STATEMENT)
          .withStatus(DocumentStatusType.TC_APPROVED)
          .withDMS(false)
          .withAuthor("ClaimCenter")
          .withDateModified(Date.Tomorrow)
          .create(bundle)
          
    var claim = new gw.api.databuilder.ClaimBuilder()
      .withLitigationStatus(TC_LITIGATED)
      .withIncidentReport(false)
      .withWeather(TC_CL)
      .withAssignmentStatus(TC_ASSIGNED)
      .withLossDate(BaseDate.addDays(-10))
      .withFlaggedReason("Overdue, high-priority activity")
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStrategy(TC_AUTO_FAST)
      .withAssignmentDate(BaseDate.addDays(0))
      .withFlagged(TC_ISFLAGGED)
      .withLossLocation(new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("1253 Paloma Ave")
        .withCountry(TC_US)
        .withPostalCode("91007")
        .withState(State.TC_CA)
        .withAddressType(TC_HOME)
        .withCity("Arcadia"))
      .withLossCause(TC_VEHCOLLISION)
      .withFaultRating(TC_THIRDPARTY)
      .withClaimNumber("235-53-365870")
      .withMainContactType(TC_SELF)
      .withReportedByType(TC_SELF)
      .withLossType(TC_AUTO)
      .withValidationLevel(TC_NEWLOSS)
      .withPolicy( new gw.api.databuilder.PolicyBuilder()
        .withExpirationDate(BaseDate.addDays(274))
        .withUnderwritingCo(TC_PARENT)
        .withVerified(true)
        .withOrigEffectiveDate(BaseDate.addDays(-3266))
        .withAccount("Account 1")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withUnderwritingGroup(TC_ACME_AUTO)
        .withEffectiveDate(BaseDate.addDays(-PolicySearchPolicyGenerator.SAMPLE_POLICY_EFF_DATE_OFFSET))
        .withStatus(TC_INFORCE)
        .withPolicyNumber(PolicySearchPolicyGenerator.SAMPLE_POLICY_NUMBER)
        .withPublicId("demo_sample:1")
        .withTotalProperties(0)
        .withPolicyType(TC_PERSONALAUTO)
        .withCustomerServiceTier(CustomerServiceTier.TC_PLATINUM)
        .withTotalVehicles(2)
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Towing and Labor Costs Coverage")
          .withFormNumber("PP 03 03 "))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Extended Non-Owned Coverage For Named Individual")
          .withFormNumber("PP 03 06"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Coverage For Excess Sound Reproducing Equipment, Audio, Visual & Data Electronic Equipment & Tapes, Records, Discs & Other Media")
          .withFormNumber("PP 03 13"))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(1)
          .withVehicle(vehicleDemoSample1)
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(15000bd.ofDefaultCurrency())
            .withType(TC_PACOLLISIONCOV)
            .withDeductible(500bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(10000bd.ofDefaultCurrency())
            .withType(TC_PACOMPREHENSIVECOV)
            .withDeductible(500bd.ofDefaultCurrency()))
          .withCoverage(new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(30000bd.ofDefaultCurrency())
            .withExposureLimit(15000bd.ofDefaultCurrency())
            .withType(TC_PALIABILITYCOV))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(500bd.ofDefaultCurrency())
            .withType(TC_PAMEDPAYCOV)))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(2)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
            .withYear(1996)
            .withLicensePlate("2GDH967")
            .withPublicId("demo_sample:3")
            .withMake("Toyota")
            .withState(Jurisdiction.TC_CA)
            .withModel("Corolla")
            .withVin("3DGF78575GD892534"))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(10000bd.ofDefaultCurrency())
            .withType(TC_PACOLLISIONCOV)
            .withDeductible(500bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(5000bd.ofDefaultCurrency())
            .withType(TC_PACOMPREHENSIVECOV)
            .withDeductible(500bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(150000bd.ofDefaultCurrency())
            .withType(TC_PALIABILITYCOV)
            .withExposureLimit(75000bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
            .withIncidentLimit(500bd.ofDefaultCurrency())
            .withType(TC_PAMEDPAYCOV)))
        .withContactInRole(contactDemoSample3022, TC_INSURED)
        .withContactInRole(contactDemoSample17, TC_AGENT)
        .withCoveredParty(contactDemoSample3032, 1, TC_ADDINSURED)
        .withContactInRole(contactDemoSample1001, TC_EXCLUDEDPARTY))
      .withFault(80)
      .withAssignedGroup(Auto1TeamA)
      .withJurisdictionState(TC_CA)
      .withSegment(TC_AUTO_MID)
      .withReportedDate(BaseDate.addDays(-10))
      .withCoverageInQuestion(false)
      .withLOBCode(TC_PERSONALAUTOLINE)
      .withPublicID("demo_sample:1")
      .withDescription("Insured hit other party's car on the front passenger side while making a left turn.")
      .withState(TC_OPEN)
      .withAssignedUser(AndyApplegate)
      .withMatter( new gw.api.databuilder.MatterBuilder()
        .withCaseNumber("34-84982A")
        .withAssignedGroup(Auto1TeamA)
        .withAssignmentStatus(TC_ASSIGNED)
        .withMediationDate(BaseDate.addDays(0))
        .withAssignedUser(AndyApplegate)
        .withFileDate(BaseDate.addDays(-1229))
        .withName("Ray Newton matter")
        .withTrialDate(BaseDate.addDays(0)))
      .withDocument(documentDemoSample1)
      .withContactInRole(contactDemoSample3022, TC_CHECKPAYEE)
      .withContactInRole(contactDemoSample3022, TC_MAINCONTACT)
      .withContactInRole(contactDemoSample3022, TC_REPORTER)
      .withNote( new gw.api.databuilder.NoteBuilder()
        .withTopic(TC_GENERAL)
        .withAuthoringDate(BaseDate.addDays(-8))
        .withSubject("Initial phone call with insured")
        .withAuthor(findUserByUserName("cclark"))
        .withBody("Insured hit other party's car on the front passenger side while making a left turn.  Claimant was crossing the intersection in front of the insured (from left to right) when the collision occurred.  Insured says that he had a left turn arrow, but apparently the claimant also thought he had a green light."))
      .withNote( new gw.api.databuilder.NoteBuilder()
        .withTopic(TC_GENERAL)
        .withAuthoringDate(BaseDate.addDays(-6))
        .withSubject("Phone call with insured driver")
        .withAuthor(AndyApplegate)
        .withBody("Spoke to insured driver.  He reported that the other party's car had suffered some damage and that although the other driver had not had any apparent injuries, he complained of non-specific pain and was taken from the scene of the accident by ambulance."))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-9))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withCloseDate(BaseDate.addDays(-8))
        .withMandatory(true)
        .withPriority(TC_HIGH)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(Auto1TeamA)
        .withType(TC_GENERAL)
        .withEscalationDate(BaseDate.addDays(-3))
        .withStatus(TC_COMPLETE)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("contact_insured"))
        .withSubject("Contact insured")
        .withAssignedUser(AndyApplegate)
        .withTargetDate(BaseDate.addDays(-8)))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-9))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withMandatory(false)
        .withPriority(TC_NORMAL)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(Auto1TeamA)
        .withType(TC_GENERAL)
        .withEscalationDate(BaseDate.addDays(5))
        .withStatus(TC_OPEN)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("witness_statement"))
        .withSubject("Call witness")
        .withAssignedUser(AndyApplegate)
        .withTargetDate(BaseDate.addDays(-5)))
      .withActivity( new gw.api.databuilder.ActivityBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withAssignmentDate(BaseDate.addDays(-9))
        .withEscalated(false)
        .withRecurring(false)
        .withImportance(TC_NOTONCALENDAR)
        .withMandatory(true)
        .withPriority(TC_HIGH)
        .withActivityClass(TC_TASK)
        .withAssignedGroup(Auto1TeamA)
        .withType(TC_GENERAL)
        .withDocumentTemplate("ReservationRights.doc")
        .withEscalationDate(BaseDate.addDays(14))
        .withStatus(TC_OPEN)
        .withAutoGenerated(true)
        .withLastViewedDate(BaseDate.addDays(-2415))
        .withActivityPattern(findActivityPatternByCode("res_of_rights_letter"))
        .withSubject("Send reservation of rights letter")
        .withAssignedUser(AndyApplegate)
        .withTargetDate(BaseDate.addDays(11)))
      .withContactInRole(contactDemoSampleAutoShop, ContactRole.TC_SERVICEREQUESTSPECIALIST)  
      .withContactInRole(contactDemoSample3022, ContactRole.TC_SERVICEREQUESTPARTICIPANT)  
      .withServiceRequest(new ServiceRequestBuilder()
        .withRequestedQuoteCompletionDate(BaseDate.addDays(1))
        .withExpectedQuoteCompletionDate(BaseDate.addDays(1))
        .withInstruction(new gw.api.databuilder.ServiceRequestInstructionBuilder()
          .withCustomerContact(contactDemoSample3022)
          .withSpecialistService(SampleSpecialistServicesBase.AutoRepairBody)
          .withInstructionText("The insured prefers to be contacted by email")
          .withServiceAddress(contactDemoSampleAutoShop.AddressOwner.Address))
        .withSpecialistCommMethod(SpecialistCommMethod.TC_GWPORTAL)
        .withSpecialist(contactDemoSampleAutoShop)
        .withKind(ServiceRequestKind.TC_QUOTEONLY)
        .withAssignedUserAndDefaultGroup(AndyApplegate)
        .withServiceRequestMessage(new ServiceRequestMessageBuilder()
            .withTitle("Need to get revision on quote")
            .withBody("Please get me the change to the quote that we discussed the other afternoon. Will be out this afternoon, but can respond by tomorrow.")
            .withType(ServiceRequestMessageType.TC_INFO)
            .withAuthor(contactDemoSampleAutoShop)
            .withSentFromPortal(true))
         .withServiceRequestMessage(new ServiceRequestMessageBuilder()
            .withTitle("Re: Need to get revision on quote")
            .withBody("I added the revised quote, you should now see it on the portal.")
            .withType(ServiceRequestMessageType.TC_INFO)
            .withAuthor(AndyApplegate.Contact)
            .withSentFromPortal(false)))
      .withDocument(doc1)
      .withDocument(doc2)
      .withDocument(doc3)
      .create(bundle)

    var adversePartyContact = PersonBuilder.uiReadyPerson().create(bundle)
    adversePartyContact.Thirdpartyinsurer = CompanyBuilder.uiReadyCompany()
        .withCompanyName("Archstone Insurance")
        .create(bundle)

    var responsibleParty1 = new SubroAdversePartyBuilder()
        .withAdverseParty(adversePartyContact)
        .withPolicyNumber("12399-54")
        .withFault(100bd)
        .withExpectedRecovery(100bd)
        .withClassification(TC_INSURED)
        .withStrategy(SubroStrategy.TC_PURSUEINS)
        .withNoteSent(BaseDate.addDays(-1))
        .create(bundle)
    claim.addRole(ContactRole.TC_ADVERSEPARTY, responsibleParty1.AdverseParty)

    var doc = new DocumentBuilder()
        .withAuthor(AndyApplegate.Contact.DisplayName)
        .withDescription("Intent of Subrogation Recovery")
        .withStatus(TC_APPROVED)
        .withDMS(false)
        .withName("Subrogation Notice")
        .withSection(TC_SUBROGATION)
        .withType(TC_LETTER_SENT)
        .onClaim(claim)
        .create(bundle)
    doc.RelatedTo = responsibleParty1.AdverseParty

    new gw.api.databuilder.NoteBuilder()
        .onClaim(claim)
        .withTopic(NoteTopicType.TC_SUBROGATION)
        .withAuthoringDate(BaseDate.addDays(-1))
        .withSubject("Identified and contacted responsible parties")
        .withAuthor(AndyApplegate)
        .withBody("Identified the responsible parties for subrogation. " + responsibleParty1 + " is insured and contacted their insurance company " + responsibleParty1.AdverseParty.Thirdpartyinsurer + ". Waiting to hear back.")
        .create(bundle)

    var subrogationSummary = new SubrogationSummaryBuilder()
        .onClaim(claim)
        .withSubrogation(new SubrogationBuilder()
            .withStatus(SubrogationStatus.TC_REVIEW))
        .withExtOwned(false)
        .withEscalateSubro(false)
        .withSubroAdverseParties(responsibleParty1)
        .create(bundle)

    var serviceRequest1 = claim.ServiceRequests[0]
    serviceRequest1.Progress = ServiceRequestProgress.TC_REQUESTED
    serviceRequest1.QuoteStatus = ServiceRequestQuoteStatus.TC_WAITINGFORQUOTE
    // Record the change for the service request history
    ServiceRequestChangeBuilder.recordProgressAndQuoteStatusChange(ServiceRequestProgress.TC_REQUESTED, ServiceRequestQuoteStatus.TC_WAITINGFORQUOTE)
        .onServiceRequest(serviceRequest1)
        .withDescription(DisplayKey.get("Web.ServiceRequest.StateTransition.Description.InstructionSubmitted"))
        .withSequence(serviceRequest1.LatestChange != null ? serviceRequest1.LatestChange.Sequence + 1 : 1)
        .withTimestamp(BaseDate)
        .create(bundle)
        
    // Link documents to service request and record the change
    serviceRequest1.linkDocument(doc1)
    serviceRequest1.linkDocument(doc2)
    serviceRequest1.linkDocument(doc3)
               
    var quoteWithDocuments1 = new gw.api.databuilder.ServiceRequestQuoteBuilder()
        .onServiceRequest(serviceRequest1)
        .withDescription("Vehicle inspection")
        .withLineItem(new ServiceRequestStatementLineItemBuilder()
            .withAmount(1400bd.ofDefaultCurrency())
            .withDescription("Inspection"))
        .withDocument(doc1)
        .withStatementCreationTime(Date.CurrentDate)
        .withExpectedDaysToPerformService(5)
        .withReferenceNumber("abc-123")
        .create(bundle)
    serviceRequest1.LatestQuote = quoteWithDocuments1
    serviceRequest1.Progress = ServiceRequestProgress.TC_WORKCOMPLETE
    serviceRequest1.QuoteStatus = ServiceRequestQuoteStatus.TC_QUOTED
    serviceRequest1.createNewActivity(ServiceRequestActivityPattern.VENDOR_ADDED_QUOTE)
    
    // Record the change for the service request history
    ServiceRequestChangeBuilder.recordProgressAndQuoteStatusChange(ServiceRequestProgress.TC_WORKCOMPLETE, ServiceRequestQuoteStatus.TC_QUOTED)
        .onServiceRequest(serviceRequest1)
        .withDescription(DisplayKey.get("Web.ServiceRequest.StateTransition.Description.AddedQuoteWithReferenceNumber", quoteWithDocuments1.ReferenceNumber, quoteWithDocuments1.Amount))
        .withRelatedStatement(quoteWithDocuments1)
        .withOperation(TC_ADDQUOTE)
        .withSequence(serviceRequest1.LatestChange != null ? serviceRequest1.LatestChange.Sequence + 1 : 1)
        .withTimestamp(BaseDate.addBusinessDays(1))
        .create(bundle)
        
    // Service Request with Latest quote and two documents
    var serviceRequest2 = new ServiceRequestBuilder()
        .onClaim(claim)
        .withRequestedQuoteCompletionDate(BaseDate.addDays(15))
        .withExpectedQuoteCompletionDate(BaseDate.addDays(15))
        .withInstruction(new gw.api.databuilder.ServiceRequestInstructionBuilder()
          .withCustomerContact(contactDemoSample3022)
          .withSpecialistService(SampleSpecialistServicesBase.AutoRepairBody)
          .withSpecialistService(SampleSpecialistServicesBase.AutoRepairAudio)
          .withInstructionText("The insured prefers to be contacted by phone")
          .withServiceAddress(contactDemoSampleAutoShop.AddressOwner.Address))
        .withSpecialistCommMethod(SpecialistCommMethod.TC_GWPORTAL)
        .withKind(ServiceRequestKind.TC_QUOTEANDSERVICE)
        .withSpecialist(contactDemoSampleAutoShop)
        .withAssignedUserAndDefaultGroup(AndyApplegate)
        .create(bundle)

    serviceRequest2.Progress = ServiceRequestProgress.TC_REQUESTED
    serviceRequest2.QuoteStatus = ServiceRequestQuoteStatus.TC_WAITINGFORQUOTE
    // Record the change for the service request history
    ServiceRequestChangeBuilder.recordProgressAndQuoteStatusChange(ServiceRequestProgress.TC_REQUESTED, ServiceRequestQuoteStatus.TC_WAITINGFORQUOTE)
        .onServiceRequest(serviceRequest2)
        .withDescription(DisplayKey.get("Web.ServiceRequest.StateTransition.Description.InstructionSubmitted"))
        .withSequence(serviceRequest2.LatestChange != null ? serviceRequest2.LatestChange.Sequence + 1 : 1)
        .withTimestamp(BaseDate.addBusinessDays(1))
        .create(bundle)
    
    var quoteWithDocuments2 = new gw.api.databuilder.ServiceRequestQuoteBuilder()
        .onServiceRequest(serviceRequest2)
        .withDescription("Repair quote")
        .withLineItem(new ServiceRequestStatementLineItemBuilder()
            .withAmount(800bd.ofDefaultCurrency())
            .withDescription("Repair auto body"))
        .withLineItem(new ServiceRequestStatementLineItemBuilder()
            .withAmount(700bd.ofDefaultCurrency())
            .withDescription("New audio equipment"))
        .withLineItem(new ServiceRequestStatementLineItemBuilder()
            .withAmount(250bd.ofDefaultCurrency())
            .withDescription("Replace audio equipment"))
        .withDocument(doc1)
        .withDocument(doc3)
        .withStatementCreationTime(Date.CurrentDate)
        .withExpectedDaysToPerformService(5)
        .withReferenceNumber("abc-456")
        .create(bundle)
    serviceRequest2.LatestQuote = quoteWithDocuments2
    serviceRequest2.Progress = ServiceRequestProgress.TC_SPECIALISTWAITING
    serviceRequest2.QuoteStatus = ServiceRequestQuoteStatus.TC_WAITINGFORAPPROVAL
    serviceRequest2.createNewActivity(ServiceRequestActivityPattern.VENDOR_ADDED_QUOTE)
    
   // Record the change for adding a quote to the service request
   ServiceRequestChangeBuilder.recordProgressAndQuoteStatusChange(ServiceRequestProgress.TC_SPECIALISTWAITING, ServiceRequestQuoteStatus.TC_WAITINGFORAPPROVAL)
        .onServiceRequest(serviceRequest2)
        .withDescription(DisplayKey.get("Web.ServiceRequest.StateTransition.Description.AddedQuoteWithReferenceNumber", quoteWithDocuments2.ReferenceNumber, quoteWithDocuments2.Amount))
        .withRelatedStatement(quoteWithDocuments2)
        .withOperation(TC_ADDQUOTE)
        .withSequence(serviceRequest2.LatestChange != null ? serviceRequest2.LatestChange.Sequence + 1 : 1)
        .withTimestamp(BaseDate.addBusinessDays(3))
        .create(bundle)
   
   // Service Request of kind "Quote Only"
   var serviceRequest3QuoteOnly = new ServiceRequestBuilder()
        .withRequestedQuoteCompletionDate(BaseDate.addDays(30))
        .withProgress(ServiceRequestProgress.TC_DRAFT)
        .withQuoteStatus(ServiceRequestQuoteStatus.TC_NOQUOTE)
        .withInstruction(new gw.api.databuilder.ServiceRequestInstructionBuilder()
          .withCustomerContact(contactDemoSample3022)
          .withSpecialistService(SampleSpecialistServicesBase.AutoRepairBody)
          .withInstructionText("The insured prefers to be contacted by phone")
          .withServiceAddress(contactDemoSampleAutoShop.AddressOwner.Address))
        .withSpecialistCommMethod(SpecialistCommMethod.TC_GWPORTAL)
        .withKind(ServiceRequestKind.TC_QUOTEONLY)
        .withSpecialist(contactDemoSampleAutoShop)
        .withAssignedUserAndDefaultGroup(AndyApplegate)
        .create(bundle)   
    claim.addToServiceRequests(serviceRequest3QuoteOnly)
                             
    var coverageForAggLimit = claim.Policy.RiskUnits.singleWhere( \ r -> r.RUNumber == 1 ).Coverages.singleWhere(\ c -> c.Type == TC_PALIABILITYCOV)
     
    var rayNewtonClaimInfo = new gw.api.databuilder.ClaimInfoBuilder()
      .withRootPublicId("demo_sample:1")
      .withClaimNumber("235-53-365870")
      .onClaim(claim)
      .create(bundle)

    var policyPeriodDemoSample70001 = new gw.api.databuilder.PolicyPeriodBuilder()
      .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(rayNewtonClaimInfo))
      .withPolicyPeriodType(TC_POLICY)
      .withExpirationDate(BaseDate.addDays(274))
      .withPolicyNumber(PolicySearchPolicyGenerator.SAMPLE_POLICY_NUMBER)
      .withPublicId("demo_sample:70001")
      .withPolicyType(TC_PERSONALAUTO)
      .withEffectiveDate(BaseDate.addDays(-PolicySearchPolicyGenerator.SAMPLE_POLICY_EFF_DATE_OFFSET))
      .create(bundle)

    var aggregateLimitDemoSample90001 = new gw.api.databuilder.AggregateLimitBuilder()
      .withLimitCurrencyAmount(new CurrencyAmount(100000, claim.Currency))
      .withCoverageLine( new gw.api.databuilder.CoverageLineLimitBuilder()
        .withCoverageLine( new gw.api.databuilder.CoverageLineBuilder()
          .withExposureUnitNumber(1)
          .withCoverageType(TC_PALIABILITYCOV)
          .withCoverageSubtype(TC_VEHICLECOVERAGE)
          .withCoverage(coverageForAggLimit)
          .onPolicyPeriod(policyPeriodDemoSample70001)) )
      .withPublicId("demo_sample:90001")
      .withLimitType(AggregateLimitType.TC_NONE)
      .onPolicyPeriod(policyPeriodDemoSample70001)
      .create(bundle)

    var exposureDemoSample10001 = new gw.api.databuilder.ExposureBuilder()
      .withOtherCoverage(false)
      .withLossParty(TC_INSURED)
      .withExposureType(TC_VEHICLEDAMAGE)
      .withAssignedGroup(Auto1TeamA)
      .withAssignmentStatus(TC_ASSIGNED)
      .withStrategy(TC_AUTO_FAST)
      .withProgress(TC_INVESTIGATION)
      .withJurisdictionState(TC_CA)
      .withAssignmentDate(BaseDate.addDays(0))
      .withPrimaryCoverage(TC_PACOLLISIONCOV)
      .withSegment(TC_AUTO_LOW)
      .withClaimantType(TC_INSURED)
      .withClaimOrder(1)
      .withPublicID("demo_sample:10001")
      .withState(TC_OPEN)
      .withAssignedUser(AndyApplegate)
      .onClaim(claim)
      .withCoverageSubType(TC_PACOLLISIONCOV)
      .withIncident( new gw.api.databuilder.VehicleIncidentBuilder()
        .withSpeed(20)
        .withSeverity(TC_MINOR)
        .withCollisionPoint(TC_FRONT)
        .withDriverRelation(TC_SELF)
        .withDescription("Damage to front left fender, body, and frame.  Cracked driver-side mirror.")
        .withVehicle(vehicleDemoSample1)
        .withOwnersPermission(true)
        .withVehicleDirection(TC_FORWARD)
        .withContactInRole(contactDemoSample3032, TC_DRIVER))
      .withISOSendDate(BaseDate.addDays(-9))
      .withISOReceiveDate(BaseDate.addDays(-9))
      .withISOMatchReport( new gw.api.databuilder.ExposureISOMatchReportBuilder()
        .withInsurerAddressPostalCode("94403")
        .withReceivedDate(BaseDate.addDays(0))
        .withInsurerAddressState("CA")
        .withInsurerAddressCity("SAN MATEO")
        .withInsurerAddress1("2121 S EL CAMINO REAL")
        .withInsuringCompany("GUIDEWIRE")
        .withPolicyNumber("541234565")
        .withMatchReasons("N,A")
        .withDateOfLoss(BaseDate.addDays(0))
        .withPolicyType("PAPP")
        .withClaimNumber("2355336587025")
        .withInsurerPhone("+1-650-3579100"))
      .withContactInRole(contactDemoSample3022, TC_CLAIMANT)
      .create(bundle)

    var exposureDemoSample10002 = new gw.api.databuilder.ExposureBuilder()
      .withOtherCoverage(true)
      .withLossParty(TC_THIRD_PARTY)
      .withExposureType(TC_VEHICLEDAMAGE)
      .withAssignedGroup(Auto1TeamA)
      .withAssignmentStatus(TC_ASSIGNED)
      .withStrategy(TC_AUTO_NORMAL)
      .withProgress(TC_INVESTIGATION)
      .withJurisdictionState(TC_CA)
      .withAssignmentDate(BaseDate.addDays(0))
      .withPrimaryCoverage(TC_PALIABILITYCOV)
      .withSegment(TC_AUTO_MID)
      .withClaimantType(TC_VEH_OTHER_OWNER)
      .withClaimOrder(3)
      .withPublicID("demo_sample:10002")
      .withState(TC_OPEN)
      .withAssignedUser(AndyApplegate)
      .onClaim(claim)
      .withCoverageSubType(TC_PALIABILITYCOV_VD)
      .withIncident( new gw.api.databuilder.VehicleIncidentBuilder()
        .withSpeed(30)
        .withSeverity(TC_MAJOR_AUTO)
        .withCollisionPoint(TC_RIGHTSIDE)
        .withDriverRelation(TC_SELF)
        .withDescription("Damage to right side doors and front quarter panel.")
        .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1990)
          .withLicensePlate("7FDG745")
          .withPublicId("demo_sample:2")
          .withMake("Mazda")
          .withState(Jurisdiction.TC_CA)
          .withModel("626")
          .withVin("6GYF54637HD647402"))
        .withOwnersPermission(true)
        .withVehicleDirection(TC_FORWARD)
        .withContactInRole(contactDemoSample3031, TC_DRIVER))
      .withContactInRole(contactDemoSample3031, TC_CLAIMANT)
      .create(bundle)

    var exposureDemoSample20001 = new gw.api.databuilder.ExposureBuilder()
      .withOtherCoverage(false)
      .withLossParty(TC_INSURED)
      .withExposureType(TC_MEDPAY)
      .withAssignedGroup(Auto1TeamA)
      .withAssignmentStatus(TC_ASSIGNED)
      .withStrategy(TC_INJURY_FAST)
      .withProgress(TC_INVESTIGATION)
      .withJurisdictionState(TC_CA)
      .withAssignmentDate(BaseDate.addDays(0))
      .withPrimaryCoverage(TC_PAMEDPAYCOV)
      .withSegment(TC_INJURY_LOW)
      .withClaimantType(TC_HOUSEHOLDMEMBER)
      .withClaimOrder(2)
      .withPublicID("demo_sample:20001")
      .withState(TC_OPEN)
      .withAssignedUser(AndyApplegate)
      .onClaim(claim)
      .withCoverageSubType(TC_PAMEDPAYCOV)
      .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
        .withGeneralInjuryType(TC_SPECIFIC)
        .withSeverity(TC_MINOR)
        .withDescription("Broken left arm, stitches in left temple from impact with car.")
        .withMedicalTreatmentType(TC_ONE_DOCTOR)
        .withDetailedInjuryType(TC_28)
        .withLostWages(false)
        .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
          .withPrimaryBodyPart(TC_UPPER)
          .withOrdering(100))
        .withContactInRole(contactDemoSample3032, TC_INJURED))
      .withContactInRole(contactDemoSample3022, TC_ALTCONTACT)
      .withContactInRole(contactDemoSample3032, TC_CLAIMANT)
      .create(bundle)

    var exposureDemoSample20002 = new gw.api.databuilder.ExposureBuilder()
      .withOtherCoverage(true)
      .withLossParty(TC_THIRD_PARTY)
      .withOtherCoverageInfo("employer health plan with Kaiser")
      .withExposureType(TC_BODILYINJURYDAMAGE)
      .withAssignedGroup(findGroupByName("BI Review Team"))
      .withAssignmentStatus(TC_ASSIGNED)
      .withStrategy(TC_INJURY_NORMAL)
      .withProgress(TC_INVESTIGATION)
      .withJurisdictionState(TC_CA)
      .withAssignmentDate(BaseDate.addDays(0))
      .withPrimaryCoverage(TC_PALIABILITYCOV)
      .withSegment(TC_INJURY_MID)
      .withClaimantType(TC_VEH_OTHER_OWNER)
      .withClaimOrder(4)
      .withPublicID("demo_sample:20002")
      .withState(TC_OPEN)
      .withAssignedUser(findUserByUserName("clevitt"))
      .onClaim(claim)
      .withCoverageSubType(TC_PALIABILITYCOV_BI)
      .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
        .withGeneralInjuryType(TC_SPECIFIC)
        .withSeverity(TC_MODERATE_GEN)
        .withDescription("Multiple broken ribs, punctured lung, lacerations of the face and left arm")
        .withMedicalTreatmentType(TC_HOSPITAL)
        .withDetailedInjuryType(TC_28)
        .withLostWages(true)
        .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
          .withPrimaryBodyPart(TC_TRUNK)
          .withDetailedBodyPart(DetailedBodyPartType.TC_63)
          .withOrdering(100))
        .withContactInRole(contactDemoSample3031, TC_INJURED))
      .withContactInRole(contactDemoSample3031, TC_CLAIMANT)
      .withNote( new gw.api.databuilder.NoteBuilder()
        .withTopic(TC_GENERAL)
        .withAuthoringDate(BaseDate.addDays(-5))
        .withSubject("Initial phone call with claimant")
        .onClaim(claim)
        .withAuthor(AndyApplegate)
        .withBody("Spoke with the claimant.  He was not admitted to the hospital, but was treated in the emergency room for bruised or broken ribs.  I asked him to send medical reports and any bills to me while telling him that we are not accepting liability yet until we can gather more facts about the claim.  He also said that he recalled the person driving the car was named Bob, not Stan."))
      .create(bundle)

    new gw.api.databuilder.ActivityBuilder()
      .onClaim(claim)
      .withAssignmentStatus(TC_ASSIGNED)
      .withAssignmentDate(BaseDate.addDays(-9))
      .withEscalated(false)
      .withRecurring(false)
      .withImportance(TC_NOTONCALENDAR)
      .withMandatory(true)
      .withPriority(TC_HIGH)
      .withActivityClass(TC_TASK)
      .withAssignedGroup(Auto1TeamA)
      .withType(TC_GENERAL)
      .withEscalationDate(BaseDate.addDays(-2))
      .withStatus(TC_OPEN)
      .withAutoGenerated(true)
      .withLastViewedDate(BaseDate.addDays(-2415))
      .withActivityPattern(findActivityPatternByCode("general_reminder"))
      .withSubject("Determine fault rating")
      .withAssignedUser(AndyApplegate)
      .withTargetDate(BaseDate.addDays(-7))
      .withClaimContact(claim.getClaimContact(contactDemoSample3022))
      .create(bundle)

    new gw.api.databuilder.ActivityBuilder()
      .onClaim(claim)
      .withAssignmentStatus(TC_ASSIGNED)
      .withAssignmentDate(BaseDate.addDays(-9))
      .withEscalated(false)
      .withRecurring(false)
      .withImportance(TC_NOTONCALENDAR)
      .withCloseDate(BaseDate.addDays(-8))
      .withMandatory(true)
      .withPriority(TC_HIGH)
      .withActivityClass(TC_TASK)
      .withAssignedGroup(Auto1TeamA)
      .withType(TC_GENERAL)
      .withEscalationDate(BaseDate.addDays(-3))
      .withStatus(TC_COMPLETE)
      .withAutoGenerated(true)
      .withLastViewedDate(BaseDate.addDays(-2415))
      .withActivityPattern(findActivityPatternByCode("contact_claimant"))
      .withSubject("Make initial claimant contact")
      .withAssignedUser(AndyApplegate)
      .withTargetDate(BaseDate.addDays(-8))
      .withClaimContact(claim.getClaimContact(contactDemoSample3032))
      .create(bundle)
      
    new gw.api.databuilder.ActivityBuilder()
      .onClaim(claim)
      .withAssignmentStatus(TC_ASSIGNED)
      .withAssignmentDate(BaseDate.addDays(-9))
      .withEscalated(false)
      .withRecurring(false)
      .withImportance(TC_NOTONCALENDAR)
      .withMandatory(false)
      .withPriority(TC_NORMAL)
      .withActivityClass(TC_TASK)
      .withAssignedGroup(Auto1TeamA)
      .withType(TC_GENERAL)
      .withEscalationDate(BaseDate.addDays(15))
      .withStatus(TC_OPEN)
      .withAutoGenerated(true)
      .withLastViewedDate(BaseDate.addDays(-2415))
      .withActivityPattern(findActivityPatternByCode("police_report"))
      .withSubject("Get police report")
      .withAssignedUser(AndyApplegate)
      .withTargetDate(BaseDate.addDays(5))
      .withClaimContact(claim.getClaimContact(contactDemoSample3031))
      .create(bundle)

    new gw.api.databuilder.ActivityBuilder()
      .onClaim(claim)
      .withAssignmentStatus(TC_ASSIGNED)
      .withAssignmentDate(BaseDate.addDays(-9))
      .withEscalated(false)
      .withRecurring(false)
      .withImportance(TC_NOTONCALENDAR)
      .withMandatory(false)
      .withPriority(TC_NORMAL)
      .withActivityClass(TC_TASK)
      .withAssignedGroup(Auto1TeamA)
      .withType(TC_GENERAL)
      .withEscalationDate(BaseDate.addDays(18))
      .withStatus(TC_OPEN)
      .withAutoGenerated(true)
      .withLastViewedDate(BaseDate.addDays(-2415))
      .withDescription("Saturn SL")
      .withActivityPattern(findActivityPatternByCode("vehicle_inspection"))
      .withSubject("Get vehicle inspected")
      .withAssignedUser(AndyApplegate)
      .withTargetDate(BaseDate.addDays(4))
      .withExposure(exposureDemoSample10001)
      .create(bundle)

    new gw.api.databuilder.ActivityBuilder()
      .onClaim(claim)
      .withAssignmentStatus(TC_ASSIGNED)
      .withAssignmentDate(BaseDate.addDays(-9))
      .withEscalated(false)
      .withRecurring(false)
      .withImportance(TC_NOTONCALENDAR)
      .withMandatory(false)
      .withPriority(TC_NORMAL)
      .withActivityClass(TC_TASK)
      .withAssignedGroup(Auto1TeamA)
      .withType(TC_GENERAL)
      .withEscalationDate(BaseDate.addDays(18))
      .withStatus(TC_OPEN)
      .withAutoGenerated(true)
      .withLastViewedDate(BaseDate.addDays(-2415))
      .withDescription("Mazda 626")
      .withActivityPattern(findActivityPatternByCode("vehicle_inspection"))
      .withSubject("Get vehicle inspected")
      .withAssignedUser(AndyApplegate)
      .withTargetDate(BaseDate.addDays(4))
      .withExposure(exposureDemoSample10002)
      .create(bundle)

    new gw.api.databuilder.ActivityBuilder()
      .onClaim(claim)
      .withAssignmentStatus(TC_ASSIGNED)
      .withAssignmentDate(BaseDate.addDays(-9))
      .withEscalated(false)
      .withRecurring(false)
      .withImportance(TC_NOTONCALENDAR)
      .withMandatory(false)
      .withPriority(TC_NORMAL)
      .withActivityClass(TC_TASK)
      .withAssignedGroup(findGroupByName("BI Review Team"))
      .withType(TC_GENERAL)
      .withEscalationDate(BaseDate.addDays(7))
      .withStatus(TC_OPEN)
      .withAutoGenerated(true)
      .withLastViewedDate(BaseDate.addDays(-2415))
      .withActivityPattern(findActivityPatternByCode("medical_report_claimant"))
      .withSubject("Review medical reports for claimant injuries")
      .withAssignedUser(findUserByUserName("clevitt"))
      .withTargetDate(BaseDate.addDays(4))
      .withExposure(exposureDemoSample20002)
      .create(bundle)

    new gw.api.databuilder.ActivityBuilder()
      .onClaim(claim)
      .withAssignmentStatus(TC_ASSIGNED)
      .withAssignmentDate(BaseDate.addDays(-9))
      .withEscalated(false)
      .withRecurring(false)
      .withImportance(TC_NOTONCALENDAR)
      .withMandatory(false)
      .withPriority(TC_NORMAL)
      .withActivityClass(TC_TASK)
      .withAssignedGroup(findGroupByName("BI Review Team"))
      .withType(TC_GENERAL)
      .withEscalationDate(BaseDate.addDays(19))
      .withStatus(TC_OPEN)
      .withAutoGenerated(true)
      .withLastViewedDate(BaseDate.addDays(-2415))
      .withActivityPattern(findActivityPatternByCode("general_reminder"))
      .withSubject("Use injury evaluation system")
      .withAssignedUser(findUserByUserName("clevitt"))
      .withTargetDate(BaseDate.addDays(5))
      .withExposure(exposureDemoSample20002)
      .create(bundle)

    var transactionSetDemoSample20001 = new gw.api.databuilder.CheckSetBuilder()
      .withApprovalDate(BaseDate.addDays(-6))
      .withRequestingUser(AndyApplegate)
      .withApprovalStatus(TC_APPROVED)
      .onClaim(claim)
      .create(bundle)

    var transactionSetDemoSample20003 = new gw.api.databuilder.ReserveSetBuilder()
      .withApprovalDate(BaseDate.addDays(-9))
      .withRequestingUser(AndyApplegate)
      .withApprovalStatus(TC_APPROVED)
      .onClaim(claim)
      .create(bundle)

    var reserveLineDemoSample1 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample10001)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_BODY)
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample2 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample10002)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_BODY)
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample3 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample20001)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_MEDICAL)
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample4 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample20002)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_MEDICAL)
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample5 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample10001)
      .withCostType(TC_AOEXPENSE)
      .withCostCategory(TC_OTHER)
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample6 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample10002)
      .withCostType(TC_AOEXPENSE)
      .withCostCategory(TC_INSPECTION)
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample7 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample20001)
      .withCostType(TC_AOEXPENSE)
      .withCostCategory(TC_OTHER)
      .withClaim(claim)
      .create(bundle)

    var reserveLineDemoSample8 = new gw.api.databuilder.ReserveLineBuilder()
      .withExposure(exposureDemoSample20002)
      .withCostType(TC_AOEXPENSE)
      .withCostCategory(TC_OTHER)
      .withClaim(claim)
      .create(bundle)

    var checkDemoSample10100 = new gw.api.databuilder.CheckBuilder()
      .onClaim(claim)
      .withIssueDate(BaseDate.addDays(-6))
      .withScheduledSendDate(BaseDate.addDays(-6))
      .withBankAccount(TC_DEFAULT)
      .onCheckSet(transactionSetDemoSample20001)
      .withPayTo("Ray Newton")
      .withStatus(TC_ISSUED)
      .withPaymentMethod(TC_CHECK)
      .withCheckNumber("10436")
      .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
            .withPayee(contactDemoSample3022)
            .withPayeeType(TC_CLAIMANT))
      .withType(TC_PRIMARY)
      .withDeduction(new gw.api.databuilder.DeductionBuilder()
        .withReportingAmount(100bd.ofCurrency(CurrencyUtil.getReportingCurrency()))
        .withDeductionType(TC_IRS)
        .withClaimAmount(100bd.ofCurrency(claim.Currency))
        .withReservingAmount(100bd.ofCurrency(claim.Currency))
        .withTransactionAmount(100bd.ofCurrency(claim.Currency)))
      .create(bundle)

    var transactionDemoSample10001 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample1)
      .onExposure(exposureDemoSample10001)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_BODY)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .onClaim(claim)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Repairs")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(500bd.ofDefaultCurrency())
        .withClaimAmount(500bd.ofDefaultCurrency())
        .withReservingAmount(500bd.ofDefaultCurrency())
        .withTransactionAmount(500bd.ofDefaultCurrency())
        .withLineCategory(TC_OTHER)
        .withReportingForExAmount(0bd.ofCurrency(CurrencyUtil.getReportingCurrency())))
      .create(bundle)

    var transactionDemoSample10002 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample2)
      .onExposure(exposureDemoSample10002)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_BODY)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .onClaim(claim)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Repairs")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(4000bd.ofDefaultCurrency())
        .withClaimAmount(4000bd.ofDefaultCurrency())
        .withReservingAmount(4000bd.ofDefaultCurrency())
        .withTransactionAmount(4000bd.ofDefaultCurrency())
        .withLineCategory(TC_OTHER)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample10003 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample3)
      .onExposure(exposureDemoSample20001)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_MEDICAL)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .onClaim(claim)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Doctor's visit")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(500bd.ofDefaultCurrency())
        .withClaimAmount(500bd.ofDefaultCurrency())
        .withReservingAmount(500bd.ofDefaultCurrency())
        .withTransactionAmount(500bd.ofDefaultCurrency())
        .withLineCategory(TC_DOCTOR)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample10004 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample3)
      .onExposure(exposureDemoSample20001)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_MEDICAL)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .onClaim(claim)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Physical Therapy")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(2500bd.ofDefaultCurrency())
        .withClaimAmount(2500bd.ofDefaultCurrency())
        .withReservingAmount(2500bd.ofDefaultCurrency())
        .withTransactionAmount(2500bd.ofDefaultCurrency())
        .withLineCategory(TC_PT)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample10005 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample4)
      .onExposure(exposureDemoSample20002)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType(TC_CLAIMCOST)
      .withCostCategory(TC_MEDICAL)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .onClaim(claim)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Emergency room visit")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(6500bd.ofDefaultCurrency())
        .withClaimAmount(6500bd.ofDefaultCurrency())
        .withReservingAmount(6500bd.ofDefaultCurrency())
        .withTransactionAmount(6500bd.ofDefaultCurrency())
        .withLineCategory(TC_DOCTOR)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Therapy")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(1500bd.ofDefaultCurrency())
        .withClaimAmount(1500bd.ofDefaultCurrency())
        .withReservingAmount(1500bd.ofDefaultCurrency())
        .withTransactionAmount(1500bd.ofDefaultCurrency())
        .withLineCategory(TC_PT)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample10006 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample5)
      .onExposure(exposureDemoSample10001)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType(TC_AOEXPENSE)
      .withCostCategory(TC_OTHER)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .onClaim(claim)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Collision specialist fee")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(400bd.ofDefaultCurrency())
        .withClaimAmount(400bd.ofDefaultCurrency())
        .withReservingAmount(400bd.ofDefaultCurrency())
        .withTransactionAmount(400bd.ofDefaultCurrency())
        .withLineCategory(TC_OTHER)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample10007 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample6)
      .onExposure(exposureDemoSample10002)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType(TC_AOEXPENSE)
      .withCostCategory(TC_INSPECTION)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .onClaim(claim)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Vehicle inspection fee")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(1000bd.ofDefaultCurrency())
        .withClaimAmount(1000bd.ofDefaultCurrency())
        .withReservingAmount(1000bd.ofDefaultCurrency())
        .withTransactionAmount(1000bd.ofDefaultCurrency())
        .withLineCategory(TC_OTHER)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample10008 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample7)
      .onExposure(exposureDemoSample20001)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType(TC_AOEXPENSE)
      .withCostCategory(TC_OTHER)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .onClaim(claim)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Injury report fee")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(500bd.ofDefaultCurrency())
        .withClaimAmount(500bd.ofDefaultCurrency())
        .withReservingAmount(500bd.ofDefaultCurrency())
        .withTransactionAmount(500bd.ofDefaultCurrency())
        .withLineCategory(TC_OTHER)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample10009 = new gw.api.databuilder.ReserveBuilder()
      .withReserveLine(reserveLineDemoSample8)
      .onExposure(exposureDemoSample20002)
      .onTransactionSet(transactionSetDemoSample20003)
      .withCostType(TC_AOEXPENSE)
      .withCostCategory(TC_OTHER)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .onClaim(claim)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("BI specialist fee")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(1000bd.ofDefaultCurrency())
        .withClaimAmount(1000bd.ofDefaultCurrency())
        .withReservingAmount(1000bd.ofDefaultCurrency())
        .withTransactionAmount(1000bd.ofDefaultCurrency())
        .withLineCategory(TC_OTHER)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample20001 = new gw.api.databuilder.PaymentBuilder()
      .withReserveLine(reserveLineDemoSample1)
      .onTransactionSet(transactionSetDemoSample20001)
      .withCostCategory(TC_BODY)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .onCheck(checkDemoSample10100)
      .withPaymentType(TC_PARTIAL)
      .onExposure(exposureDemoSample10001)
      .withCostType(TC_CLAIMCOST)
      .onClaim(claim)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Repairs")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(100bd.ofDefaultCurrency())
        .withClaimAmount(100bd.ofDefaultCurrency())
        .withReservingAmount(100bd.ofDefaultCurrency())
        .withTransactionAmount(100bd.ofDefaultCurrency())
        .withLineCategory(TC_OTHER)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample20002 = new gw.api.databuilder.PaymentBuilder()
      .withReserveLine(reserveLineDemoSample3)
      .onTransactionSet(transactionSetDemoSample20001)
      .withCostCategory(TC_MEDICAL)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .onCheck(checkDemoSample10100)
      .withPaymentType(TC_PARTIAL)
      .onExposure(exposureDemoSample20001)
      .withCostType(TC_CLAIMCOST)
      .onClaim(claim)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Doctor's visit")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(500bd.ofDefaultCurrency())
        .withClaimAmount(500bd.ofDefaultCurrency())
        .withReservingAmount(500bd.ofDefaultCurrency())
        .withTransactionAmount(500bd.ofDefaultCurrency())
        .withLineCategory(TC_DOCTOR)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample20003 = new gw.api.databuilder.PaymentBuilder()
      .withReserveLine(reserveLineDemoSample3)
      .onTransactionSet(transactionSetDemoSample20001)
      .withCostCategory(TC_MEDICAL)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .onCheck(checkDemoSample10100)
      .withPaymentType(TC_PARTIAL)
      .onExposure(exposureDemoSample20001)
      .withCostType(TC_CLAIMCOST)
      .onClaim(claim)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Physical Therapy")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(500bd.ofDefaultCurrency())
        .withClaimAmount(500bd.ofDefaultCurrency())
        .withReservingAmount(500bd.ofDefaultCurrency())
        .withTransactionAmount(500bd.ofDefaultCurrency())
        .withLineCategory(TC_PT)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample20004 = new gw.api.databuilder.PaymentBuilder()
      .withReserveLine(reserveLineDemoSample5)
      .onTransactionSet(transactionSetDemoSample20001)
      .withCostCategory(TC_OTHER)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .onCheck(checkDemoSample10100)
      .withPaymentType(TC_PARTIAL)
      .onExposure(exposureDemoSample10001)
      .withCostType(TC_AOEXPENSE)
      .onClaim(claim)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("Collision specialist fee")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(400bd.ofDefaultCurrency())
        .withClaimAmount(400bd.ofDefaultCurrency())
        .withReservingAmount(400bd.ofDefaultCurrency())
        .withTransactionAmount(400bd.ofDefaultCurrency())
        .withLineCategory(TC_OTHER)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    var transactionDemoSample20005 = new gw.api.databuilder.PaymentBuilder()
      .withReserveLine(reserveLineDemoSample7)
      .onTransactionSet(transactionSetDemoSample20001)
      .withCostCategory(TC_OTHER)
      .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
      .withStatus(TC_SUBMITTED)
      .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
      .onCheck(checkDemoSample10100)
      .withPaymentType(TC_PARTIAL)
      .onExposure(exposureDemoSample20001)
      .withCostType(TC_AOEXPENSE)
      .onClaim(claim)
      .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
        .withComments("BI specialist")
        .withClaimForExAmount(0bd.ofDefaultCurrency())
        .withReportingAmount(500bd.ofDefaultCurrency())
        .withClaimAmount(500bd.ofDefaultCurrency())
        .withReservingAmount(500bd.ofDefaultCurrency())
        .withTransactionAmount(500bd.ofDefaultCurrency())
        .withLineCategory(TC_OTHER)
        .withReportingForExAmount(0bd.ofDefaultCurrency()))
      .create(bundle)

    new gw.api.databuilder.UserRoleAssignmentBuilder()
      .withComments("sample")
      .withActive(true)
      .withAssignedGroup(Auto1TeamA)
      .withAssignmentStatus(TC_ASSIGNED)
      .withPublicId("demo_sample:1")
      .withRole(TC_RELATEDUSER)
      .withAssignedUser(findUserByUserName("ccraft"))
      .onClaim(claim)
      .create(bundle)

    new gw.api.databuilder.MessageBuilder()
      .withAckCount(3)
      .withDuplicateCount(2)
      .withObjectKey("claim:1")
      .withRetryCount(0)
      .withStatus(4)
      .withCreationTime(BaseDate.addDays(-244))
      .withSendOrder(5)
      .withEventRootKey("claim:1")
      .withPublicId("default_data:5")
      .withDestinationId(65)
      .withErrorDescription("An error occurred")
      .withPayload("Payload 5")
      .withClaim(claim)
      .withEventName("Event 5")
      .create(bundle)

    new gw.api.databuilder.MessageBuilder()
      .withAckCount(0)
      .withDuplicateCount(0)
      .withObjectKey("claim:1")
      .withRetryCount(0)
      .withStatus(1)
      .withCreationTime(BaseDate.addDays(-244))
      .withSendOrder(6)
      .withEventRootKey("claim:1")
      .withPublicId("default_data:8")
      .withDestinationId(65)
      .withPayload("Payload 8")
      .withClaim(claim)
      .withEventName("Event 8")
      .create(bundle)

    new gw.api.databuilder.MessageHistoryBuilder()
      .withAckCount(1)
      .withDuplicateCount(0)
      .withObjectKey("claim:1")
      .withRetryCount(0)
      .withStatus(10)
      .withCreationTime(BaseDate.addDays(-244))
      .withSendOrder(1)
      .withEventRootKey("claim:1")
      .withPublicId("default_data:1")
      .withDestinationID(65)
      .withPayload("Payload 1")
      .withOrigMsgId(1)
      .withClaim(claim)
      .withEventName("Event 1")
      .create(bundle)

    new gw.api.databuilder.MessageHistoryBuilder()
      .withAckCount(0)
      .withDuplicateCount(0)
      .withObjectKey("claim:1")
      .withRetryCount(0)
      .withStatus(13)
      .withCreationTime(BaseDate.addDays(-244))
      .withSendOrder(4)
      .withEventRootKey("claim:1")
      .withPublicId("default_data:4")
      .withDestinationID(65)
      .withPayload("Payload 4")
      .withOrigMsgId(4)
      .withClaim(claim)
      .withEventName("Event 4")
      .create(bundle)

    return rayNewtonClaimInfo
  }
}

