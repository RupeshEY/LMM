package gw.bizrules

uses gw.api.databuilder.bizrules.ActivityRuleBuilder
uses gw.api.databuilder.bizrules.ActivityRuleHeadBuilder
uses gw.api.databuilder.bizrules.ActivityRuleUpdateBuilder
uses gw.api.databuilder.bizrules.GenerateActivityCommandDefinitionBuilder
uses gw.api.databuilder.bizrules.GenerateHistoryCommandDefinitionBuilder
uses gw.api.databuilder.bizrules.SetFieldCommandDefinitionBuilder
uses gw.bizrules.databuilder.ContainsExpressionFragmentBuilder
uses gw.bizrules.databuilder.ExpressionFragmentBuilders
uses gw.bizrules.databuilder.RuleConditionBuilder
uses gw.bizrules.databuilder.RuleConditionLineBuilder
uses gw.bizrules.ruleaction.behavioralcommandparam.activityrestriction.DuplicateClaimActivityRestriction
uses gw.bizrules.ruleaction.behavioralcommandparam.activityrestriction.DuplicateOpenAssigneeActivityRestriction
uses gw.bizrules.ruleaction.behavioralcommandparam.activityrestriction.DuplicateOpenClaimActivityRestriction
uses gw.bizrules.ruleaction.behavioralcommandparam.assignee.SubrogationOwnerActivityAssigneeLoader
uses gw.bizrules.ruleaction.behavioralcommandparam.assignee.UserRoleActivityAssigneeLoader
uses gw.bizrules.ruleaction.behavioralcommandparam.relatedto.ClaimRelatedTo
uses gw.bizrules.ruleaction.behavioralcommandparam.relatedto.SubrogationRelatedTo
uses typekey.ClaimState
uses typekey.CustomHistoryType
uses typekey.HistoryType
uses typekey.LossType
uses typekey.Parentheses
uses typekey.RuleBooleanOperator
uses typekey.RuleConditionType
uses typekey.RuleContextDefinitionKey
uses typekey.RuleOperator
uses typekey.TriggeringPointKey
uses typekey.YesNo

/**
 * Builders to create the Claim Update Activity Rules
 */
@Export
class ClaimPreupdateBizrulesBuilder extends BizrulesBuilder {

  /**
   * Creates all the Rules and saves them to the database
   */
  public static function createRules() {
    createCPU05000Rule()
    createCPU06000Rule()
    createCPU09000Rule()
    createCPU31100Rule()
    createSubrogationReferralRule()
    createSubroReopenedClaimRule()
    createSubroResponsiblePartyRule()
    createSubroSupplementalPaymentRule()
  }

  private static function createCPU05000Rule() {
    var head = new ActivityRuleHeadBuilder()
        .withGlobalRuleID("8e731309-d50d-4fbe-93fd-47c47c1c3a99")
        .withSystemId("base-configuration")
        .withStatus(TC_STAGED)
        .withRule(new ActivityRuleBuilder()
            .withName("CPU05000 - SI - Create Supervisor Review Activity")
            .withDescription("If claim SIU score exceeds threshold, create a SI Review activity")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_CLAIM)
            .withTriggeringPointKey(TriggeringPointKey.TC_UPDATE)
            .withRuleCondition(new RuleConditionBuilder()
                .addRuleConditionLine("claim.SIUTotalScore", RuleOperator.TC_GREATERTHANOREQUAL, "Util.getSIActivityThreshold()"))
            .addRuleCommandDefinition(new GenerateActivityCommandDefinitionBuilder("SI_review")
                .withAdditionalRestrictions(DuplicateClaimActivityRestriction.NAME)
                .withOrderNumber(0)
                .createCommandDefinition()))
        .createAndCommit()
    isRuleValid(head)
  }

  private static function createCPU06000Rule() {
    var head = new ActivityRuleHeadBuilder()
        .withGlobalRuleID("d5e90289-74ed-427f-80de-57b9ab7b6ad6")
        .withSystemId("base-configuration")
        .withStatus(TC_STAGED)
        .withRule(new ActivityRuleBuilder()
            .withName("CPU06000 - SI - Create SIU Escalation Activity")
            .withDescription("When claim SI escalation flag is set, create SIU Escalation activity")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_CLAIM)
            .withTriggeringPointKey(TriggeringPointKey.TC_UPDATE)
            .withRuleCondition(new RuleConditionBuilder()
                .addRuleConditionLine(ExpressionFragmentBuilders.forPropertyReference("claim.SIEscalateSIU", true), RuleOperator.TC_NOTEQUALS, ExpressionFragmentBuilders.forCodeExpression("claim.SIEscalateSIU"))
                .addRuleConditionLine("claim.SIEscalateSIU", RuleOperator.TC_EQUALS, ExpressionFragmentBuilders.forTypeKeyExpression(YesNo.TC_YES)))
            .addRuleCommandDefinition(new GenerateActivityCommandDefinitionBuilder("SIU_escalation")
                .withOrderNumber(0)
                .createCommandDefinition())
            .addRuleCommandDefinition(new SetFieldCommandDefinitionBuilder()
                .withProperty("claim.SIEscalateSIUdate")
                .withValue("Util.currentDate()")
                .withSetIfNull(false)
                .withOrderNumber(1)
                .createCommandDefinition())
            .addRuleCommandDefinition(new SetFieldCommandDefinitionBuilder()
                .withProperty("claim.SIUStatus")
                .withValue("SIUStatus.TC_UNDER_INVESTIGATION")
                .withSetIfNull(false)
                .withOrderNumber(2)
                .createCommandDefinition())
            .addRuleCommandDefinition(new GenerateHistoryCommandDefinitionBuilder()
                .withType(CustomHistoryType.TC_DATACHANGE)
                .withDescription("Claim has been escalated to the SIU team")
                .withRelatedTo(ClaimRelatedTo.NAME)
                .withOrderNumber(3)
                .createCommandDefinition()))
        .createAndCommit()
    isRuleValid(head)

    var head2 = new ActivityRuleUpdateBuilder(head)
        .withRule(new ActivityRuleBuilder()
            .withName("CPU06000 - SI - Create SIU Escalation Activity")
            .withDescription("When claim SI escalation flag is set, create SIU Escalation activity")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_CLAIM)
            .withTriggeringPointKey(TriggeringPointKey.TC_UPDATE)
            .withRuleCondition(new RuleConditionBuilder()
                .addRuleConditionLine(ExpressionFragmentBuilders.forPropertyReference("claim.SIEscalateSIU", true), RuleOperator.TC_NOTEQUALS, ExpressionFragmentBuilders.forCodeExpression("claim.SIEscalateSIU"))
                .addRuleConditionLine("claim.SIEscalateSIU", RuleOperator.TC_EQUALS, ExpressionFragmentBuilders.forTypeKeyExpression(YesNo.TC_YES)))
            .addRuleCommandDefinition(new GenerateActivityCommandDefinitionBuilder("SIU_escalation")
                .withOrderNumber(0)
                .createCommandDefinition())
            .addRuleCommandDefinition(new SetFieldCommandDefinitionBuilder()
                .withProperty("claim.SIEscalateSIUdate")
                .withValue("Util.currentDate()")
                .withSetIfNull(false)
                .withOrderNumber(1)
                .createCommandDefinition())
            .addRuleCommandDefinition(new SetFieldCommandDefinitionBuilder()
                .withProperty("claim.SIUStatus")
                .withValue("SIUStatus.TC_UNDER_INVESTIGATION")
                .withSetIfNull(false)
                .withOrderNumber(2)
                .createCommandDefinition())
            .addRuleCommandDefinition(new GenerateHistoryCommandDefinitionBuilder()
                .withType(CustomHistoryType.TC_DATACHANGE)
                .withDescription("Claim has been escalated to the SIU team")
                .withRelatedTo(ClaimRelatedTo.NAME)
                .withOrderNumber(3)
                .createCommandDefinition()))
        .withStatus(TC_STAGED)
        .createAndCommit()
    isRuleValid(head2)
  }

  private static function createCPU09000Rule() {
    var head = new ActivityRuleHeadBuilder()
        .withGlobalRuleID("5ab340e6-599f-418c-9d0e-373a536be42c")
        .withSystemId("base-configuration")
        .withStatus(TC_STAGED)
        .withRule(new ActivityRuleBuilder()
            .withName("CPU09000 - Related to Catastrophe")
            .withDescription("For non-catastrophe claims, if claim is in a cat zone and has a change to the loss type, loss cause, or loss date, then create a Catastrophe Review activity")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_CLAIM)
            .withTriggeringPointKey(TriggeringPointKey.TC_UPDATE)
            .withRuleCondition(new RuleConditionBuilder()
                .withRuleConditionType(RuleConditionType.TC_ADVANCED)
                .addRuleConditionLine("claim.Catastrophe", RuleOperator.TC_EQUALS, "null")
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withBooleanOperator(RuleBooleanOperator.TC_AND)
                    .withLeftOperand("claim.isFieldChanged(\"Catastrophe\")")
                    .withOperator(RuleOperator.TC_ISTRUE)
                    .withLeftParens(Parentheses.TC_ONELEFT)
                    .withLineNumber(1))
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withBooleanOperator(RuleBooleanOperator.TC_OR)
                    .withLeftOperand(ExpressionFragmentBuilders.forPropertyReference("claim.LossCause", true))
                    .withOperator(RuleOperator.TC_NOTEQUALS)
                    .withRightOperand("claim.LossCause")
                    .withLineNumber(2))
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withBooleanOperator(RuleBooleanOperator.TC_OR)
                    .withLeftOperand(ExpressionFragmentBuilders.forPropertyReference("claim.LossType", true))
                    .withOperator(RuleOperator.TC_NOTEQUALS)
                    .withRightOperand("claim.LossType")
                    .withLineNumber(3))
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withBooleanOperator(RuleBooleanOperator.TC_OR)
                    .withLeftOperand(ExpressionFragmentBuilders.forPropertyReference("claim.LossDate", true))
                    .withOperator(RuleOperator.TC_NOTEQUALS)
                    .withRightOperand("claim.LossDate")
                    .withLineNumber(4))
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withBooleanOperator(RuleBooleanOperator.TC_OR)
                    .withLeftOperand("claim.LossLocation")
                    .withOperator(RuleOperator.TC_NOTEQUALS)
                    .withRightOperand("null")
                    .withLeftParens(Parentheses.TC_ONELEFT)
                    .withLineNumber(5))
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withBooleanOperator(RuleBooleanOperator.TC_AND)
                    .withLeftOperand("claim.LossLocation.isChanged()")
                    .withOperator(RuleOperator.TC_ISTRUE)
                    .withRightParens(Parentheses.TC_TWORIGHT)
                    .withLineNumber(6))
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withBooleanOperator(RuleBooleanOperator.TC_AND)
                    .withLeftOperand("claim.getCatastropheMatchesByZone().length")
                    .withOperator(RuleOperator.TC_GREATERTHAN)
                    .withRightOperand("0")
                    .withLineNumber(7)))
            .addRuleCommandDefinition(new GenerateActivityCommandDefinitionBuilder("catastrophe_review")
                .withAdditionalRestrictions(DuplicateClaimActivityRestriction.NAME)
                .withOrderNumber(0)
                .createCommandDefinition()))
        .createAndCommit()
    isRuleValid(head)
  }

  private static function createSubrogationReferralRule() {
    var head = new ActivityRuleHeadBuilder()
        .withGlobalRuleID("e7fad9c8-efb4-4048-8fd5-d85f8b024523")
        .withSystemId("base-configuration")
        .withStatus(TC_STAGED)
        .withRule(new ActivityRuleBuilder()
            .withName("Subrogation Referral")
            .withDescription("When claim subrogation is escalated, create Subro Referral activities on each subrogation")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_SUBROGATIONITERATIVE)
            .withTriggeringPointKey(TriggeringPointKey.TC_UPDATE)
            .withRuleCondition(new RuleConditionBuilder()
                .addRuleConditionLine("claim.SubrogationSummary", RuleOperator.TC_NOTEQUALS, "null")
                .addRuleConditionLine(ExpressionFragmentBuilders.forPropertyReference("claim.SubrogationSummary.EscalateSubro", true), RuleOperator.TC_NOTEQUALS, ExpressionFragmentBuilders.forCodeExpression("claim.SubrogationSummary.EscalateSubro"))
                .addTrueFalseRuleConditionLine("claim.SubrogationSummary.EscalateSubro", RuleOperator.TC_ISTRUE))
            .addRuleCommandDefinition(new GenerateActivityCommandDefinitionBuilder("subro_check")
                .withSubrogationContextParameter()
                .withAssignedTo(SubrogationOwnerActivityAssigneeLoader.NAME)
                .withAdditionalRestrictions(DuplicateOpenAssigneeActivityRestriction.NAME)
                .withDescription("Subrogation has been referred")
                .withOrderNumber(0)
                .createCommandDefinition())
            .addRuleCommandDefinition(new GenerateHistoryCommandDefinitionBuilder()
                .withSubrogationContextParameter()
                .withType(HistoryType.TC_REFERRED)
                .withDescription("\${subrogation} has been referred and assigned to \${subrogation.AssignedUser}")
                .withRelatedTo(SubrogationRelatedTo.NAME)
                .withOrderNumber(1)
                .createCommandDefinition())
            .addRuleCommandDefinition(new SetFieldCommandDefinitionBuilder()
                .withSubrogationContextParameter()
                .withProperty("claim.SubrogationSummary.SubroReferralDate")
                .withValue("Util.currentDate()")
                .withSetIfNull(false)
                .withOrderNumber(2)
                .createCommandDefinition()))
        .createAndCommit()
    isRuleValid(head)

    var head2 = new ActivityRuleUpdateBuilder(head)
        .withRule(new ActivityRuleBuilder()
            .withName("Subrogation Referral")
            .withDescription("When claim subrogation is escalated, create Subro Referral activities on each subrogation")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_SUBROGATIONITERATIVE)
            .withTriggeringPointKey(TriggeringPointKey.TC_UPDATE)
            .withRuleCondition(new RuleConditionBuilder()
                .addRuleConditionLine("claim.SubrogationSummary", RuleOperator.TC_NOTEQUALS, "null")
                .addRuleConditionLine(ExpressionFragmentBuilders.forPropertyReference("claim.SubrogationSummary.EscalateSubro", true), RuleOperator.TC_NOTEQUALS, ExpressionFragmentBuilders.forCodeExpression("claim.SubrogationSummary.EscalateSubro"))
                .addTrueFalseRuleConditionLine("claim.SubrogationSummary.EscalateSubro", RuleOperator.TC_ISTRUE))
            .addRuleCommandDefinition(new GenerateActivityCommandDefinitionBuilder("subro_check")
                .withSubrogationContextParameter()
                .withAssignedTo(SubrogationOwnerActivityAssigneeLoader.NAME)
                .withAdditionalRestrictions(DuplicateOpenAssigneeActivityRestriction.NAME)
                .withDescription("Subrogation has been referred")
                .withOrderNumber(0)
                .createCommandDefinition())
            .addRuleCommandDefinition(new GenerateHistoryCommandDefinitionBuilder()
                .withSubrogationContextParameter()
                .withType(HistoryType.TC_REFERRED)
                .withDescription("\${subrogation} has been referred and assigned to \${subrogation.AssignedUser}")
                .withRelatedTo(SubrogationRelatedTo.NAME)
                .withOrderNumber(1)
                .createCommandDefinition())
            .addRuleCommandDefinition(new SetFieldCommandDefinitionBuilder()
                .withSubrogationContextParameter()
                .withProperty("claim.SubrogationSummary.SubroReferralDate")
                .withValue("Util.currentDate()")
                .withSetIfNull(false)
                .withOrderNumber(2)
                .createCommandDefinition()))
        .withStatus(TC_STAGED)
        .createAndCommit()
  }

  private static function createCPU31100Rule() {
    var head = new ActivityRuleHeadBuilder()
        .withGlobalRuleID("5d06bfe3-6108-4b1a-bf1b-93076314cd4f")
        .withSystemId("base-configuration")
        .withStatus(TC_STAGED)
        .withRule(new ActivityRuleBuilder()
            .withName("CPU31100 - Class Code Selection")
            .withDescription("For WC claims, remind claim owner to review class code changes")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_CLAIM)
            .withTriggeringPointKey(TriggeringPointKey.TC_UPDATE)
            .withRuleCondition(new RuleConditionBuilder()
                .withRuleConditionType(RuleConditionType.TC_ADVANCED)
                .addRuleConditionLine("claim.LossType", RuleOperator.TC_EQUALS, ExpressionFragmentBuilders.forTypeKeyExpression(LossType.TC_WC))
                .addRuleConditionLine("claim.ClaimWorkComp", RuleOperator.TC_NOTEQUALS, "null")
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withBooleanOperator(RuleBooleanOperator.TC_AND)
                    .withLeftOperand("claim.EmploymentData.ClassCode")
                    .withOperator(RuleOperator.TC_NOTEQUALS)
                    .withRightOperand("null")
                    .withLineNumber(2))
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withBooleanOperator(RuleBooleanOperator.TC_AND)
                    .withLeftOperand("claim.ClaimWorkComp.ClassCodeByLocation")
                    .withOperator(RuleOperator.TC_ISFALSE)
                    .withLineNumber(3))
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withBooleanOperator(RuleBooleanOperator.TC_AND)
                    .withLeftParens(Parentheses.TC_TWOLEFT)
                    .withLeftOperand(ExpressionFragmentBuilders.forPropertyReference("claim.State", true))
                    .withOperator(RuleOperator.TC_EQUALS)
                    .withRightOperand(ExpressionFragmentBuilders.forTypeKeyExpression(ClaimState.TC_DRAFT))
                    .withLineNumber(4))
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withBooleanOperator(RuleBooleanOperator.TC_AND)
                    .withLeftOperand("claim.State")
                    .withOperator(RuleOperator.TC_EQUALS)
                    .withRightOperand(ExpressionFragmentBuilders.forTypeKeyExpression(ClaimState.TC_OPEN))
                    .withRightParens(Parentheses.TC_ONERIGHT)
                    .withLineNumber(5))
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withBooleanOperator(RuleBooleanOperator.TC_OR)
                    .withLeftParens(Parentheses.TC_ONELEFT)
                    .withLeftOperand("claim.State")
                    .withOperator(RuleOperator.TC_NOTEQUALS)
                    .withRightOperand(ExpressionFragmentBuilders.forTypeKeyExpression(ClaimState.TC_DRAFT))
                    .withLineNumber(6))
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withBooleanOperator(RuleBooleanOperator.TC_AND)
                    .withLeftOperand(ExpressionFragmentBuilders.forPropertyReference("claim.ClaimWorkComp.ClassCodeByLocation", true))
                    .withOperator(RuleOperator.TC_NOTEQUALS)
                    .withRightOperand("claim.ClaimWorkComp.ClassCodeByLocation")
                    .withRightParens(Parentheses.TC_TWORIGHT)
                    .withLineNumber(7)))
            .addRuleCommandDefinition(new GenerateActivityCommandDefinitionBuilder("class_code_review")
                .withAdditionalRestrictions(DuplicateOpenClaimActivityRestriction.NAME)
                .withOrderNumber(0)
                .createCommandDefinition()))
            .createAndCommit()
    isRuleValid(head)
  }

  private static function createSubroResponsiblePartyRule() {
    var head = new ActivityRuleHeadBuilder()
        .withGlobalRuleID("4e898748-1b4a-45e2-ab1b-74881922a23e")
        .withSystemId("base-configuration")
        .withStatus(TC_STAGED)
        .withRule(new ActivityRuleBuilder()
            .withName("Subrogation Responsible Party Added")
            .withDescription("When subro responsible party added, create activities for all subro owners")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_SUBROGATIONITERATIVE)
            .withTriggeringPointKey(TriggeringPointKey.TC_UPDATE)
            .withRuleCondition(new RuleConditionBuilder()
                .addRuleConditionLine("claim.SubrogationSummary", RuleOperator.TC_NOTEQUALS, "null")
                .addTrueFalseRuleConditionLine("claim.SubrogationSummary.HasNewResponsibleParty", RuleOperator.TC_ISTRUE))
            .addRuleCommandDefinition(new GenerateActivityCommandDefinitionBuilder("subro_responsible_party_added")
                .withSubrogationContextParameter()
                .withAssignedTo(SubrogationOwnerActivityAssigneeLoader.NAME)
                .withAdditionalRestrictions(DuplicateOpenAssigneeActivityRestriction.NAME)
                .withOrderNumber(0)
                .createCommandDefinition()))
            .createAndCommit()
    isRuleValid(head)
  }

  private static function createSubroReopenedClaimRule() {
    var head = new ActivityRuleHeadBuilder()
        .withGlobalRuleID("21665190-76b9-409b-91d6-204849a72a91")
        .withSystemId("base-configuration")
        .withStatus(TC_STAGED)
        .withRule(new ActivityRuleBuilder()
            .withName("Subrogation Reopened Claim")
            .withDescription("When claim is reopened, if subro was pursued, then create a Subro Claim Reopened activity to remind subro owners of additional subro opportunities")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_SUBROGATIONITERATIVE)
            .withTriggeringPointKey(TriggeringPointKey.TC_UPDATE)
            .withRuleCondition(new RuleConditionBuilder()
                .addRuleConditionLine(ExpressionFragmentBuilders.forPropertyReference("claim.State", true), RuleOperator.TC_EQUALS, ExpressionFragmentBuilders.forCodeExpression("ClaimState.TC_CLOSED"))
                .addRuleConditionLine("claim.State", RuleOperator.TC_EQUALS, "ClaimState.TC_OPEN")
                .addRuleConditionLine("claim.SubrogationSummary", RuleOperator.TC_NOTEQUALS, "null")
                .addRuleConditionLine("subrogation.Status", RuleOperator.TC_EQUALS, "SubrogationStatus.TC_CLOSED")
                .addRuleConditionLine("subrogation.Outcome", RuleOperator.TC_NOTEQUALS, "SubroClosedOutcome.TC_NOTPURSUED"))
            .addRuleCommandDefinition(new GenerateActivityCommandDefinitionBuilder("subro_claim_reopened")
                .withSubrogationContextParameter()
                .withAssignedTo(SubrogationOwnerActivityAssigneeLoader.NAME)
                .withAdditionalRestrictions(DuplicateOpenAssigneeActivityRestriction.NAME)
                .withOrderNumber(0)
                .createCommandDefinition()))
        .createAndCommit()
    isRuleValid(head)
  }

  private static function createSubroSupplementalPaymentRule() {
    /**
     *    1: claim.SubrogationSummary != null
     *    2: AND (( claim.SubrogationSummary.SubrogateIndividualExposures = false
     *    3:          AND claim.SubrogationSummary.ClosedOutcome != SubroClosedOutcome.TC_NOTPURSUED
     *    4:          AND check.Payments CONTAINS payment where
     *  4.1:              ( payment.Supplement = true
     *  4.2:                AND payment.New = true)
     *               )
     *    5:     OR ( claim.SubrogationSummary.Subrogations CONTAINS subrogation where
     *  5.1:          ( subrogation.Exposure != null
     *  5.2:            AND subrogation.ClosedOutcome != SubroClosedOutcome.TC_NOTPURSUED
     *  5.3:            AND check.Payments CONTAINS payment where
     *5.3.1:               ( payment.ReserveLine.Exposure = subrogation.Exposure
     *5.3.2:                 AND payment.Supplement = true
     *5.3.3:                 AND payment.New = true )
     *                )
     *              )
     *            )
     */
    var head = new ActivityRuleHeadBuilder()
        .withGlobalRuleID("076484d1-c171-4dbc-9299-ddf2eef52dfd")
        .withSystemId("base-configuration")
        .withStatus(TC_STAGED)
        .withRule(new ActivityRuleBuilder()
            .withName("Subrogation Supplemental Payment Created")
            .withDescription("For supplemental payments on a closed claim, create subro activities to remind subro owners of additional subro opportunities")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_CHECKSETITERATIVE)
            .withTriggeringPointKey(TriggeringPointKey.TC_UPDATE)
            .withRuleCondition(new RuleConditionBuilder()
                .withRuleConditionType(RuleConditionType.TC_ADVANCED)
                    //Line 1
                .addRuleConditionLine("claim.SubrogationSummary", RuleOperator.TC_NOTEQUALS, "null")
                    //Line 2
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withBooleanOperator(RuleBooleanOperator.TC_AND)
                    .withLineNumber(1)
                    .withLeftParens(Parentheses.TC_TWOLEFT)
                    .withLeftOperand("claim.SubrogationSummary.SubrogateIndividualExposures")
                    .withOperator(RuleOperator.TC_ISFALSE)
                )
                    //Line 3
                .addRuleConditionLine(
                    new RuleConditionLineBuilder()
                        .withLineNumber(2)
                        .withLeftOperand("claim.SubrogationSummary.ClosedOutcome")
                        .withOperator(RuleOperator.TC_NOTEQUALS)
                        .withRightOperand(ExpressionFragmentBuilders.forTypeKeyExpression(SubroClosedOutcome.TC_NOTPURSUED))
                )
                    //Line 4
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withLineNumber(3)
                    .withBooleanOperator(RuleBooleanOperator.TC_AND)
                    .withLeftOperand("check.Payments")
                    .withOperator(RuleOperator.TC_CONTAINS)
                    .withRightOperand(new ContainsExpressionFragmentBuilder()
                        .withAdditionalSymbol("payment")
                        .withRuleCondition(new RuleConditionBuilder()
                            //Line 4.1
                            .addRuleConditionLine("payment.Supplement", RuleOperator.TC_EQUALS, "true")
                            //Line 4.2
                            .addRuleConditionLine("payment.isNewPayment()", RuleOperator.TC_EQUALS, "true")
                        )
                    )
                    .withRightParens(Parentheses.TC_ONERIGHT)
                )
                    /**
                     * OR
                     */
                    //Line 5
                .addRuleConditionLine(new RuleConditionLineBuilder()
                    .withLineNumber(4)
                    .withBooleanOperator(RuleBooleanOperator.TC_OR)
                    .withLeftParens(Parentheses.TC_ONELEFT)
                    .withLeftOperand("claim.SubrogationSummary.Subrogations")
                    .withOperator(RuleOperator.TC_CONTAINS)
                    .withRightOperand(new ContainsExpressionFragmentBuilder()
                        .withAdditionalSymbol("subrogation")
                        .withRuleCondition(new RuleConditionBuilder()
                            //Line 5.1
                            .addRuleConditionLine("subrogation.Exposure", RuleOperator.TC_NOTEQUALS, "null")
                                //Line 5.2
                            .addRuleConditionLine("subrogation.Outcome", RuleOperator.TC_NOTEQUALS, ExpressionFragmentBuilders.forTypeKeyExpression(SubroClosedOutcome.TC_NOTPURSUED))
                                //Line 5.3
                            .addRuleConditionLine(new RuleConditionLineBuilder()
                                .withLineNumber(2)
                                .withLeftOperand("check.Payments")
                                .withOperator(RuleOperator.TC_CONTAINS)
                                .withRightOperand(new ContainsExpressionFragmentBuilder()
                                    .withAdditionalSymbol("payment")
                                    .withRuleCondition(new RuleConditionBuilder()
                                        //Line 5.3.1
                                        .addRuleConditionLine("payment.ReserveLine.Exposure", RuleOperator.TC_EQUALS, "subrogation.Exposure")
                                            //Line 5.3.2
                                        .addRuleConditionLine("payment.Supplement", RuleOperator.TC_EQUALS, "true")
                                            //Line 5.3.3
                                        .addRuleConditionLine("payment.isNewPayment()", RuleOperator.TC_EQUALS, "true")
                                    )
                                )
                            )
                        )
                    )
                    .withRightParens(Parentheses.TC_TWORIGHT)
                )
            )
            .addRuleCommandDefinition(new GenerateActivityCommandDefinitionBuilder("subro_supplemental_payment")
                .withCheckContextParameter()
                .withAssignedTo(UserRoleActivityAssigneeLoader.NAME)
                .withRole(typekey.UserRole.TC_SUBROGATIONOWNER)
                .withAdditionalRestrictions(DuplicateOpenAssigneeActivityRestriction.NAME)
                .withOrderNumber(0)
                .createCommandDefinition()))
        .createAndCommit()
    isRuleValid(head)
  }
}
