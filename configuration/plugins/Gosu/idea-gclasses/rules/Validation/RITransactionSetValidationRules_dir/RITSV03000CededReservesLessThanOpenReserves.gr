package rules.Validation.RITransactionSetValidationRules_dir

uses gw.api.locale.DisplayKey
uses gw.api.financials.FinancialsCalculations
uses gw.api.util.CurrencyUtil
uses java.util.HashSet

@gw.rules.RuleName("RITSV03000 - Ceded Reserves Less Than Open Reserves")
internal class RITSV03000CededReservesLessThanOpenReserves {
  static function doCondition(rITransactionSet : entity.RITransactionSet) : boolean {
    
/*start00rule*/
return true
/*end00rule*/

  }

  static function doAction(rITransactionSet : entity.RITransactionSet, actions : gw.rules.Action) {

/*start00rule*/
var claims = new HashSet<Claim>()

for (rITransaction in rITransactionSet.RITransactions) {
  if (rITransaction typeis RICededReserve) {
    claims.add(rITransaction.Claim)
  }
}

for (claim in claims) {

  var cededReservesUnadjusted = FinancialsCalculations.getRITotalCededReservesNonAdjustments()
        .withClaim(claim)
        .noNulls()
        .Amount
  var cededReservesTotal = FinancialsCalculations.getRIOpenCededReserves()
        .withClaim(claim)
        .noNulls()
        .Amount
  var openReserve = FinancialsCalculations.getSubmittedOpenReserves()
        .withClaim(rITransactionSet.Claim)
        .noNulls()
        .Amount

  if (cededReservesUnadjusted.Amount > 0 and cededReservesUnadjusted > openReserve) {
    var message = DisplayKey.get("Rules.Validation.RITransaction.CalculatedCededReservesMustBeLessThanOpenReserves", 
              CurrencyUtil.renderAsCurrency(cededReservesUnadjusted), 
              CurrencyUtil.renderAsCurrency(openReserve))
    rITransactionSet.warnOrCreateActivity(message)
  }

  if(cededReservesTotal.Amount > 0  and cededReservesTotal > openReserve) {
    var message = DisplayKey.get("Rules.Validation.RITransaction.TotalCededReservesMustBeLessThanOpenReserves", 
              CurrencyUtil.renderAsCurrency(cededReservesTotal),
              CurrencyUtil.renderAsCurrency(openReserve))
    rITransactionSet.warnOrCreateActivity(message)
  }
}
/*end00rule*/

  }
}
