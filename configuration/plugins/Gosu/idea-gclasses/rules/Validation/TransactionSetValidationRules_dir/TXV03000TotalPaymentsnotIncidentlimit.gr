package rules.Validation.TransactionSetValidationRules_dir
uses gw.api.locale.DisplayKey
uses gw.api.financials.FinancialsCalculations
uses gw.api.util.CurrencyUtil
uses gw.financials.CoverageLimitRulesUtil

@gw.rules.RuleName("TXV03000 - Total Payments not > Incident limit")
internal class TXV03000TotalPaymentsnotIncidentlimit {
  static function doCondition(transactionSet : entity.TransactionSet) : boolean {
    
/*start00rule*/
return transactionSet.Subtype == TC_CHECKSET
and transactionSet.New
/* The transactionset.new condition disallows the rule from executing 
 * for all transactions associated with the claim (because we want the 
 * rule to execute only for the new transactions that we are trying to add).
 */
/*end00rule*/

  }

  static function doAction(transactionSet : entity.TransactionSet, actions : gw.rules.Action) {

/*start00rule*/

var claim = transactionSet.Claim

var coverageSet = new java.util.HashSet<Coverage>() // a set of Coverage to aggregate amt for that coverage

/* Set the following warning parameters (warning1 & warning2) to true if you want to throw a
 * warning, but still permit the end-user to continue with the transaction if he/she desires
 * Set to false if you want to block this transaction
 */
var warning1 = false 
var warning2 = true 
var costType = CostType.TC_CLAIMCOST

for (trans in transactionSet.Transactions) {
  if (!trans.New and trans.CostType != costType) {
    continue
  }
  coverageSet.add(trans.Exposure.Coverage)
}

for (coverage in coverageSet) {
  if (not coverage.HasIncidentLimit) {
    continue
  }
  var incidentLimit = coverage.IncidentLimit

  var exposures = claim.Exposures.where( \ e -> e.PrimaryCoverage == coverage.Type)

  var compareInLimitCurrency = CoverageLimitRulesUtil.shouldCompareInReservingCurrency(exposures, costType, incidentLimit.Currency)
  if ( not compareInLimitCurrency ) {
    incidentLimit = incidentLimit.convert( transactionSet.Claim.Currency, java.math.RoundingMode.UP )
  }

  var coveragePaymentsCalc = FinancialsCalculations.getTotalPaymentsIncludingPending()
                          .withClaim(claim)
                          .withCoverageType( coverage.Type )
                          .withCostType( costType )
                          .withTransactionSetAsIfSubmitted( transactionSet )
  var coveragePayments = CoverageLimitRulesUtil.getCalcValueForCompare(
                             coveragePaymentsCalc,
                             incidentLimit.Currency, compareInLimitCurrency)

  var combinedCalc = CoverageLimitRulesUtil.getCommittedAndFutureAndPendingApprovalPaymentsAndReserves()
                          .withClaim(claim)
                          .withCoverageType( coverage.Type )
                          .withCostType( costType )
                          .withTransactionSetAsIfSubmitted( transactionSet )
  var combined = CoverageLimitRulesUtil.getCalcValueForCompare(
                          combinedCalc,
                          incidentLimit.Currency, compareInLimitCurrency)

  if (coveragePayments > incidentLimit) {
    //If Warning1 is set to TRUE, throw a warning, but permit the transaction to go through if the user desires so
    if (warning1 == true) {    
      transactionSet.reject(null, null, TC_PAYMENT, 
        DisplayKey.get("Rules.Validation.Transaction.TotalPaymentsIncludingPendingOnCoverageExceedsIncidentLimitWarning", 
            coverage, CurrencyUtil.renderAsCurrency(coveragePayments), 
            CurrencyUtil.renderAsCurrency(coverage.IncidentLimit), 
            actions.ShortRuleName))
    } else {
      //If Warning1 is set to FALSE, block the transaction from going through
      transactionSet.reject(TC_PAYMENT, 
        DisplayKey.get("Rules.Validation.Transaction.TotalPaymentsIncludingPendingOnCoverageExceedsIncidentLimitError", 
            coverage, CurrencyUtil.renderAsCurrency(coveragePayments), 
            CurrencyUtil.renderAsCurrency(coverage.IncidentLimit), 
            actions.ShortRuleName),
        null, null) 
    }
  }
  else if (combined > incidentLimit) {
    //If Warning2 is set to TRUE, throw a warning, but permit the transaction to go through if the user desires so
    if (warning2 == true) {
      transactionSet.reject(null, null, TC_PAYMENT, 
        DisplayKey.get("Rules.Validation.Transaction.TotalPaymentsIncludingPendingPlusAvailableAndPendingReservesOnCoverageExceedsIncidentLimitWarning", 
            coverage, CurrencyUtil.renderAsCurrency(combined), 
            CurrencyUtil.renderAsCurrency(coverage.IncidentLimit), 
            actions.ShortRuleName))
    } else {
      //If Warning2 is set to FALSE, block the transaction from going through
      transactionSet.reject(TC_PAYMENT,
        DisplayKey.get("Rules.Validation.Transaction.TotalPaymentsIncludingPendingPlusAvailableAndPendingReservesOnCoverageExceedsIncidentLimitError", 
            coverage, CurrencyUtil.renderAsCurrency(combined), 
            CurrencyUtil.renderAsCurrency(coverage.IncidentLimit), 
            actions.ShortRuleName),
        null, null)
    }
  }
}
/*end00rule*/

  }
}
