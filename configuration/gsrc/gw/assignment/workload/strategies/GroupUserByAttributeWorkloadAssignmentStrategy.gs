package gw.assignment.workload.strategies

uses java.util.Set

/**
 * Assignment Strategy for Assignment within a group based on Group-User Workload for Users that match given criteria. 
 */
@Export
public class GroupUserByAttributeWorkloadAssignmentStrategy extends GroupUserWorkloadAssignmentStrategy {

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Members
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  /**
   * User defined criteria used to filter assignee candidates.
   */
  private var _userCriteria : AttributeBasedAssignmentCriteria


  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  public construct(criteria : AttributeBasedAssignmentCriteria) {
    super()
    _userCriteria = criteria
  }

  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  /**
   * This variation of getCandidateUsers selects users based on given UserAssignmentCriteria and places no other
   * further restrictions on potential assignable candidates.
   */
  public override function getCandidateUsers(assignable : Assignable, group : Group, includeSubGroups : boolean) : Set<User> {
    return findCandidateGroupUsersByAttributes(group, includeSubGroups, _userCriteria)
  }

}
