package gw.plugin.policy.impl

uses gw.api.databuilder.AccountSpecialHandlingBuilder
uses gw.api.databuilder.PropertyItemBuilder
uses gw.api.financials.CurrencyAmount
uses gw.api.util.CurrencyUtil
uses gw.sampledata.SampleTravelClaims

uses java.util.ArrayList
uses java.util.Date
uses java.util.HashMap
uses java.util.Map
uses gw.api.upgrade.Coercions

@Export
class PolicySearchPolicyGenerator
{

  private var _baseDate : Date
  private var _accountMap = new HashMap<String,Account>()
  
  // these values are used in the sample data and then again here to maintain
  // a consistent base date that works with the policies in the sample data
  public static var SAMPLE_POLICY_NUMBER : String = "54-123456"
  public static var SAMPLE_POLICY_EFF_DATE_OFFSET : int = 90

  construct() {
    var samplePolicy = gw.api.database.Query.make(entity.Policy).compare("PolicyNumber", Equals, SAMPLE_POLICY_NUMBER).select().FirstResult
    if(samplePolicy != null) {
      _baseDate = samplePolicy.EffectiveDate.addDays(SAMPLE_POLICY_EFF_DATE_OFFSET).trimToMidnight()
    } else {
      _baseDate = Coercions.makeDateFrom("today")
    }
    if(!hasDemoAccounts()) {
      createAccounts()
    }
    //fetch the demo accounts
    fetchDemoAccounts()
  }
  
  private function createAccounts() 
  {
    gw.transaction.Transaction.runWithNewBundle(\ bundle -> {
      
        var farmSupply = new gw.api.databuilder.CompanyBuilder()
            .withPublicId("ab:40000")
            .withLocalizedTaxID()
            //.withTaxID("880-55-0094")
            .withPrimaryPhone(TC_WORK)
            .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("52 Dove Ct.")
            .withCountry(TC_US)
            .withPostalCode("91006")
            .withState(State.TC_CA)
            .withAddressType(TC_HOME)
            .withCity("Riverside"))
            .withWorkPhone("309-384-3636")
            .withName("Worthy Farmer's Supply")
            .create(bundle)
      
        gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40000")
            .withName(farmSupply.Name)
            .withAddressBookUID(farmSupply.PublicID)
            .withTaxID(farmSupply.TaxID))
          .withPublicId("demo_account:8000")
          .withSpecialHandling(new AccountSpecialHandlingBuilder())
          .create(bundle)
          
        var jfinancial = new gw.api.databuilder.CompanyBuilder()
          .withPublicId("ab:40001")
          .withLocalizedTaxID()
          //.withTaxID("197-66-7894")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
              .withAddressLine1("8356 Mountain View Rd.")
              .withCountry(TC_US)
              .withPostalCode("91112")
                .withState(State.TC_CA)
              .withAddressType(TC_HOME)
              .withCity("San Bernadino"))
            .withWorkPhone("309-223-7783")
            .withName("Johnston Financial Advisors")
          .create(bundle)
          
        gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40001")
            .withName(jfinancial.Name)
            .withAddressBookUID(jfinancial.PublicID)
            .withTaxID(jfinancial.TaxID))
          .withPublicId("demo_account:8001")
          .withSpecialHandling(new AccountSpecialHandlingBuilder())
          .create(bundle)
        
        var cilias = new gw.api.databuilder.CompanyBuilder()
            .withPublicId("ab:40002")
            .withLocalizedTaxID()
            //.withTaxID("240-76-7894")
            .withPrimaryPhone(TC_WORK)
            .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("725 Pacific Circle")
            .withCountry(TC_US)
            .withPostalCode("91101")
            .withState(State.TC_CA)
            .withAddressType(TC_HOME)
            .withCity("Long Beach"))
          .withWorkPhone("708-223-4756")
          .withName("Cilia's B&B")
          .create(bundle)
        
         gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40002")
            .withName(cilias.Name)
            .withAddressBookUID(cilias.PublicID)
            .withTaxID(cilias.TaxID))
        .withPublicId("demo_account:8002")
        .withSpecialHandling(new AccountSpecialHandlingBuilder())
        .create(bundle)
        
       var oakFurn = new gw.api.databuilder.CompanyBuilder()
          .withPublicId("ab:40003")
          .withLocalizedTaxID()
          //.withTaxID("660-95-7894")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("908 Angels Landing Rd.")
            .withCountry(TC_US)
            .withPostalCode("91352")
            .withState(State.TC_CA)
            .withAddressType(TC_HOME)
            .withCity("Anaheim"))
          .withWorkPhone("708-223-8700")
          .withName("Solid Oak Furniture")
          .create(bundle)
        
        gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40003")
            .withName(oakFurn.Name)
            .withAddressBookUID(oakFurn.PublicID)
            .withTaxID(oakFurn.TaxID))
        .withPublicId("demo_account:8004")
        .withSpecialHandling(new AccountSpecialHandlingBuilder())
        .create(bundle)
        
       var longRoad = new gw.api.databuilder.CompanyBuilder()
            .withPublicId("ab:40004")
            .withLocalizedTaxID()
            //.withTaxID("166-55-7004")
            .withPrimaryPhone(TC_WORK)
            .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withCounty("Cleveland")
            .withAddressLine1("3150 Old School Rd.")
            .withCountry(TC_US)
            .withPostalCode("28150")
            .withState(State.TC_NC)
            .withAddressType(TC_BUSINESS)
            .withCity("Shelby"))
            .withWorkPhone("704-434-2007")
            .withName("Long Road Trucking Company")
            .create(bundle)
        
        gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40004")
            .withName(longRoad.Name)
            .withAddressBookUID(longRoad.PublicID)
            .withTaxID(longRoad.TaxID))
        .withPublicId("demo_account:8005")
        .withSpecialHandling(new AccountSpecialHandlingBuilder())
        .create(bundle)
        
        var bigMac = new gw.api.databuilder.CompanyBuilder()
            .withPublicId("ab:40005")
            .withLocalizedTaxID()
            //.withTaxID("170-75-7494")
            .withWorkPhone("510-687-5963")
            .withName("Big Mac Trucking")
            .create(bundle)
        
        gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40005")
            .withName(bigMac.Name)
            .withAddressBookUID(bigMac.PublicID)
            .withTaxID(bigMac.TaxID))
          .withPublicId("demo_account:8006")
          .withSpecialHandling(new AccountSpecialHandlingBuilder())
          .create(bundle)
        
        var abc = new gw.api.databuilder.CompanyBuilder()
          .withPublicId("ab:40006")
          .withLocalizedTaxID()
          //.withTaxID("424-95-7894")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("1247 Fair Oaks Ave")
            .withCountry(TC_US)
            .withPostalCode("91101")
            .withState(State.TC_CA)
            .withAddressType(TC_BUSINESS)
            .withCity("Pasadena"))
          .withWorkPhone("847-279-3401")
          .withName("ABC Rentals")
          .create(bundle)  
                  
        gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40006")
            .withName(abc.Name)
            .withAddressBookUID(abc.PublicID)
            .withTaxID(abc.TaxID))
         .withPublicId("demo_account:8007")
         .withSpecialHandling(new AccountSpecialHandlingBuilder())
         .create(bundle)
         
        var bison = new gw.api.databuilder.CompanyBuilder()
          .withPublicId("ab:40007")
          .withLocalizedTaxID()
          //.withTaxID("908-77-4327")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withCounty("Cleveland")
            .withAddressLine1("3160 Juniper Rd.")
            .withCountry(TC_US)
            .withPostalCode("28150")
            .withState(State.TC_NC)
            .withAddressType(TC_BUSINESS)
            .withCity("Shelby"))
          .withWorkPhone("704-434-2008")
          .withName("Bison Trucking Company")
          .create(bundle)
        
        gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40007")
            .withName(bison.Name)
            .withAddressBookUID(bison.PublicID)
            .withTaxID(bison.TaxID))
         .withPublicId("demo_account:8009")
         .withSpecialHandling(new AccountSpecialHandlingBuilder())
         .create(bundle)
         
        var lennar = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("ab:40008")
        .withPrimaryPhone(TC_WORK)
        .withLocalizedTaxID()
        //.withTaxID("787-55-8996")
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("253 McAfee Ct.")
          .withCountry(TC_US)
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Thousand Oaks"))
        .withWorkPhone("818-446-1206")
        .withName("Lennar Construction")
        .create(bundle)
        
         gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40008")
            .withName(lennar.Name)
            .withAddressBookUID(lennar.PublicID)
            .withTaxID(lennar.TaxID))
         .withPublicId("demo_account:8010")
         .withSpecialHandling(new AccountSpecialHandlingBuilder())
         .create(bundle)
         
         var georgeTown = new gw.api.databuilder.CompanyBuilder()
          .withPublicId("ab:40020")
          .withLocalizedTaxID()
          //.withTaxID("889-44-1245")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("1075 Aspen Lane")
            .withCountry(TC_US)
            .withPostalCode("91357")
            .withState(State.TC_CA)
            .withAddressType(TC_HOME)
            .withCity("Diamond View"))
          .withWorkPhone("818-252-2546")
          .withName("Georgetown Roofing")
          .create(bundle)
          
         gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40020")
            .withName(georgeTown.Name)
            .withAddressBookUID(georgeTown.PublicID)
            .withTaxID(georgeTown.TaxID))
         .withPublicId("demo_account:8011")
         .withSpecialHandling(new AccountSpecialHandlingBuilder())
         .create(bundle)
         
         var fitRight = new gw.api.databuilder.CompanyBuilder()
          .withPublicId("ab:40021")
          .withLocalizedTaxID()
          .withTaxID("226-66-8754")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("253 McAfee Ct.")
            .withCountry(TC_US)
            .withPostalCode("91145")
            .withState(State.TC_CA)
            .withAddressType(TC_HOME)
            .withCity("Thousand Oaks"))
          .withWorkPhone("213-475-9465")
          .withName("FitRight Manufacturing")
          .create(bundle)
          
        gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40021")
            .withName(fitRight.Name)
            .withAddressBookUID(fitRight.PublicID)
            .withTaxID(fitRight.TaxID))
         .withPublicId("demo_account:8012")
         .withSpecialHandling(new AccountSpecialHandlingBuilder())
         .create(bundle)
         
        var citi = new gw.api.databuilder.CompanyBuilder()
          .withName("Citi Mortgage")
          .withPublicId("ab:40022")
          .withLocalizedTaxID()
          //.withTaxID("299-55-5125")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("2000 Park Avenue")
            .withCountry(TC_US)
            .withPostalCode("61571")
            .withState(State.TC_IL)
            .withAddressType(TC_BUSINESS)
            .withCity("Washington"))
          .withWorkPhone("626-473-9576")
          .create(bundle)
        
        gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40022")
            .withName(citi.Name)
            .withAddressBookUID(citi.PublicID)
            .withTaxID(citi.TaxID))
         .withPublicId("demo_account:8013")
         .withSpecialHandling(new AccountSpecialHandlingBuilder())
         .create(bundle)
         
        var hoyle = new gw.api.databuilder.CompanyBuilder()
          .withPublicId("ab:40023")
          .withLocalizedTaxID()
          //.withTaxID("121-22-5541")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("1248 Fair Oaks Ave")
            .withCountry(TC_US)
            .withPostalCode("91101")
            .withState(State.TC_CA)
            .withAddressType(TC_BUSINESS)
            .withCity("Pasadena"))
          .withWorkPhone("847-279-3402")
          .withName("Hoyle Bicycles")
          .create(bundle)
        
        gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40023")
            .withName(hoyle.Name)
            .withAddressBookUID(hoyle.PublicID)
            .withTaxID(hoyle.TaxID))
         .withPublicId("demo_account:8014")
         .withSpecialHandling(new AccountSpecialHandlingBuilder())
         .create(bundle)
         
        var hardhat = new gw.api.databuilder.CompanyBuilder()
          .withPublicId("ab:40024")
          .withLocalizedTaxID()
          //.withTaxID("444-55-6667")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("1245 Fair Oaks Ave")
            .withCountry(TC_US)
            .withPostalCode("91101")
            .withState(State.TC_CA)
            .withAddressType(TC_BUSINESS)
            .withCity("Pasadena"))
          .withWorkPhone("847-279-3399")
          .withName("Hardhat Construction")
          .create(bundle)
        
        gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40024")
            .withName(hardhat.Name)
            .withAddressBookUID(hardhat.PublicID)
            .withTaxID(hardhat.TaxID))
         .withPublicId("demo_account:8015")
         .withSpecialHandling(new AccountSpecialHandlingBuilder())
         .create(bundle)
        
       var capital = new gw.api.databuilder.CompanyBuilder()
          .withPublicId("ab:40025")
          .withLocalizedTaxID()
          //.withTaxID("998-22-3356")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("1246 Fair Oaks Ave")
            .withCountry(TC_US)
            .withPostalCode("91101")
            .withState(State.TC_CA)
            .withAddressType(TC_BUSINESS)
            .withCity("Pasadena"))
          .withWorkPhone("847-279-3400")
          .withName("Capital Investment Inc")
          .create(bundle)
          
        gw.api.databuilder.AccountBuilder
          .forHolder(new gw.api.databuilder.CompanyBuilder()
            .withPublicId("demo_acct:40025")
            .withName(capital.Name)
            .withAddressBookUID(capital.PublicID)
            .withTaxID(capital.TaxID))
         .withPublicId("demo_account:8016")
         .withSpecialHandling(new AccountSpecialHandlingBuilder())
         .create(bundle)
    })
  }
  
  private function hasDemoAccounts() : boolean {
    var a = gw.api.database.Query.make(entity.Account).select().firstWhere(\ a -> {
      return a.PublicID.startsWith("demo_account")
    })
    return a!=null
  }
  
  private function fetchDemoAccounts() {
    gw.api.database.Query.make(entity.Account).select().each(\ a -> {
      _accountMap.put(a.PublicID, a)
    })
  }
  
  function generatePolicies( ) : Policy[] {
    var bundle = gw.transaction.Transaction.newBundle()
    var policies = new ArrayList<Policy>()
    var policyLocationMap = new HashMap<String, PolicyLocation>();
    var contactMap = new HashMap<String, Contact>();
    var addressMap = new HashMap<String, Address>();

    runChunk( \->
    {
      contactMap.put("demo_sample:3022", new gw.api.databuilder.PersonBuilder()
        .withLastName("Newton")
        .withFirstName("Ray")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("287 Kensington Rd. #1A")
          .withCountry(TC_US)
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("South Pasadena"))
        .withWorkPhone("818-446-1206")
        .withTaxID("123-45-6789")
        .create(bundle))

      contactMap.put("demo_sample:3032", new gw.api.databuilder.PersonBuilder()
        .withLastName("Newton")
        .withFirstName("Stan")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("8356 Mountain View Rd.")
          .withCountry(TC_US)
          .withPostalCode("91112")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("San Bernadino"))
        .withWorkPhone("818-446-1206")
        .withTaxID("123-45-6790")
        .create(bundle))

      contactMap.put("demo_sample:17", new gw.api.databuilder.PersonBuilder()
        .withLastName("Egertson")
        .withFirstName("Karen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("908 Angels Landing Rd.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Anaheim"))
        .withWorkPhone("213-457-6378")
        .create(bundle))

      contactMap.put("demo_sample:1001", new gw.api.databuilder.PersonBuilder()
        .withLastName("Newton")
        .withFirstName("Brian")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("867 Mann Ave.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Alhambra"))
        .withWorkPhone("818-446-1206")
        .create(bundle))

      policies.add(new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withAccount("Account 1")
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(_baseDate.addDays(-SAMPLE_POLICY_EFF_DATE_OFFSET))
          .withStatus(TC_INFORCE)
          .withPolicyNumber(SAMPLE_POLICY_NUMBER)
          .withTotalProperties(0)
          .withPolicyType(TC_PERSONALAUTO)
          .withTotalVehicles(2)
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Towing and Labor Costs Coverage")
          .withFormNumber("PP 03 03 "))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Extended Non-Owned Coverage For Named Individual")
          .withFormNumber("PP 03 06"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Coverage For Excess Sound Reproducing Equipment, Audio, Visual & Data Electronic Equipment & Tapes, Records, Discs & Other Media")
          .withFormNumber("PP 03 13"))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(1)
          .withVehicle(new gw.api.databuilder.VehicleBuilder()
            .withYear(1997)
            .withLicensePlate("1HGJ465")
            .withMake("Saturn")
            .withState(TC_CA)
            .withModel("SL")
            .withVin("1GV234TV347463345"))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(15000bd.ofDefaultCurrency())
              .withType(TC_PACOLLISIONCOV)
              .withDeductible(500bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(10000bd.ofDefaultCurrency())
              .withType(TC_PACOMPREHENSIVECOV)
              .withDeductible(500bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(30000bd.ofDefaultCurrency())
              .withType(TC_PALIABILITYCOV)
              .withExposureLimit(15000bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
              .withIncidentLimit(500bd.ofDefaultCurrency())
              .withType(TC_PAMEDPAYCOV)))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(2)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1996)
          .withLicensePlate("2GDH967")
          .withMake("Toyota")
          .withState(TC_CA)
          .withModel("Corolla")
          .withVin("3DGF78575GD892534"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(10000bd.ofDefaultCurrency())
          .withType(TC_PACOLLISIONCOV)
          .withDeductible(500bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(5000bd.ofDefaultCurrency())
          .withType(TC_PACOMPREHENSIVECOV)
          .withDeductible(500bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(150000bd.ofDefaultCurrency())
          .withType(TC_PALIABILITYCOV)
          .withExposureLimit(75000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(500bd.ofDefaultCurrency())
          .withType(TC_PAMEDPAYCOV)))
        .withContactInRole(contactMap.get("demo_sample:3022"), TC_INSURED)
        .withContactInRole(contactMap.get("demo_sample:17"), TC_AGENT)
        .withContactInRole(contactMap.get("demo_sample:3032"), TC_COVEREDPARTY)
        .withContactInRole(contactMap.get("demo_sample:1001"), TC_EXCLUDEDPARTY)
        .create(bundle))
    } )

    runChunk( \->
    {
      contactMap.put("demo_sample:10", new gw.api.databuilder.PersonBuilder()
        .withLastName("Robertson")
        .withFirstName("Allen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("4263 Live Oak Blvd.")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("San Gabriel"))
        .withWorkPhone("213-475-9465")
        .create(bundle))

      contactMap.put("demo_sample:10012", new gw.api.databuilder.PersonBuilder()
        .withLastName("Egertson")
        .withFirstName("Karen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("908 Angels Landing Rd.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Anaheim"))
        .withWorkPhone("213-457-6378")
        .create(bundle))

      contactMap.put("demo_sample:503", new gw.api.databuilder.PersonBuilder()
        .withLastName("Henderson")
        .withFirstName("Bill")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("345 Fir Lane")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("La Canada"))
        .withWorkPhone("213-457-6378")
        .create(bundle))

      contactMap.put("demo_sample:502", new gw.api.databuilder.PersonBuilder()
        .withLastName("Robertson")
        .withFirstName("Dan")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1243 Fair Oaks Ave")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Pasadena"))
        .withWorkPhone("619-275-2346")
        .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("54-253465")
          .withTotalProperties(0)
          .withPolicyType(TC_PERSONALAUTO)
          .withTotalVehicles(2)
          .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(1)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1997)
          .withLicensePlate("1HGJ465")
          .withMake("Saturn")
          .withState(TC_CA)
          .withModel("SL")
          .withVin("1GV234TV347463345")))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(2)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1996)
          .withLicensePlate("2GDH967")
          .withMake("Toyota")
          .withState(Jurisdiction.TC_CA)
          .withModel("Corolla")
          .withVin("3DGF78575GD892534")))
        .withContactInRole(contactMap.get("demo_sample:10"), TC_INSURED)
        .withContactInRole(contactMap.get("demo_sample:10012"), TC_AGENT)
        .withContactInRole(contactMap.get("demo_sample:502"), TC_COVEREDPARTY)
        .withContactInRole(contactMap.get("demo_sample:503"), TC_EXCLUDEDPARTY)
        .create(bundle))
    } )

    runChunk( \->
    {
      contactMap.put("demo_sample:3024", new gw.api.databuilder.PersonBuilder()
        .withLastName("Farley")
        .withFirstName("Robert")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("503 2nd Ave.")
          .withCountry(TC_US)
          .withPostalCode("92101")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("San Diego"))
        .withWorkPhone("619-275-2346")
        .create(bundle))

      contactMap.put("demo_sample:10011", new gw.api.databuilder.PersonBuilder()
        .withLastName("Egertson")
        .withFirstName("Karen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("908 Angels Landing Rd.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Anaheim"))
        .withWorkPhone("213-457-6378")
        .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withAccount("Account 1")
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("54-586734")
          .withTotalProperties(0)
          .withPolicyType(TC_PERSONALAUTO)
          .withTotalVehicles(1)
          .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(1)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2002)
          .withLicensePlate("2GDH967")
          .withMake("Pontiac")
          .withState(Jurisdiction.TC_CA)
          .withModel("Grand Prix")
          .withVin("3DGF78575GD891525"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(20000bd.ofDefaultCurrency())
          .withType(TC_PACOLLISIONCOV)
          .withDeductible(0bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(20000bd.ofDefaultCurrency())
          .withType(TC_PACOMPREHENSIVECOV)
          .withDeductible(0bd.ofDefaultCurrency()))
        .withCoverage(new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(300000bd.ofDefaultCurrency())
          .withType(TC_PALIABILITYCOV)
          .withExposureLimit(150000bd.ofDefaultCurrency()))
        .withCoverage(new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(1000bd.ofDefaultCurrency())
          .withType(CoverageType.TC_PATOWINGLABORCOV))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(1000bd.ofDefaultCurrency())
          .withType(TC_PAMEDPAYCOV)))
        .withContactInRole(contactMap.get("demo_sample:3024"), TC_INSURED)
        .withContactInRole(contactMap.get("demo_sample:10011"), TC_AGENT)
        .create(bundle))
    } )

    runChunk( \->
    {
      contactMap.put("demo_sample:4007", new gw.api.databuilder.CompanyBuilder()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("52 Dove Ct.")
          .withCountry(TC_US)
          .withPostalCode("91006")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Riverside"))
        .withWorkPhone("309-384-3636")
        .withName("Worthy Farmer's Supply")
        .create(bundle))

      contactMap.put("demo_sample:10179", new gw.api.databuilder.PersonBuilder()
        .withLastName("Caron")
        .withFirstName("Jim")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("255 Alabama St.")
          .withCountry(TC_US)
          .withPostalCode("60606")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Chicago"))
        .withWorkPhone("312-334-2525")
        .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("23-502011")
          .withTotalProperties(1)
          .withPolicyType(TC_COMMERCIALPROPERTY)
          .withTotalVehicles(0)
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Additional Building Property")
          .withFormNumber("CP 14 15 "))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Flood Coverage Endorsement")
          .withFormNumber("CP 10 65 "))
        .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
          .withRUNumber(1)
          .withPolicyLocation( new gw.api.databuilder.PolicyLocationBuilder()
            .withAddress( new gw.api.databuilder.AddressBuilder()
              .withAddressLine1("2103 Veterans Pkwy.")
              .withCountry(TC_US)
              .withPostalCode("61704")
              .withState(State.TC_IL)
              .withAddressType(TC_BUSINESS)
              .withCity("Bloomington")))
          .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
            .withIncidentLimit(250000bd.ofDefaultCurrency())
            .withType(TC_CPBLDGCOV)
            .withDeductible(2500bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
            .withIncidentLimit(50000bd.ofDefaultCurrency())
            .withType(TC_CPBPPCOV)
            .withDeductible(2500bd.ofDefaultCurrency()))
          .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
            .withIncidentLimit(1000000bd.ofDefaultCurrency())
            .withType(TC_CPBLDGEXTRAEXPENSECOV)
            .withDeductible(10000bd.ofDefaultCurrency())))
        .withPolicyAccount(_accountMap.get("demo_account:8000"))
        .withContactInRole(contactMap.get("demo_sample:4007"), TC_INSURED)
        .withContactInRole(contactMap.get("demo_sample:10179"), TC_AGENT)
        .create(bundle))

    } )

    runChunk( \->
    {
      contactMap.put("demo_sample:4008", new gw.api.databuilder.CompanyBuilder()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("8356 Mountain View Rd.")
          .withCountry(TC_US)
          .withPostalCode("91112")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("San Bernadino"))
        .withWorkPhone("309-223-7783")
        .withName("Johnston Financial Advisors")
        .create(bundle))

      contactMap.put("demo_sample:10180", new gw.api.databuilder.PersonBuilder()
        .withLastName("Caron")
        .withFirstName("Jim")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("255 Alabama St.")
          .withCountry(TC_US)
          .withPostalCode("60606")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Chicago"))
        .withWorkPhone("312-334-2525")
        .create(bundle))


      addressMap.put("demo_sample:2012", new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("1010 S. Main St.")
        .withCountry(TC_US)
        .withPostalCode("61761")
        .withState(State.TC_IL)
        .withAddressType(TC_BUSINESS)
        .withCity("Normal")
      .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("23-502012")
          .withTotalProperties(1)
          .withPolicyType(TC_COMMERCIALPROPERTY)
          .withTotalVehicles(0)
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(1)
            .withPolicyLocation( new gw.api.databuilder.PolicyLocationBuilder()
              .withAddress(addressMap.get("demo_sample:2012")))
            .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(3000000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGCOV)
              .withDeductible(10000bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(500000bd.ofDefaultCurrency())
              .withType(TC_CPBPPCOV)
              .withDeductible(5000bd.ofDefaultCurrency()))
             .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
                 .withExposureLimit(250000bd.ofDefaultCurrency())
                 .withType(TC_IMSIGNCOV)
                 .withDeductible(2500bd.ofDefaultCurrency())))
          .withRiskUnit(new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(2)
            .withPolicyLocation( new gw.api.databuilder.PolicyLocationBuilder()
              .withAddress(addressMap.get("demo_sample:2012")))
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(250000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGEXTRAEXPENSECOV)
              .withDeductible(2500bd.ofDefaultCurrency())))
          .withRiskUnit(new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(3)
            .withPolicyLocation( new gw.api.databuilder.PolicyLocationBuilder()
              .withAddress(addressMap.get("demo_sample:2012")))
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(1000000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGBUSINCOMECOV)
              .withDeductible(10000bd.ofDefaultCurrency())))
          .withPolicyAccount(_accountMap.get("demo_account:8001"))
          .withContactInRole(contactMap.get("demo_sample:4008"), TC_INSURED)
          .withContactInRole(contactMap.get("demo_sample:10180"), TC_AGENT)
        .create(bundle))
    } )

    runChunk( \->
    {
      contactMap.put("demo_sample:4009", new gw.api.databuilder.CompanyBuilder()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("725 Pacific Circle")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Long Beach"))
        .withWorkPhone("708-223-4756")
        .withName("Cilia's B&B")
        .create(bundle))

      contactMap.put("demo_sample:10189", new gw.api.databuilder.PersonBuilder()
        .withLastName("Caron")
        .withFirstName("Jim")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("255 Alabama St.")
          .withCountry(TC_US)
          .withPostalCode("60606")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Chicago"))
        .withWorkPhone("312-334-2525")
        .create(bundle))

      contactMap.put("demo_sample:2029", new gw.api.databuilder.CompanyBuilder()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress(addressMap.get("sample:2029_2029"))
        .withWorkPhone("309-234-9876")
        .withName("Comerica Bank")
        .create(bundle))

      contactMap.put("demo_sample:2030", new gw.api.databuilder.CompanyBuilder()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress(addressMap.get("sample:2030_2030"))
        .withWorkPhone("309-234-9876")
        .withName("Union Bank of California")
        .create(bundle))
        
      var policyLoc = new gw.api.databuilder.PolicyLocationBuilder()
              .withAddress( new gw.api.databuilder.AddressBuilder()
                .withAddressLine1("2002 East North Ave.")
                .withCountry(TC_US)
                .withPostalCode("60160")
                .withState(State.TC_IL)
                .withAddressType(TC_BUSINESS)
                .withCity("Melrose Park"))
              .withLienholder(new gw.api.databuilder.PropertyOwnerBuilder().withLienholder(contactMap.get("demo_sample:2029")))
              .withLienholder(new gw.api.databuilder.PropertyOwnerBuilder().withLienholder(contactMap.get("demo_sample:2030")))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("23-502021")
          .withTotalProperties(1)
          .withPolicyType(TC_COMMERCIALPROPERTY)
          .withTotalVehicles(0)
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Additional Building Property")
            .withFormNumber("CP 14 15 "))
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Flood Coverage Endorsement")
            .withFormNumber("CP 10 65 "))
            .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(1)
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(3500000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGCOV)
              .withDeductible(10000bd.ofDefaultCurrency()))
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(2450000bd.ofDefaultCurrency())
              .withType(TC_CPBPPCOV)
              .withDeductible(10000bd.ofDefaultCurrency()))
            .withPolicyLocation( policyLoc))
          .withRiskUnit(new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(2)
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(50000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGEXTRAEXPENSECOV)
              .withDeductible(5000bd.ofDefaultCurrency()))
            .withPolicyLocation( policyLoc))
          .withPolicyAccount(_accountMap.get("demo_account:8002"))
          .withContactInRole(contactMap.get("demo_sample:4009"), TC_INSURED)
          .withContactInRole(contactMap.get("demo_sample:10189"), TC_AGENT)
        .create(bundle))

    } )

    runChunk( \->
    {
      contactMap.put("demo_sample:4010", new gw.api.databuilder.CompanyBuilder()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("908 Angels Landing Rd.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Anaheim"))
        .withWorkPhone("708-223-8700")
        .withName("Solid Oak Furniture")
        .create(bundle))

      contactMap.put("demo_sample:10190", new gw.api.databuilder.PersonBuilder()
        .withLastName("Caron")
        .withFirstName("Jim")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("255 Alabama St.")
          .withCountry(TC_US)
          .withPostalCode("60606")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Chicago"))
        .withWorkPhone("312-334-2525")
        .create(bundle))

      addressMap.put("demo_sample:2022", new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("3232 Brooklyn Drive")
        .withCountry(TC_US)
        .withPostalCode("60706")
        .withState(State.TC_IL)
        .withAddressType(TC_BUSINESS)
        .withCity("Norridge")
      .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("23-502022")
          .withTotalProperties(1)
          .withPolicyType(TC_COMMERCIALPROPERTY)
          .withTotalVehicles(0)
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
          .withRUNumber(1)
          .withPolicyLocation( new gw.api.databuilder.PolicyLocationBuilder()
          .withAddress(addressMap.get("demo_sample:2022"))
        .withHighValueItem( new gw.api.databuilder.PropertyItemBuilder()
          .withAppraisedValue(5000bd.ofDefaultCurrency())
          .withDescription("5 Desktop Computers"))
        .withHighValueItem( new gw.api.databuilder.PropertyItemBuilder()
          .withAppraisedValue(2500bd.ofDefaultCurrency())
          .withDescription("2 Laptops"))
        .withHighValueItem( new gw.api.databuilder.PropertyItemBuilder()
          .withAppraisedValue(500bd.ofDefaultCurrency())
          .withDescription("1 Projector"))
        .withHighValueItem( new gw.api.databuilder.PropertyItemBuilder()
          .withAppraisedValue(200bd.ofDefaultCurrency())
          .withDescription("1 TV"))))
        .withPolicyAccount(_accountMap.get("demo_account:8004"))
        .withContactInRole(contactMap.get("demo_sample:4010"), TC_INSURED)
        .withContactInRole(contactMap.get("demo_sample:10190"), TC_AGENT)
        .create(bundle))

    } )

    runChunk( \->
    {
      addressMap.put("demo_sample:2014", new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("425 Madison St.")
        .withCountry(TC_US)
        .withPostalCode("60606")
        .withState(State.TC_IL)
        .withAddressType(TC_BUSINESS)
        .withCity("Chicago")
        .create(bundle))      

      contactMap.put("demo_sample:10195", new gw.api.databuilder.PersonBuilder()
        .withLastName("Egertson")
        .withFirstName("Karen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("908 Angels Landing Rd.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Anaheim"))
        .withWorkPhone("213-457-6378")
        .create(bundle))

      contactMap.put("demo_sample:10194", new gw.api.databuilder.PersonBuilder()
        .withLastName("Darion")
        .withFirstName("Ken")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress(addressMap.get("demo_sample:2014"))
        .withWorkPhone("626-473-9576")
        .create(bundle))

      contactMap.put("demo_sample:2026", new gw.api.databuilder.CompanyBuilder()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("55 California St")
          .withCountry(TC_US)
          .withPostalCode("61571")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Washington"))
        .withWorkPhone("309-234-9876")
        .withName("GMAC")
        .create(bundle))

      contactMap.put("demo_sample:2027", new gw.api.databuilder.CompanyBuilder()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("2000 Park Avenue")
          .withCountry(TC_US)
          .withPostalCode("61571")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Washington"))
        .withWorkPhone("309-234-9876")
        .withName("Citi Mortgage")
        .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("53-235675")
          .withTotalProperties(1)
          .withPolicyType(TC_HOMEOWNERS)
          .withTotalVehicles(0)
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(1)
            .withPolicyLocation( new gw.api.databuilder.PolicyLocationBuilder()
              .withAddress(addressMap.get("demo_sample:2014"))
              .withLienholder(new gw.api.databuilder.PropertyOwnerBuilder()
                .withLienholder(contactMap.get("demo_sample:2026"))
                .withOwnerType(TC_PARTIAL_OWNER))
              .withLienholder(new gw.api.databuilder.PropertyOwnerBuilder()
                .withLienholder(contactMap.get("demo_sample:2027"))
                .withOwnerType(TC_PARTIAL_OWNER))
              .withHighValueItem(new PropertyItemBuilder()
                .withDescription("Wide Screen TV")
                .withAppraisedValue(3250bd.ofDefaultCurrency()))
              .withHighValueItem(new PropertyItemBuilder()
                .withDescription("Grandfather Clock")
                .withAppraisedValue(1725bd.ofDefaultCurrency())))
              .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
                .withType(TC_HODW_DWELLING_COV_HOE)
                .withIncidentLimit(750000bd.ofDefaultCurrency())
                .withExposureLimit(500000bd.ofDefaultCurrency()))
              .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
                .withType(TC_HODW_OTHER_STRUCTURES_HOE)
                .withIncidentLimit(100000bd.ofDefaultCurrency())
                .withExposureLimit(75000bd.ofDefaultCurrency()))
              .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
                .withType(TC_HODW_PERSONAL_PROPERTY_HOE)
                .withIncidentLimit(75000bd.ofDefaultCurrency())
                .withExposureLimit(50000bd.ofDefaultCurrency()))
              .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
                .withType(TC_HOLI_PERSONAL_LIABILITY_HOE)
                .withIncidentLimit(800000bd.ofDefaultCurrency())
                .withExposureLimit(600000bd.ofDefaultCurrency()))
              .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
                .withType(TC_HOLI_MED_PAY_HOE)
                .withIncidentLimit(500000bd.ofDefaultCurrency())
                .withExposureLimit(250000bd.ofDefaultCurrency()))
              .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
                .withType(TC_HODW_LOSS_OF_USE_HOE)
                .withIncidentLimit(50000bd.ofDefaultCurrency())
                .withExposureLimit(50000bd.ofDefaultCurrency())))
          .withContactInRole(contactMap.get("demo_sample:10195"), TC_AGENT)
          .withContactInRole(contactMap.get("demo_sample:10194"), TC_INSURED)
          .create(bundle))
    } )

    runChunk( \->
    {
      contactMap.put("demo_sample:4011", new gw.api.databuilder.CompanyBuilder()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("253 McAfee Ct.")
          .withCountry(TC_US)
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Thousand Oaks"))
        .withWorkPhone("818-446-1206")
        .withName("Lennar Construction")
        .create(bundle))

      contactMap.put("demo_sample:501", new gw.api.databuilder.PersonBuilder()
        .withLastName("Albee")
        .withFirstName("Jennifer")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("354 Cactus Ln")
          .withCountry(TC_US)
          .withPostalCode("85716")
          .withState(State.TC_AZ)
          .withAddressType(TC_HOME)
          .withCity("Tucson"))
        .withWorkPhone("818-446-1206")
        .create(bundle))

      var classCode = new gw.api.databuilder.ClassCodeBuilder()
        .withCode("881001")
        .create(bundle)

//      var employmentData = new gw.api.databuilder.EmploymentDataBuilder()
//        .withPayPeriod("monthly")
//        .withOccupation("construction")
//        .withPaidFull(true)
//        .withHireState("CA")
//        .withLastWorkedDate(_baseDate.addDays(-32))
//        .withWageAmount(750)
//        .withEmploymentStatus("fulltime")
//        .withClassCode(classCode)
//        .withInjuryStartTime(DateUtil.currentDate().Time as java.util.Date)
//        .withNumDaysWorked(5)
//        .withNumHoursWorked(8)
//        .withWagePaymentCont(false)
//        .withHireDate(_baseDate.addDays(-3379))
//        .create(bundle)


      addressMap.put("demo_sample:1022", new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("846 Yount Ln.")
        .withCountry(TC_US)
        .withPostalCode("91357")
        .withState(State.TC_CA)
        .withAddressType(TC_BUSINESS)
        .withCity("Hollywood")
      .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_WC)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withWCStates("CA, NV")
          .withPolicyNumber("34-123436")
          .withTotalProperties(1)
          .withPolicyType(TC_WORKERSCOMP)
          .withTotalVehicles(0)
          .withClassCode( new gw.api.databuilder.ClassCodeBuilder()
          .withCode("800001")
          .withDescription("Clerical"))
        .withClassCode( new gw.api.databuilder.ClassCodeBuilder()
          .withCode("800002")
          .withDescription("Janitorial"))
        .withClassCode( new gw.api.databuilder.ClassCodeBuilder()
          .withCode("800003")
          .withDescription("Construction"))
        .withClassCode(classCode)
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Labor Contractor Endorsement")
          .withFormNumber("WC 00 03 20 A"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Employers Liability Coverage Endorsement ")
          .withFormNumber("WC 00 03 03 B"))
        .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
          .withIncidentLimit(100000bd.ofDefaultCurrency())
          .withType(TC_WCEMPLIABCOV)
          .withNotes("Bodily Injury By Accident")
          .withDeductible(10000bd.ofDefaultCurrency()))
        .withCoverage(new gw.api.databuilder.PolicyCoverageBuilder()
          .withIncidentLimit(500000bd.ofDefaultCurrency())
          .withType(TC_WCEMPLIABCOV)
          .withNotes("Bodily Injury By Disease for Policy")
          .withDeductible(10000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
          .withIncidentLimit(100000bd.ofDefaultCurrency())
          .withType(TC_WCEMPLIABCOV)
          .withNotes("Bodily Injury By Disease per Employee")
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
          .withRUNumber(1)
          .withPolicyLocation( new gw.api.databuilder.PolicyLocationBuilder()
          .withAddress(addressMap.get("demo_sample:1022"))))
        .withContactInRole(contactMap.get("demo_sample:4011"), TC_INSURED)
        .withContactInRole(contactMap.get("demo_sample:501"), TC_AGENT)
        .withPolicyAccount(_accountMap["demo_account:8010"])
        .create(bundle))

    } )

    runChunk( \->
    {
      contactMap.put("demo_sample:4012", new gw.api.databuilder.CompanyBuilder()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1075 Aspen Lane")
          .withCountry(TC_US)
          .withPostalCode("91357")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Diamond View"))
        .withWorkPhone("818-252-2546")
        .withName("Georgetown Roofing")
        .create(bundle))

      contactMap.put("demo_sample:10045", new gw.api.databuilder.PersonBuilder()
        .withLastName("Albee")
        .withFirstName("Jennifer")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("354 Cactus Ln")
          .withCountry(TC_US)
          .withPostalCode("85716")
          .withState(State.TC_AZ)
          .withAddressType(TC_HOME)
          .withCity("Tucson"))
        .withWorkPhone("818-446-1206")
        .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_WC)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("34-386734")
          .withTotalProperties(0)
          .withPolicyType(TC_WORKERSCOMP)
          .withTotalVehicles(0)
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
          .withType(TC_WCEMPLIABCOV))
        .withContactInRole(contactMap.get("demo_sample:4012"), TC_INSURED)
        .withContactInRole(contactMap.get("demo_sample:10045"), TC_AGENT)
        .withPolicyAccount(_accountMap["demo_account:8011"])
        .create(bundle))

    } )

    runChunk( \->
    {
      contactMap.put("demo_sample:4013", new gw.api.databuilder.CompanyBuilder()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("253 McAfee Ct.")
          .withCountry(TC_US)
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Thousand Oaks"))
        .withWorkPhone("213-475-9465")
        .withName("FitRight Manufacturing")
        .create(bundle))

      contactMap.put("demo_sample:10056", new gw.api.databuilder.PersonBuilder()
        .withLastName("Albee")
        .withFirstName("Jennifer")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("354 Cactus Ln")
          .withCountry(TC_US)
          .withPostalCode("85716")
          .withState(State.TC_AZ)
          .withAddressType(TC_HOME)
          .withCity("Tucson"))
        .withWorkPhone("818-446-1206")
        .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_WC)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withWCStates("CA, NV")
          .withPolicyNumber("32-376869")
          .withTotalProperties(1)
          .withPolicyType(TC_WORKERSCOMP)
          .withTotalVehicles(0)
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Labor Contractor Endorsement")
          .withFormNumber("WC 00 03 20 A"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Employers Liability Coverage Endorsement ")
          .withFormNumber("WC 00 03 03 B"))
        .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
          .withIncidentLimit(100000bd.ofDefaultCurrency())
          .withType(TC_WCEMPLIABCOV)
          .withNotes("Bodily Injury By Accident")
          .withDeductible(10000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
          .withType(TC_WCEMPLIABCOV)
          .withNotes("Bodily Injury By Disease for Policy")
          .withDeductible(50000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
          .withType(TC_WCEMPLIABCOV)
          .withNotes("Bodily Injury By Disease per Employee")
          .withDeductible(1000bd.ofDefaultCurrency())
          .withExposureLimit(100000bd.ofDefaultCurrency()))
        .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
          .withRUNumber(1)
          .withPolicyLocation( new gw.api.databuilder.PolicyLocationBuilder()
          .withAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("55 California St")
          .withCountry(TC_US)
          .withPostalCode("61571")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Washington"))))
        .withContactInRole(contactMap.get("demo_sample:4013"), TC_INSURED)
        .withContactInRole(contactMap.get("demo_sample:10056"), TC_AGENT)
        .withPolicyAccount(_accountMap["demo_account:8012"])
        .create(bundle))
    } )

    runChunk( \->
    {
      contactMap.put("demo_sample:3034", new gw.api.databuilder.PersonBuilder()
        .withLastName("Henderson")
        .withFirstName("Bill")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("250 Commerce Way")
          .withCountry(TC_US)
          .withPostalCode("91155")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Los Angeles"))
        .withWorkPhone("213-457-6378")
        .create(bundle))

      contactMap.put("demo_sample:11", new gw.api.databuilder.PersonBuilder()
        .withLastName("Henderson")
        .withFirstName("Mark")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("85 Circle Rd")
          .withCountry(TC_US)
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("West Lake Village"))
        .withWorkPhone("626-473-9576")
        .create(bundle))

      contactMap.put("demo_sample:10015", new gw.api.databuilder.PersonBuilder()
        .withLastName("Egertson")
        .withFirstName("Karen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("908 Angels Landing Rd.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Anaheim"))
        .withWorkPhone("213-457-6378")
        .create(bundle))

      contactMap.put("demo_sample:504", new gw.api.databuilder.PersonBuilder()
        .withLastName("Cole")
        .withFirstName("Fred")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("85 Circle Rd")
          .withCountry(TC_US)
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("West Lake Village"))
        .withWorkPhone("213-475-9465")
        .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("53-263535")
          .withTotalProperties(0)
          .withPolicyType(TC_PERSONALAUTO)
          .withTotalVehicles(2)
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Towing and Labor Costs Coverage")
          .withFormNumber("PP 03 03 "))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Extended Non-Owned Coverage For Named Individual")
          .withFormNumber("PP 03 06"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("Coverage For Excess Sound Reproducing Equipment, Audio, Visual & Data Electronic Equipment & Tapes, Records, Discs & Other Media")
          .withFormNumber("PP 03 13"))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("1")
          .withLineNumber(1)
          .withState(State.TC_CA)
          .withMajorPeril(TC_GLASS)
          .withInsuranceLine(TC_GLASS)
          .withInsuranceSubLine(TC_GLASS))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("1")
          .withLineNumber(2)
          .withState(State.TC_CA)
          .withMajorPeril(TC_BODILY_INJURY)
          .withInsuranceLine(TC_PERS_AUTO_LIAB)
          .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("1")
          .withLineNumber(3)
          .withState(State.TC_CA)
          .withMajorPeril(TC_PROP_DAMAGE)
          .withInsuranceLine(TC_PERS_AUTO_LIAB)
          .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("1")
          .withLineNumber(4)
          .withState(State.TC_CA)
          .withMajorPeril(TC_MED_PAY)
          .withInsuranceLine(TC_PERS_AUTO_LIAB)
          .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("1")
          .withLineNumber(5)
          .withState(State.TC_CA)
          .withMajorPeril(TC_UNINSURED_BI)
          .withInsuranceLine(TC_PERS_AUTO_LIAB)
          .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("1")
          .withLineNumber(6)
          .withState(State.TC_CA)
          .withMajorPeril(TC_UNDER_INSURED_BI)
          .withInsuranceLine(TC_PERS_AUTO_LIAB)
          .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("1")
          .withLineNumber(7)
          .withState(State.TC_CA)
          .withMajorPeril(TC_COMPREHENSIVE)
          .withInsuranceLine(TC_PERS_AUTO_PHYS)
          .withInsuranceSubLine(TC_PERS_AUTO_PHYS))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("1")
          .withLineNumber(8)
          .withState(State.TC_CA)
          .withMajorPeril(TC_COLLISION)
          .withInsuranceLine(TC_PERS_AUTO_PHYS)
          .withInsuranceSubLine(TC_PERS_AUTO_PHYS))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("1")
          .withLineNumber(9)
          .withState(State.TC_CA)
          .withMajorPeril(TC_RENTAL)
          .withInsuranceLine(TC_PERS_AUTO_PHYS)
          .withInsuranceSubLine(TC_PERS_AUTO_PHYS))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("1")
          .withLineNumber(10)
          .withState(State.TC_CA)
          .withMajorPeril(TC_PERS_NOFAULT)
          .withInsuranceLine(TC_PERS_AUTO_NOFLT)
          .withInsuranceSubLine(TC_PERS_AUTO_NOFLT))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("2")
          .withLineNumber(11)
          .withState(State.TC_CA)
          .withMajorPeril(TC_GLASS)
          .withInsuranceLine(TC_GLASS)
          .withInsuranceSubLine(TC_GLASS))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("2")
          .withLineNumber(12)
          .withState(State.TC_CA)
          .withMajorPeril(TC_BODILY_INJURY)
          .withInsuranceLine(TC_PERS_AUTO_LIAB)
          .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("2")
          .withLineNumber(13)
          .withState(State.TC_CA)
          .withMajorPeril(TC_PROP_DAMAGE)
          .withInsuranceLine(TC_PERS_AUTO_LIAB)
          .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("2")
          .withLineNumber(14)
          .withState(State.TC_CA)
          .withMajorPeril(TC_MED_PAY)
          .withInsuranceLine(TC_PERS_AUTO_LIAB)
          .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("2")
          .withLineNumber(15)
          .withState(State.TC_CA)
          .withMajorPeril(TC_UNINSURED_BI)
          .withInsuranceLine(TC_PERS_AUTO_LIAB)
          .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("2")
          .withLineNumber(16)
          .withState(State.TC_CA)
          .withMajorPeril(TC_UNDER_INSURED_BI)
          .withInsuranceLine(TC_PERS_AUTO_LIAB)
          .withInsuranceSubLine(TC_PERS_AUTO_LIAB))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("2")
          .withLineNumber(17)
          .withState(State.TC_CA)
          .withMajorPeril(TC_COMPREHENSIVE)
          .withInsuranceLine(TC_PERS_AUTO_PHYS)
          .withInsuranceSubLine(TC_PERS_AUTO_PHYS))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("2")
          .withLineNumber(18)
          .withState(State.TC_CA)
          .withMajorPeril(TC_COLLISION)
          .withInsuranceLine(TC_PERS_AUTO_PHYS)
          .withInsuranceSubLine(TC_PERS_AUTO_PHYS))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("2")
          .withLineNumber(19)
          .withState(State.TC_CA)
          .withMajorPeril(TC_RENTAL)
          .withInsuranceLine(TC_PERS_AUTO_PHYS)
          .withInsuranceSubLine(TC_PERS_AUTO_PHYS))
        .withStatCode( new gw.api.databuilder.StatCodeBuilder()
          .withVehicleNumber("2")
          .withLineNumber(20)
          .withState(State.TC_CA)
          .withMajorPeril(TC_PERS_NOFAULT)
          .withInsuranceLine(TC_PERS_AUTO_NOFLT)
          .withInsuranceSubLine(TC_PERS_AUTO_NOFLT))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(1)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1998)
          .withLicensePlate("7FDG745")
          .withMake("Jaguar")
          .withState(Jurisdiction.TC_CA)
          .withModel("XJ6")
          .withVin("6GYF54637HD641756"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(15000bd.ofDefaultCurrency())
          .withType(TC_PACOLLISIONCOV)
          .withDeductible(500bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(10000bd.ofDefaultCurrency())
          .withType(TC_PACOMPREHENSIVECOV)
          .withDeductible(500bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_PALIABILITYCOV)
          .withExposureLimit(15000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(500bd.ofDefaultCurrency())
          .withType(TC_PAMEDPAYCOV)))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(2)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1991)
          .withLicensePlate("2GDH967")
          .withMake("Ford")
          .withState(Jurisdiction.TC_CA)
          .withModel("Wagon")
          .withVin("3DGF78575GDG89243"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(10000bd.ofDefaultCurrency())
          .withType(TC_PACOLLISIONCOV)
          .withDeductible(500bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(5000bd.ofDefaultCurrency())
          .withType(TC_PACOMPREHENSIVECOV)
          .withDeductible(500bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(150000bd.ofDefaultCurrency())
          .withType(TC_PALIABILITYCOV)
          .withExposureLimit(75000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(500bd.ofDefaultCurrency())
          .withType(TC_PAMEDPAYCOV)))
        .withContactInRole(contactMap.get("demo_sample:11"), TC_INSURED)
        .withContactInRole(contactMap.get("demo_sample:10015"), TC_AGENT)
        .withContactInRole(contactMap.get("demo_sample:3034"), TC_COVEREDPARTY)
        .withContactInRole(contactMap.get("demo_sample:504"), TC_EXCLUDEDPARTY)
        .create(bundle))

    } )

    runChunk( \->
    {
      contactMap.put("demo_sample:3026", new gw.api.databuilder.PersonBuilder()
        .withLastName("Turner")
        .withFirstName("Brittany")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("2563 West Ave.")
          .withCountry(TC_US)
          .withPostalCode("91357")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Orange"))
        .withWorkPhone("213-457-6378")
        .create(bundle))

      contactMap.put("demo_sample:10017", new gw.api.databuilder.PersonBuilder()
        .withLastName("Egertson")
        .withFirstName("Karen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("908 Angels Landing Rd.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Anaheim"))
        .withWorkPhone("213-457-6378")
        .create(bundle))

      contactMap.put("demo_sample:506", new gw.api.databuilder.PersonBuilder()
        .withLastName("Shiu")
        .withFirstName("Scott")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("503 2nd Ave.")
          .withCountry(TC_US)
          .withPostalCode("92101")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("San Diego"))
        .withWorkPhone("619-275-2346")
        .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("56-475868")
          .withTotalProperties(0)
          .withPolicyType(TC_PERSONALAUTO)
          .withTotalVehicles(1)
          .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(1)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2002)
          .withLicensePlate("2GDH967")
          .withMake("Pontiac")
          .withState(Jurisdiction.TC_CA)
          .withModel("Grand Prix")
          .withVin("3DGF78575GD891525")))
        .withContactInRole(contactMap.get("demo_sample:3026"), TC_INSURED)
        .withContactInRole(contactMap.get("demo_sample:10017"), TC_AGENT)
        .withContactInRole(contactMap.get("demo_sample:506"), TC_COVEREDPARTY)
        .create(bundle))
    } )

    runChunk( \->
    {
      contactMap.put("demo_sample:3027", new gw.api.databuilder.PersonBuilder()
        .withLastName("Shiu")
        .withFirstName("Lisa")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("52 Dove Ct.")
          .withCountry(TC_US)
          .withPostalCode("91006")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Riverside"))
        .withWorkPhone("213-475-9465")
        .create(bundle))

      contactMap.put("demo_sample:10018", new gw.api.databuilder.PersonBuilder()
        .withLastName("Egertson")
        .withFirstName("Karen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("908 Angels Landing Rd.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Anaheim"))
        .withWorkPhone("213-457-6378")
        .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("54-586897")
          .withTotalProperties(0)
          .withPolicyType(TC_PERSONALAUTO)
          .withTotalVehicles(0)
        .withContactInRole(contactMap.get("demo_sample:3027"), TC_INSURED)
        .withContactInRole(contactMap.get("demo_sample:10018"), TC_AGENT)
        .create(bundle))
    } )

    runChunk( \->
    {
      contactMap.put("demo_sample:3028", new gw.api.databuilder.PersonBuilder()
        .withLastName("Gamney")
        .withFirstName("Larry")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("23465 97 St. #3D")
          .withCountry(TC_US)
          .withPostalCode("91357")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Carson"))
        .withWorkPhone("626-473-9576")
        .create(bundle))

      contactMap.put("demo_sample:10010", new gw.api.databuilder.PersonBuilder()
        .withLastName("Egertson")
        .withFirstName("Karen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("908 Angels Landing Rd.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Anaheim"))
        .withWorkPhone("213-457-6378")
        .create(bundle))

      contactMap.put("demo_sample:11445", new gw.api.databuilder.PersonBuilder()
        .withLastName("Robertson")
        .withFirstName("Allen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("4263 Live Oak Blvd.")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("San Gabriel"))
        .withWorkPhone("213-475-9465")
        .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-3266))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("54-847564")
          .withTotalProperties(0)
          .withPolicyType(TC_PERSONALAUTO)
          .withTotalVehicles(2)
          .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(1)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2001)
          .withLicensePlate("1HGJ465")
          .withMake("Honda")
          .withState(Jurisdiction.TC_CA)
          .withModel("Civic")
          .withVin("1GV234TV347463364"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(10000bd.ofDefaultCurrency())
          .withType(TC_PACOLLISIONCOV)
          .withDeductible(500bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(5000bd.ofDefaultCurrency())
          .withType(TC_PACOMPREHENSIVECOV)
          .withDeductible(500bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(150000bd.ofDefaultCurrency())
          .withType(TC_PALIABILITYCOV)
          .withExposureLimit(75000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(500bd.ofDefaultCurrency())
          .withType(TC_PAMEDPAYCOV)))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(2)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
            .withYear(2000)
            .withLicensePlate("7FDG745")
            .withMake("Ford")
            .withState(Jurisdiction.TC_CA)
            .withModel("Explorer")
            .withVin("6GYF54637HD643579"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(10000bd.ofDefaultCurrency())
          .withType(TC_PACOLLISIONCOV)
          .withDeductible(500bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(5000bd.ofDefaultCurrency())
          .withType(TC_PACOMPREHENSIVECOV)
          .withDeductible(500bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(150000bd.ofDefaultCurrency())
          .withType(TC_PALIABILITYCOV)
          .withExposureLimit(75000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(500bd.ofDefaultCurrency())
          .withType(TC_PAMEDPAYCOV)))
        .withContactInRole(contactMap.get("demo_sample:3028"), TC_INSURED)
        .withContactInRole(contactMap.get("demo_sample:10010"), TC_AGENT)
        .withContactInRole(contactMap.get("demo_sample:11445"), TC_COVEREDPARTY)
        .create(bundle))

    } )

    runChunk( \->
    {
      contactMap.put("trucking:1002", new gw.api.databuilder.PersonBuilder()
        .withLastName("Bevel")
        .withFirstName("Charles Stephen")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withCounty("Cleveland")
          .withAddressLine1("3150 Old School Rd.")
          .withCountry(TC_US)
          .withPostalCode("28150")
          .withState(State.TC_NC)
          .withAddressType(TC_BUSINESS)
          .withCity("Shelby"))
        .withWorkPhone("704-434-2007")
        .create(bundle))

      contactMap.put("trucking:2000", new gw.api.databuilder.CompanyBuilder()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withCounty("Cleveland")
          .withAddressLine1("3150 Old School Rd.")
          .withCountry(TC_US)
          .withPostalCode("28150")
          .withState(State.TC_NC)
          .withAddressType(TC_BUSINESS)
          .withCity("Shelby"))
        .withWorkPhone("704-434-2007")
        .withName("Long Road Trucking Company")
        .create(bundle))

      contactMap.put("trucking:1004", new gw.api.databuilder.PersonBuilder()
        .withLastName("Armstrong")
        .withFirstName("Cynthia D")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withCounty("Cleveland")
          .withAddressLine1("3150 Old School Rd.")
          .withCountry(TC_US)
          .withPostalCode("28150")
          .withState(State.TC_NC)
          .withAddressType(TC_BUSINESS)
          .withCity("Shelby"))
        .withWorkPhone("704-434-2007")
        .create(bundle))

      contactMap.put("trucking:25", new gw.api.databuilder.PersonBuilder()
        .withLastName("Beard")
        .withFirstName("James Howard")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withCounty("Cleveland")
          .withAddressLine1("3150 Old School Rd.")
          .withCountry(TC_US)
          .withPostalCode("28150")
          .withState(State.TC_NC)
          .withAddressType(TC_BUSINESS)
          .withCity("Shelby"))
        .withWorkPhone("704-434-2007")
        .create(bundle))

      contactMap.put("trucking:26", new gw.api.databuilder.PersonBuilder()
        .withLastName("Bearden")
        .withFirstName("Rodney Joe")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withCounty("Cleveland")
          .withAddressLine1("3150 Old School Rd.")
          .withCountry(TC_US)
          .withPostalCode("28150")
          .withState(State.TC_NC)
          .withAddressType(TC_BUSINESS)
          .withCity("Shelby"))
        .withWorkPhone("704-434-2007")
        .create(bundle))

      contactMap.put("trucking:28", new gw.api.databuilder.PersonBuilder()
        .withLastName("Brown")
        .withFirstName("Ronald Glenn")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withCounty("Cleveland")
          .withAddressLine1("3150 Old School Rd.")
          .withCountry(TC_US)
          .withPostalCode("28150")
          .withState(State.TC_NC)
          .withAddressType(TC_BUSINESS)
          .withCity("Shelby"))
        .withWorkPhone("704-434-2007")
        .create(bundle))

      contactMap.put("trucking:29", new gw.api.databuilder.PersonBuilder()
        .withLastName("Burt")
        .withFirstName("Ronald Keith")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withCounty("Cleveland")
          .withAddressLine1("3150 Old School Rd.")
          .withCountry(TC_US)
          .withPostalCode("28150")
          .withState(State.TC_NC)
          .withAddressType(TC_BUSINESS)
          .withCity("Shelby"))
        .withWorkPhone("704-434-2007")
        .create(bundle))

      contactMap.put("trucking:30", new gw.api.databuilder.PersonBuilder()
        .withLastName("Dove")
        .withFirstName("James Robert")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
          .withCounty("Cleveland")
          .withAddressLine1("3150 Old School Rd.")
          .withCountry(TC_US)
          .withPostalCode("28150")
          .withState(State.TC_NC)
          .withAddressType(TC_BUSINESS)
          .withCity("Shelby"))
        .withWorkPhone("704-434-2007")
        .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(185))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-2005))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(_baseDate.addDays(-180))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("64-318764")
          .withTotalProperties(0)
          .withPolicyType(TC_BUSINESSAUTO)
          .withTotalVehicles(6)
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("12-91")
          .withFormNumber("E-69L"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("12-91")
          .withFormNumber("E-1"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("12-91")
          .withFormNumber("E-4"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("12-91")
          .withFormNumber("E-5"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("1-94")
          .withFormNumber("E-18"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("12-91")
          .withFormNumber("E-45"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("12-95")
          .withFormNumber("E-70 SC"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("7-95")
          .withFormNumber("E-96 SC"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("11-93")
          .withFormNumber("E-102"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("7-96")
          .withFormNumber("E-103"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("7-97")
          .withFormNumber("E-114 SC"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("3-97")
          .withFormNumber("E-115"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("4-99")
          .withFormNumber("E-125"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("6-71")
          .withFormNumber("Form F"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withFormNumber("A101"))
        .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("3-99")
          .withFormNumber("D-101 SC"))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(1)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1989)
          .withLicensePlate("4964846")
          .withMake("Freightliner")
          .withState(Jurisdiction.TC_NC)
          .withModel("Tractor-1")
          .withVin("1FUPACYBXKH341308"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(9000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(2)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
            .withYear(1990)
            .withLicensePlate("1839460")
            .withMake("WhiteGMC")
            .withState(Jurisdiction.TC_NC)
            .withModel("Tractor-2")
            .withVin("4V1WDBJF8LN623310"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(10000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(3)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1990)
          .withLicensePlate("8364725")
          .withMake("WhiteGMC")
          .withState(Jurisdiction.TC_NC)
          .withModel("Tractor-3")
          .withVin("4V1WDBJF6LN623306"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(10000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(4)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1993)
          .withLicensePlate("8478367")
          .withMake("Freightliner")
          .withState(Jurisdiction.TC_NC)
          .withModel("Tractor-4")
          .withVin("1FUYDPYB5PH479736"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(15000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(5)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1993)
          .withLicensePlate("2920984")
          .withMake("Freightliner")
          .withState(Jurisdiction.TC_NC)
          .withModel("Tractor-5")
          .withVin("1FUYDPYB3PH479749"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(18500bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(6)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1995)
          .withLicensePlate("3009274")
          .withMake("Freightliner")
          .withState(Jurisdiction.TC_NC)
          .withModel("Tractor-6")
          .withVin("1FUY3MCB8SH671914"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(22000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withPolicyAccount(_accountMap.get("demo_account:8005"))
        .withContactInRole(contactMap.get("trucking:2000"), TC_INSURED)
        .withContactInRole(contactMap.get("trucking:1004"), TC_COVEREDPARTY)
        .withContactInRole(contactMap.get("trucking:25"), TC_COVEREDPARTY)
        .withContactInRole(contactMap.get("trucking:26"), TC_COVEREDPARTY)
        .withContactInRole(contactMap.get("trucking:1002"), TC_COVEREDPARTY)
        .withContactInRole(contactMap.get("trucking:28"), TC_COVEREDPARTY)
        .withContactInRole(contactMap.get("trucking:29"), TC_COVEREDPARTY)
        .withContactInRole(contactMap.get("trucking:30"), TC_COVEREDPARTY)
        .create(bundle))
    } )

    runChunk( \->
    {
      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(185))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-2005))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(_baseDate.addDays(-180))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("64-318765")
          .withTotalProperties(0)
          .withPolicyType(TC_BUSINESSAUTO)
          .withTotalVehicles(6)
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
          .withDescription("12-91")
          .withFormNumber("E-69L"))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(1)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1989)
          .withLicensePlate("4964846")
          .withMake("Freightliner")
          .withState(Jurisdiction.TC_NC)
          .withModel("Tractor-1")
          .withVin("1FUPACYBXKH341308"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(9000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(2)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1990)
          .withLicensePlate("1839460")
          .withMake("WhiteGMC")
          .withState(Jurisdiction.TC_NC)
          .withModel("Tractor-2")
          .withVin("4V1WDBJF8LN623310"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(10000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(3)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1990)
          .withLicensePlate("8364725")
          .withMake("WhiteGMC")
          .withState(Jurisdiction.TC_NC)
          .withModel("Tractor-3")
          .withVin("4V1WDBJF6LN623306"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(10000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(4)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1993)
          .withLicensePlate("8478367")
          .withMake("Freightliner")
          .withState(Jurisdiction.TC_NC)
          .withModel("Tractor-4")
          .withVin("1FUYDPYB5PH479736"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(15000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(5)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1993)
          .withLicensePlate("2920984")
          .withMake("Freightliner")
          .withState(Jurisdiction.TC_NC)
          .withModel("Tractor-5")
          .withVin("1FUYDPYB3PH479749"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(18500bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(6)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1995)
          .withLicensePlate("3009274")
          .withMake("Freightliner")
          .withState(Jurisdiction.TC_NC)
          .withModel("Tractor-6")
          .withVin("1FUY3MCB8SH671914"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(22000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withContactInRole( new gw.api.databuilder.CompanyBuilder()
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withCounty("Cleveland")
            .withAddressLine1("3160 Juniper Rd.")
            .withCountry(TC_US)
            .withPostalCode("28150")
            .withState(State.TC_NC)
            .withAddressType(TC_BUSINESS)
            .withCity("Shelby"))
          .withWorkPhone("704-434-2008")
          .withName("Bison Trucking Company"), TC_INSURED)
        .withContactInRole(new gw.api.databuilder.PersonBuilder()
          .withLastName("Arlington")
          .withFirstName("Annabelle")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("2050 Eagle Landing Blvd.")
            .withCountry(TC_US)
            .withPostalCode("29406")
            .withState(State.TC_SC)
            .withAddressType(TC_BUSINESS)
            .withCity("Charleston"))
          .withWorkPhone("843-553-2001"), TC_AGENT)
        .withContactInRole( new gw.api.databuilder.PersonBuilder()
          .withLastName("Armstrong")
          .withFirstName("Cynthia D")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withCounty("Cleveland")
            .withAddressLine1("3150 Old School Rd.")
            .withCountry(TC_US)
            .withPostalCode("28150")
            .withState(State.TC_NC)
            .withAddressType(TC_BUSINESS)
            .withCity("Shelby"))
          .withWorkPhone("704-434-2007"), TC_COVEREDPARTY)
        .withContactInRole( new gw.api.databuilder.PersonBuilder()
          .withLastName("Beard")
          .withFirstName("James Howard")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withCounty("Cleveland")
            .withAddressLine1("3150 Old School Rd.")
            .withCountry(TC_US)
            .withPostalCode("28150")
            .withState(State.TC_NC)
            .withAddressType(TC_BUSINESS)
            .withCity("Shelby"))
          .withWorkPhone("704-434-2007"), TC_COVEREDPARTY)
        .withPolicyAccount(_accountMap["demo_account:8009"])
        .create(bundle))

    } )


    var trucksRUs = new gw.api.databuilder.CompanyBuilder()
          .withWorkPhone("510-687-5963")
          .withName("Big Mac Trucking")
          .create(bundle)
    runChunk( \->
    {
      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(185))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-2005))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(_baseDate.addDays(-180))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("74-123784")
          .withTotalProperties(0)
          .withPolicyType(TC_BUSINESSAUTO)
          .withTotalVehicles(100)
          .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(1)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542800")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL00"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(2)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542801")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL01"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(3)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542802")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL02"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(4)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542803")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL03"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(5)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542804")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL04"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(6)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542805")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL05"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(7)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542806")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL06"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(8)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542807")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL07"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(9)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542808")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL08"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(10)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542809")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL09"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(11)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542810")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL10"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(12)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542811")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL11"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(13)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542812")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL12"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(14)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542813")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL13"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(15)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542814")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL14"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(16)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542815")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL15"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(17)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542816")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL16"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(18)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542817")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL17"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(19)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542818")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL18"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(20)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542819")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL19"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(21)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542820")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL20"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(22)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542821")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL21"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(23)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542822")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL22"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(24)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542823")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL23"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(25)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542824")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL24"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(26)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542825")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL25"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(27)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542826")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL26"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(28)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542827")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL27"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(29)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542828")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL28"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(30)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542829")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL29"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(31)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542830")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL30"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(32)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542831")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL31"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(33)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542832")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL32"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(34)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542833")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL33"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(35)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542834")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL34"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(36)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542835")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL35"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(37)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542836")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL36"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(38)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542837")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL37"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(39)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542838")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL38"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(40)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542839")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL39"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(41)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542840")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL40"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(42)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542841")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL41"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(43)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542842")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL42"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(44)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542843")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL43"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(45)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542844")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL44"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(46)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542845")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL45"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(47)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542846")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL46"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(48)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542847")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL47"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(49)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542848")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL48"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(50)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542849")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL49"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(51)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542850")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL50"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(52)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542851")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL51"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(53)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542852")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL52"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(54)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542853")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL53"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(55)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542854")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL54"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(56)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542855")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL55"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(57)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542856")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL56"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(58)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542857")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL57"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(59)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542858")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL58"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(60)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542859")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL59"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(61)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542860")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL60"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(62)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542861")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL61"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(63)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542862")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL62"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(64)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542863")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL63"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(65)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542864")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL64"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(66)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542865")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL65"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(67)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542866")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL66"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(68)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542867")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL67"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(69)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542868")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL68"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(70)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542869")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL69"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(71)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542870")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL70"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(72)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542871")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL71"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(73)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542872")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL72"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(74)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542873")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL73"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(75)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542874")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL74"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(76)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542875")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL75"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(77)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542876")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL76"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(78)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542877")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL77"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(79)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542878")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL78"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(80)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542879")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL79"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(81)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542880")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL80"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(82)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542881")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL81"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(83)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542882")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL82"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(84)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542883")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL83"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(85)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542884")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL84"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(86)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542885")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL85"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(87)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542886")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL86"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(88)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542887")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL87"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(89)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542888")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL88"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(90)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542889")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL89"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(91)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542890")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL90"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(92)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542891")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL91"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(93)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542892")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL92"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(94)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542893")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL93"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(95)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542894")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL94"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(96)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542895")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL95"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(97)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542896")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL96"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(98)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542897")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL97"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(99)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542898")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL98"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(100)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(2003)
          .withLicensePlate("4542899")
          .withMake("Mack")
          .withState(Jurisdiction.TC_CA)
          .withModel("CX603")
          .withVin("2JKF54823SL99"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BAOWNEDLIABILITYCOV)
          .withDeductible(1000bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withContactInRole(new gw.api.databuilder.PersonBuilder()
          .withLastName("Arlington")
          .withFirstName("Annabelle")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("2050 Eagle Landing Blvd.")
            .withCountry(TC_US)
            .withPostalCode("29406")
            .withState(State.TC_SC)
            .withAddressType(TC_BUSINESS)
            .withCity("Charleston"))
          .withWorkPhone("843-553-2001"), TC_AGENT)
        .withPolicyAccount(_accountMap.get("demo_account:8006"))
        .withContactInRole(trucksRUs, TC_INSURED)
        .create(bundle))

    } )

    runChunk( \->
    {
      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(275))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-1915))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("74-123192")
          .withTotalProperties(0)
          .withPolicyType(TC_GENERALLIABILITY)
          .withTotalVehicles(0)
        .withContactInRole( new gw.api.databuilder.CompanyBuilder()
          .withName("Citi Mortgage")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("2000 Park Avenue")
            .withCountry(TC_US)
            .withPostalCode("61571")
            .withState(State.TC_IL)
            .withAddressType(TC_BUSINESS)
            .withCity("Washington"))
          .withWorkPhone("626-473-9576"), TC_INSURED)
        .withPolicyAccount(_accountMap["demo_account:8013"])
        .create(bundle))
    } )

    runChunk( \->
    {
      policyLocationMap.put("demo_sample:301", new gw.api.databuilder.PolicyLocationBuilder()
        .withAddress( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("5 Commerce Way")
          .withCountry(TC_US)
          .withPostalCode("91155")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Los Angeles"))
        .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(275))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-1915))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(_baseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("74-301192")
          .withTotalProperties(2)
          .withPolicyType(TC_GENERALLIABILITY)
          .withTotalVehicles(0)
          .withRiskUnit( new gw.api.databuilder.GeneralLiabilityRUBuilder()
          .withRUNumber(1)
          .withPolicyLocation(policyLocationMap.get("demo_sample:301"))
/* KenB 7/3/10: new equivalent coverage in the new PC codes
        .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
          .withIncidentLimit(100000)
          .withType("TERR")
          .withDeductible(1000bd.ofDefaultCurrency()))
*/
        .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
          .withIncidentLimit(25000bd.ofDefaultCurrency())
          .withType(TC_GLLIQUORENDORSEMENT)
          .withDeductible(500bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.GeneralLiabilityRUBuilder()
          .withRUNumber(2)
          .withPolicyLocation(policyLocationMap.get("demo_sample:301"))
/* KenB 7/3/10: new equivalent coverage in the new PC codes
        .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
          .withIncidentLimit(100000)
          .withType("TERR")
          .withDeductible(1000bd.ofDefaultCurrency()))
*/
        .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
          .withIncidentLimit(25000bd.ofDefaultCurrency())
          .withType(TC_GLLIQUORENDORSEMENT)
          .withDeductible(500bd.ofDefaultCurrency())))
        .withContactInRole(new gw.api.databuilder.CompanyBuilder()
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("1246 Fair Oaks Ave")
            .withCountry(TC_US)
            .withPostalCode("91101")
            .withState(State.TC_CA)
            .withAddressType(TC_BUSINESS)
            .withCity("Pasadena"))
          .withWorkPhone("847-279-3400")
          .withName("Capital Investment Inc"), TC_INSURED)
         .withContactInRole(new gw.api.databuilder.PersonBuilder()
           .withFirstName("Hans")
           .withLastName( "Molman" ), TC_AGENT)
        .withPolicyAccount(_accountMap["demo_account:8016"])
        .create(bundle))
    } )
    
    
    var acmeRentals = new gw.api.databuilder.CompanyBuilder()
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
              .withAddressLine1("1247 Fair Oaks Ave")
              .withCountry(TC_US)
              .withPostalCode("91101")
              .withState(State.TC_CA)
              .withAddressType(TC_BUSINESS)
              .withCity("Pasadena"))
          .withWorkPhone("847-279-3401")
          .withName("ABC Rentals")
          .create(bundle)
    runChunk( \->
    {
      policies.add(new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(185))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-2005))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_AUTO)
          .withEffectiveDate(_baseDate.addDays(-180))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("64-307784")
          .withTotalProperties(0)
          .withPolicyType(TC_BUSINESSAUTO)
          .withTotalVehicles(3)
          .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(1)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1997)
          .withLicensePlate("8454211")
          .withMake("Volvo")
          .withState(Jurisdiction.TC_CA)
          .withModel("Aero")
          .withVin("2JKF54824SL10"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(2)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1997)
          .withLicensePlate("8454212")
          .withMake("Volvo")
          .withState(Jurisdiction.TC_CA)
          .withModel("Aero")
          .withVin("2JKF54824SL11"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.VehicleRUBuilder()
          .withRUNumber(3)
          .withVehicle( new gw.api.databuilder.VehicleBuilder()
          .withYear(1997)
          .withLicensePlate("8454213")
          .withMake("Volvo")
          .withState(Jurisdiction.TC_CA)
          .withModel("Aero")
          .withVin("2JKF54824SL12"))
        .withCoverage( new gw.api.databuilder.VehicleCoverageBuilder()
          .withIncidentLimit(30000bd.ofDefaultCurrency())
          .withType(TC_BACOLLISIONCOV)
          .withDeductible(1000bd.ofDefaultCurrency())))
        .withPolicyAccount(_accountMap.get("demo_account:8007"))
        .withContactInRole(acmeRentals, TC_INSURED)
        .create(bundle))
    } )

  { // these two policies are identical except except for their currencies, public ids, and policy numbers
    runChunk( \->
    {
      addressMap.put("demo_sample:1026", new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("215 Maple Ave.")
        .withCountry(TC_US)
        .withPostalCode("01079")
        .withState(State.TC_MA)
        .withAddressType(TC_HOME)
        .withCity("Thorndike")
      .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(185))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-2005))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(_baseDate.addDays(-180))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("53-300675")
          .withTotalProperties(1)
          .withPolicyType(TC_HOMEOWNERS)
          .withTotalVehicles(0)
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(1)
            .withPolicyLocation( new gw.api.databuilder.PolicyLocationBuilder()
              .withAddress(addressMap.get("demo_sample:1026")))
            .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
              .withIncidentLimit(500000bd.ofDefaultCurrency())
              .withType(TC_HODW_EARTHQUAKE_HOE)
              .withDeductible(5000bd.ofDefaultCurrency()))
             .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
               .withType(TC_HODW_DWELLING_COV_HOE)
               .withDeductible(500bd.ofDefaultCurrency()))
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withType(TC_HODW_OTHER_STRUCTURES_HOE)
              .withIncidentLimit(160000bd.ofDefaultCurrency())
              .withExposureLimit(75000bd.ofDefaultCurrency()))
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withType(TC_HODW_PERSONAL_PROPERTY_HOE)
              .withIncidentLimit(200000bd.ofDefaultCurrency())
              .withExposureLimit(50000bd.ofDefaultCurrency()))
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withType(TC_HOLI_PERSONAL_LIABILITY_HOE)
              .withIncidentLimit(800000bd.ofDefaultCurrency())
              .withExposureLimit(600000bd.ofDefaultCurrency()))
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withType(TC_HOLI_MED_PAY_HOE)
              .withIncidentLimit(500000bd.ofDefaultCurrency())
              .withExposureLimit(250000bd.ofDefaultCurrency())))
        .withContactInRole(new gw.api.databuilder.PersonBuilder()
          .withLastName("Albertson")
          .withFirstName("John")
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("1244 Fair Oaks Ave")
            .withCountry(TC_US)
            .withPostalCode("91101")
            .withState(State.TC_CA)
            .withAddressType(TC_HOME)
            .withCity("Pasadena"))
          .withWorkPhone("213-457-6540"), TC_INSURED)
        .create(bundle))
    } )
    runChunk( \->
    {
      addressMap.put("demo_sample:10260", new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("215 Maple Ave.")
        .withCountry(TC_US)
        .withPostalCode("01079")
        .withState(State.TC_MA)
        .withAddressType(TC_HOME)
        .withCity("Thorndike")
      .create(bundle))

      var policyCurrency = Currency.TC_EUR
      if ( CurrencyUtil.isSingleCurrencyMode() ) {
        policyCurrency = CurrencyUtil.getDefaultCurrency()
      }
      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(185))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-2005))
          .withCurrency(policyCurrency)
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(_baseDate.addDays(-180))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("63-300675")
          .withTotalProperties(1)
          .withPolicyType(TC_HOMEOWNERS)
          .withTotalVehicles(0)
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
          .withRUNumber(1)
          .withPolicyLocation( new gw.api.databuilder.PolicyLocationBuilder()
          .withAddress(addressMap.get("demo_sample:10260")))
        .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
          .withIncidentLimit(new CurrencyAmount(500000, policyCurrency))
          .withType(TC_HODW_EARTHQUAKE_HOE)
          .withDeductible(new CurrencyAmount(5000, policyCurrency))))
        .withContactInRole(new gw.api.databuilder.PersonBuilder()
          .withLastName("Albertson")
          .withFirstName("John")
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("1244 Fair Oaks Ave")
            .withCountry(TC_US)
            .withPostalCode("91101")
            .withState(State.TC_CA)
            .withAddressType(TC_HOME)
            .withCity("Pasadena"))
          .withWorkPhone("213-457-6540"), TC_INSURED)
        .create(bundle))
    } )
  }

    runChunk( \->
    {
      addressMap.put("demo_sample:3003", new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("15 Commerce Way")
        .withCountry(TC_US)
        .withPostalCode("91155")
        .withState(State.TC_CA)
        .withAddressType(TC_BUSINESS)
        .withCity("Los Angeles")
      .create(bundle))

      addressMap.put("demo_sample:3004", new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("20 Commerce Way")
        .withCountry(TC_US)
        .withPostalCode("91155")
        .withState(State.TC_CA)
        .withAddressType(TC_BUSINESS)
        .withCity("Los Angeles")
      .create(bundle))

      var building201 = new gw.api.databuilder.BuildingBuilder()
          .withNotes("northern end")
          .withBuildingNumber("201")
          .create(bundle)
      var building202 = new gw.api.databuilder.BuildingBuilder()
          .withNotes("southern end")
          .withBuildingNumber("202")
          .create(bundle)
      policyLocationMap.put("demo_sample:303", new gw.api.databuilder.PolicyLocationBuilder()
        .withAddress(addressMap.get("demo_sample:3003"))
        .withBuilding( building201 )
        .withBuilding( building202 )
        .create(bundle))

      var building301 = new gw.api.databuilder.BuildingBuilder()
          .withBuildingNumber("301")
          .create(bundle)
      var building302 = new gw.api.databuilder.BuildingBuilder()
          .withBuildingNumber("302")
          .create(bundle)
      policyLocationMap.put("demo_sample:304", new gw.api.databuilder.PolicyLocationBuilder()
        .withAddress(addressMap.get("demo_sample:3004"))
        .withBuilding( building301 )
        .withBuilding( building302 )
        .create(bundle))

      policies.add( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(185))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-2005))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(_baseDate.addDays(-180))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("23-300022")
          .withTotalProperties(4)
          .withPolicyType(TC_COMMERCIALPROPERTY)
          .withTotalVehicles(0)
          .withRiskUnit( new gw.api.databuilder.BuildingRUBuilder()
          .withRUNumber(1)
          .withBuilding( building201 )
          .withPolicySystemId("123")          
          .withPolicyLocation(policyLocationMap.get("demo_sample:303"))
        .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
          .withIncidentLimit(2500000bd.ofDefaultCurrency())
          .withType(TC_CPBLDGCOV)
          .withDeductible(10000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.BuildingRUBuilder()
          .withRUNumber(2)
          .withBuilding( building202 )
          .withPolicySystemId("124")
          .withPolicyLocation(policyLocationMap.get("demo_sample:303"))
        .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
          .withIncidentLimit(2500000bd.ofDefaultCurrency())
          .withType(TC_CPBLDGCOV)
          .withDeductible(10000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.BuildingRUBuilder()
          .withRUNumber(3)
          .withBuilding( building301 )
          .withPolicySystemId("456")
          .withPolicyLocation(policyLocationMap.get("demo_sample:304"))
        .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
          .withIncidentLimit(2500000bd.ofDefaultCurrency())
          .withType(TC_CPBLDGCOV)
          .withDeductible(10000bd.ofDefaultCurrency())))
        .withRiskUnit( new gw.api.databuilder.BuildingRUBuilder()
          .withRUNumber(4)
          .withBuilding( building302 )
          .withPolicySystemId("457")
          .withPolicyLocation(policyLocationMap.get("demo_sample:304"))
        .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
          .withIncidentLimit(2500000bd.ofDefaultCurrency())
          .withType(TC_CPBLDGCOV)
          .withDeductible(10000bd.ofDefaultCurrency())))
        .withContactInRole( new gw.api.databuilder.CompanyBuilder()
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("1248 Fair Oaks Ave")
            .withCountry(TC_US)
            .withPostalCode("91101")
            .withState(State.TC_CA)
            .withAddressType(TC_BUSINESS)
            .withCity("Pasadena"))
          .withWorkPhone("847-279-3402")
          .withName("Hoyle Bicycles"), TC_INSURED)
        .withPolicyAccount(_accountMap["demo_account:8014"])
        .create(bundle))
    } )

    runChunk( \->
    {
      addressMap.put("demo_sample:3005", new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("25 Commerce Way")
        .withCountry(TC_US)
        .withPostalCode("91155")
        .withState(State.TC_CA)
        .withAddressType(TC_BUSINESS)
        .withCity("Los Angeles")
      .create(bundle))

      var building101 = new gw.api.databuilder.BuildingBuilder()
          .withBuildingNumber("101")
          .create(bundle)
      var building102 = new gw.api.databuilder.BuildingBuilder()
          .withBuildingNumber("102")
          .create(bundle)
      policyLocationMap.put("demo_sample:305", new gw.api.databuilder.PolicyLocationBuilder()
        .withAddress(addressMap.get("demo_sample:3005"))
        .withBuilding( building101 )
        .withBuilding( building102 )
        .create(bundle))
        
      var classCode1 = new gw.api.databuilder.ClassCodeBuilder()
          .withCode("883001")
          .withDescription("Clerical")
          .create(bundle)
      var classCode2 = new gw.api.databuilder.ClassCodeBuilder()
          .withCode("883002")
          .withDescription("Janitorial")
          .create(bundle)

      policies.add(new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(_baseDate.addDays(185))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(_baseDate.addDays(-2005))
          .withCurrency(CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_WC)
          .withEffectiveDate(_baseDate.addDays(-180))
          .withStatus(TC_INFORCE)
          .withWCStates("CA, NV")
          .withPolicyNumber("32-300869")
          .withTotalProperties(4)
          .withPolicyType(TC_WORKERSCOMP)
          .withTotalVehicles(0)
          .withClassCode( classCode1 )
        .withClassCode( classCode2 )
        .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
          .withIncidentLimit(100000bd.ofDefaultCurrency())
          .withType(TC_WCEMPLIABCOV)
          .withDeductible(100bd.ofDefaultCurrency()))
        .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
          .withIncidentLimit(100000bd.ofDefaultCurrency())
          .withType(TC_WCEMPLIABCOV)
          .withDeductible(100bd.ofDefaultCurrency()))
        .withRiskUnit( new gw.api.databuilder.WCCovEmpRUBuilder()
          .withRUNumber(1)
          .withBuilding( building101 )
          .withClassCode( classCode1 )
          .withPolicyLocation(policyLocationMap.get("demo_sample:305")))
        .withRiskUnit( new gw.api.databuilder.WCCovEmpRUBuilder()
          .withRUNumber(2)
          .withBuilding( building101 )
          .withClassCode( classCode2 )
          .withPolicyLocation(policyLocationMap.get("demo_sample:305")))
        .withRiskUnit( new gw.api.databuilder.WCCovEmpRUBuilder()
          .withRUNumber(3)
          .withBuilding( building102 )
          .withClassCode( classCode1 )
          .withPolicyLocation(policyLocationMap.get("demo_sample:305")))
        .withRiskUnit( new gw.api.databuilder.WCCovEmpRUBuilder()
          .withRUNumber(4)
          .withBuilding( building102 )
          .withClassCode( classCode2 )
          .withPolicyLocation(policyLocationMap.get("demo_sample:305")))
        .withContactInRole(new gw.api.databuilder.CompanyBuilder()
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddress( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("1245 Fair Oaks Ave")
            .withCountry(TC_US)
            .withPostalCode("91101")
            .withState(State.TC_CA)
            .withAddressType(TC_BUSINESS)
            .withCity("Pasadena"))
          .withWorkPhone("847-279-3399")
          .withName("Hardhat Construction"), TC_INSURED)
        .withPolicyAccount(_accountMap["demo_account:8015"])
        .create(bundle))
    } )

    // Travel Policy 33-514135, Frances Beale
    policies.add(SampleTravelClaims.getFrancesBealePolicyBuilder( _baseDate ).create(bundle))
    
    // travel policy 60-613881, Jeffrey Lieberman
    policies.add(SampleTravelClaims.getJeffreyLiebermanPolicyBuilder( _baseDate ).create(bundle))
    
    return policies?.toTypedArray()
  }

  private function runChunk( runme() ) {
    runme()
  }

}
