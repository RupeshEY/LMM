package gw.sampledata

uses gw.api.databuilder.AccountSpecialHandlingBuilder
uses gw.api.databuilder.CheckBuilder
uses gw.api.databuilder.CheckSetBuilder
uses gw.api.databuilder.ExposureBuilder
uses gw.api.databuilder.PaymentBuilder
uses gw.api.databuilder.RecoveryBuilder
uses gw.api.databuilder.RecoveryReserveBuilder
uses gw.api.databuilder.RecoveryReserveSetBuilder
uses gw.api.databuilder.RecoverySetBuilder
uses gw.api.databuilder.ReserveBuilder
uses gw.api.databuilder.ReserveLineBuilder
uses gw.api.financials.CurrencyAmount
uses gw.api.util.CurrencyUtil
uses gw.pl.persistence.core.Bundle

uses java.util.HashMap

@Export
class SampleCommercialPropertyClaims extends SampleDataBase 
{
  var accountHolders = new HashMap<String,Company>()
  
  construct(inCache : SampleDataCache) {
    super(inCache)
  }

  override property get Description() : String {
    return "Commercial Property Claims and associated Contacts, Policies, Exposures, Notes, ClaimContacts, Activities and Financials"
  }
  
  private function createAccountHolders(bundle:Bundle) 
  {
    var farmSupply = new gw.api.databuilder.CompanyBuilder()
          .withPublicId("ab:4007")
          .withLocalizedTaxID()
          //.withTaxID("100-55-7894")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("52 Dove Ct.")
            .withCountry(TC_US)
            .withPostalCode("91006")
            .withState(State.TC_CA)
            .withAddressType(TC_HOME)
            .withCity("Riverside"))
          .withWorkPhone("309-384-3636")
          .withName("Western Farmer's Supply")
          .create(bundle)
     accountHolders[farmSupply.PublicID] = farmSupply
     
     var paladinAd = new gw.api.databuilder.CompanyBuilder()
          .withPublicId("ab:4008")
          .withLocalizedTaxID()
          //.withTaxID("101-55-7894")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
              .withAddressLine1("8356 Mountain View Rd.")
              .withCountry(TC_US)
              .withPostalCode("91112")
              .withState(State.TC_CA)
              .withAddressType(TC_HOME)
              .withCity("San Bernadino"))
              .withWorkPhone("309-223-7783")
           .withName("Paladin Financial Advisors")
           .create(bundle)
      accountHolders[paladinAd.PublicID] = paladinAd
      
      var melrosePlace = new gw.api.databuilder.CompanyBuilder()
          .withPublicId("ab:4009")
          .withLocalizedTaxID()
          //.withTaxID("109-55-7894")
          .withPrimaryPhone(TC_WORK)
          .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
            .withAddressLine1("725 Pacific Circle")
            .withCountry(TC_US)
            .withPostalCode("91101")
            .withState(State.TC_CA)
            .withAddressType(TC_HOME)
            .withCity("Long Beach"))
          .withWorkPhone("708-223-4756")
          .withName("Melrose Place B&B")
          .create(bundle)
      accountHolders[melrosePlace.PublicID] = melrosePlace
      
      var northLights = new gw.api.databuilder.CompanyBuilder()
            .withPublicId("ab:4010")
            .withLocalizedTaxID()
            //.withTaxID("108-55-7895")
            .withPrimaryPhone(TC_WORK)
            .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
              .withAddressLine1("908 Angels Landing Rd.")
              .withCountry(TC_US)
              .withPostalCode("91352")
              .withState(State.TC_CA)
              .withAddressType(TC_HOME)
              .withCity("Anaheim"))
            .withWorkPhone("708-223-8700")
            .withName("Northern Lights Furniture")
            .create(bundle)
       accountHolders[northLights.PublicID] = northLights
       
       var fishBurn = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("ab:30004")
        .withLocalizedTaxID()
        //.withTaxID("100-55-7894")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1248 Fair Oaks Ave")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Pasadena"))
        .withWorkPhone("847-279-3402")
        .withName("Fishburn Bicycles")
        .create(bundle)
       accountHolders[fishBurn.PublicID] = fishBurn
  }
    
  override function testSampleData(bundle : Bundle) {
    {
      createAccountHolders(bundle)
      
      var documentDemoSample4 = new gw.api.databuilder.DocumentBuilder()
        .withDMS(false)
        .withObsolete(false)
        .withStatus(TC_FINAL)
        .withInbound(false)
        .withDateModified(BaseDate.addDays(0))
        .withName("WeatherNLR3390000.tif")
        .withAuthor("ClaimCenter")
        .create(bundle)

      var documentDemoSample5 = new gw.api.databuilder.DocumentBuilder()
        .withDMS(false)
        .withObsolete(false)
        .withStatus(TC_FINAL)
        .withInbound(false)
        .withDateModified(BaseDate.addDays(0))
        .withName("PhotosNLR3390001.tif")
        .withAuthor("ClaimCenter")
        .create(bundle)

      var contactDemoSample2201 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Bernard")
        .withPublicId("demo_sample:2201")
        .withFirstName("Ivy")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("324 Cleveland St.")
          .withCountry(TC_US)
          .withPostalCode("61704")
          .withState(State.TC_IL)
          .withAddressType(TC_HOME)
          .withCity("Bloomington"))
        .withWorkPhone("309-234-8922")
        .create(bundle)

      var contactDemoSample4007 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:4007")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("52 Dove Ct.")
          .withCountry(TC_US)
          .withPostalCode("91006")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Riverside"))
        .withWorkPhone("309-384-3636")
        .withName("Western Farmer's Supply")
        .create(bundle)

      var contactDemoSample10179 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Caron")
        .withPublicId("demo_sample:10179")
        .withFirstName("Jim")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("255 Alabama St.")
          .withCountry(TC_US)
          .withPostalCode("60606")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Chicago"))
        .withWorkPhone("312-334-2525")
        .create(bundle)

      var accountDemoSample8112 = gw.api.databuilder.AccountBuilder
        .forHolder(createLocalFromAB("demo_acct:4007", accountHolders["ab:4007"], bundle))
        .withPublicId("demo_sample:8112")
        .withAccountNumber("ACC12238")
        .withSpecialHandling(new AccountSpecialHandlingBuilder())
        .create(bundle)

      var policyLocationDemoSample2035 = new gw.api.databuilder.PolicyLocationBuilder()
              .withAddress( new gw.api.databuilder.AddressBuilder()
                .withAddressLine1("2103 Veterans Pkwy.")
                .withCountry(TC_US)
                .withPostalCode("61704")
                .withState(State.TC_IL)
                .withAddressType(TC_BUSINESS)
                .withCity("Bloomington"))
              .create(bundle)

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withLossDate(BaseDate.addDays(-16))
        .withFlaggedReason("coverage question after > 15 days")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy(TC_PROP_FAST)
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged(TC_ISFLAGGED)
        .withLossLocation(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("2103 Veterans Pkwy.")
          .withCountry(TC_US)
          .withPostalCode("61704")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Bloomington"))
        .withLossCause(TC_WIND)
        .withClaimNumber("426-24-366070")
        .withMainContactType(TC_EMPLOYEE)
        .withReportedByType(TC_EMPLOYEE)
        .withLossType(TC_PR)
        .withValidationLevel(TC_NEWLOSS)
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-3266))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(BaseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("23-502011")
          .withPublicId("demo_sample:2011")
          .withTotalProperties(1)
          .withPolicyType(TC_COMMERCIALPROPERTY)
          .withTotalVehicles(0)
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Additional Building Property")
            .withFormNumber("CP 14 15 "))
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Flood Coverage Endorsement")
            .withFormNumber("CP 10 65 "))
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(1)
            .withPolicyLocation(policyLocationDemoSample2035)
            .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(6000000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGCOV)
              .withDeductible(10000bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(2000000bd.ofDefaultCurrency())
              .withType(TC_CPBPPCOV)
              .withDeductible(10000bd.ofDefaultCurrency()))
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(100000bd.ofDefaultCurrency())
               .withType(TC_CPBLDGEXTRAEXPENSECOV)
               .withDeductible(5000bd.ofDefaultCurrency()))
             .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(900000bd.ofDefaultCurrency())
               .withType(TC_CPBLDGBUSINCOMECOV)
               .withDeductible(10000bd.ofDefaultCurrency())))
          .withPolicyAccount(accountDemoSample8112)
          .withContactInRole(contactDemoSample4007, TC_INSURED)
          .withContactInRole(contactDemoSample10179, TC_AGENT))
        .withAssignedGroup(findGroupByName("Midwest Property A"))
        .withJurisdictionState(TC_IL)
        .withSegment(TC_PROP_LOW)
        .withReportedDate(BaseDate.addDays(-16))
        .withCoverageInQuestion(true)
        .withLOBCode(TC_CPLINE)
        .withPublicID("demo_sample:201")
        .withDescription("Broken windows due to windstorm, glass shards caused minor injuries to one person")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("rbarnes"))
        .withMetroReport( new gw.api.databuilder.MetroReportBuilder()
          .withMetroReportType(TC_W)
          .withDoc(documentDemoSample4)
          .withAgentState(TC_IL)
          .withAgentCity("Bloomington")
          .withStatus(TC_RECEIVED))
        .withMetroReport( new gw.api.databuilder.MetroReportBuilder()
          .withMetroReportType(TC_Y)
          .withDoc(documentDemoSample5)
          .withAgentState(TC_IL)
          .withAgentCity("Bloomington")
          .withStatus(TC_RECEIVED))
        .withDocument(documentDemoSample4)
        .withDocument(documentDemoSample5)
        .withContactInRole(contactDemoSample2201, TC_MAINCONTACT)
        .withContactInRole(contactDemoSample2201, TC_REPORTER)
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_FNOL)
          .withAuthoringDate(BaseDate.addDays(-16))
          .withSubject("FNOL notes")
          .withAuthor(findUserByUserName("cbeaumont"))
          .withBody("Insured's representative reported claim.  During a windstorm, several tree branches struck and broke front store windows.  Flying glass injured at least one person in the store."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_EVALUATION)
          .withAuthoringDate(BaseDate.addDays(-14))
          .withSubject("Phone call with insured")
          .withAuthor(findUserByUserName("rbarnes"))
          .withBody("Spoke with store owner.  Only needs one window replaced, and is willing to use our preferred glass repair shop."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_INVESTIGATION)
          .withAuthoringDate(BaseDate.addDays(-15))
          .withSubject("Left message with insured")
          .withAuthor(findUserByUserName("rbarnes"))
          .withBody("Left message with store owner to discuss whether window was already broken."))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-15))
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Midwest Property A"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-12))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_insured"))
          .withSubject("Contact insured")
          .withAssignedUser(findUserByUserName("rbarnes"))
          .withTargetDate(BaseDate.addDays(-15)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(false)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Midwest Property A"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-1))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("coverage"))
          .withSubject("Verify coverage")
          .withAssignedUser(findUserByUserName("rbarnes"))
          .withTargetDate(BaseDate.addDays(-9)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-13))
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Midwest Property A"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-10))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("general_reminder"))
          .withSubject("Set initial reserve")
          .withAssignedUser(findUserByUserName("rbarnes"))
          .withTargetDate(BaseDate.addDays(-13)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-14))
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("BI Review Team"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-9))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_claimant"))
          .withSubject("Contact claimant")
          .withAssignedUser(findUserByUserName("clevitt"))
          .withTargetDate(BaseDate.addDays(-14)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-13))
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("BI Review Team"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-10))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("general_reminder"))
          .withSubject("Set initial reserve")
          .withAssignedUser(findUserByUserName("clevitt"))
          .withTargetDate(BaseDate.addDays(-13)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-9))
          .withMandatory(false)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("BI Review Team"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-1))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("medical_report_claimant"))
          .withSubject("Get medical report")
          .withAssignedUser(findUserByUserName("clevitt"))
          .withTargetDate(BaseDate.addDays(-9)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(false)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Midwest Property A"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(59))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("initial_30day_review"))
          .withSubject("thirty day review")
          .withAssignedUser(findUserByUserName("carkle"))
          .withTargetDate(BaseDate.addDays(14)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-9))
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Midwest Property A"))
          .withType(TC_GENERAL)
          .withDocumentTemplate("AgentNotification.doc")
          .withEscalationDate(BaseDate.addDays(-1))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("claim_ack_letter"))
          .withSubject("Send agent notification")
          .withAssignedUser(findUserByUserName("rbarnes"))
          .withTargetDate(BaseDate.addDays(-9)))
        .create(bundle)

    var coverageForAggLimit = claim.Policy.RiskUnits.singleWhere( \ r -> r.RUNumber == 1 ).Coverages.singleWhere(\ c -> c.Type == TC_CPBLDGEXTRAEXPENSECOV)

      var claimInfoDemoSample201 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:201")
        .withClaimNumber("426-24-366070")
        .onClaim(claim)
        .create(bundle)

      var policyPeriodDemoSample72011 = new gw.api.databuilder.PolicyPeriodBuilder()
        .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claimInfoDemoSample201))
        .withPolicyPeriodType(TC_POLICY)
        .withExpirationDate(BaseDate.addDays(274))
        .withPolicyNumber("23-502011")
        .withPublicId("demo_sample:72011")
        .withPolicyType(TC_COMMERCIALPROPERTY)
        .withEffectiveDate(BaseDate.addDays(-90))
        .create(bundle)

      var aggregateLimitDemoSample90004 = new gw.api.databuilder.AggregateLimitBuilder()
        .withLimitCurrencyAmount(3000000bd.ofDefaultCurrency())
        .withCoverageLine( new gw.api.databuilder.CoverageLineLimitBuilder()
          .withCoverageLine( new gw.api.databuilder.CoverageLineBuilder()
            .withExposureUnitNumber(1)
            .withCoverageType(TC_CPBLDGEXTRAEXPENSECOV)
            .withCoverageSubtype(TC_PROPERTYCOVERAGE)
            .withCoverage(coverageForAggLimit)
            .onPolicyPeriod(policyPeriodDemoSample72011)) )
        .withPublicId("demo_sample:90004")
        .withLimitType(AggregateLimitType.TC_NONE)
        .onPolicyPeriod(policyPeriodDemoSample72011)
        .create(bundle)
        

/*  KenB 7/2/10: It makes no sense to have a liability exposure on a CP policy
    It would probably make sense to fix this example.
*/
      var exposureDemoSample501 = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(false)
        .withLossParty(TC_THIRD_PARTY)
        .withExposureType(TC_MEDPAY)
        .withAssignedGroup(findGroupByName("BI Review Team"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_INJURY_FAST)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_IL)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_PAMEDPAYCOV)
        .withSegment(TC_INJURY_LOW)
        .withClaimantType(TC_BYSTANDER)
        .withClaimOrder(2)
        .withPublicID("demo_sample:501")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("clevitt"))
        .onClaim(claim)
        .withCoverageSubType(TC_PAMEDPAYCOV)
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
          .withGeneralInjuryType(TC_SPECIFIC)
          .withSeverity(TC_MINOR)
          .withDescription("Minor cuts on face, hands, and arms")
          .withMedicalTreatmentType(TC_ONE_DOCTOR)
          .withDetailedInjuryType(TC_40)
          .withLostWages(false)
          .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
            .withPrimaryBodyPart(TC_MULTIPLE)
            .withOrdering(100))
          .withContactInRole(contactDemoSample2201, TC_INJURED))
        .withContactInRole(contactDemoSample2201, TC_CLAIMANT)
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_MEDICAL)
          .withAuthoringDate(BaseDate.addDays(-13))
          .withSubject("Phone call with claimant")
          .onClaim(claim)
          .withAuthor(findUserByUserName("clevitt"))
          .withBody("Spoke with claimant.  She suffered minor cuts and was taken to the hospital and released.  She will be sending us a bill after her health insurance pays.  Note that according to her, the window that broke was already cracked."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_INVESTIGATION)
          .withAuthoringDate(BaseDate.addDays(-6))
          .withSubject("Mail received from claimant")
          .onClaim(claim)
          .withAuthor(findUserByUserName("clevitt"))
          .withBody("Received EOB from claimant and paid amount not covered by health insurance."))
        .create(bundle)


      var exposureDemoSample201 = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(false)
        .withLossParty(TC_INSURED)
        .withExposureType(TC_PROPERTYDAMAGE)
        .withAssignedGroup(findGroupByName("Midwest Property A"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_PROP_FAST)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_IL)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_CPBLDGCOV)
        .withSegment(TC_PROP_LOW)
        .withClaimantType(TC_INSURED)
        .withClaimOrder(1)
        .withPublicID("demo_sample:201")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("rbarnes"))
        .onClaim(claim)
        .withCoverageSubType(TC_CPBLDGCOV)
        .withIncident( new gw.api.databuilder.FixedPropertyIncidentBuilder()
          .withSeverity(TC_MINOR)
          .withProperty(policyLocationDemoSample2035)
          .withDescription("One large glass window broken by flying debris during storm"))
        .withContactInRole(contactDemoSample4007, TC_CLAIMANT)
        .create(bundle)


      var transactionSetDemoSample20005 = new gw.api.databuilder.ReserveSetBuilder()
        .withApprovalDate(BaseDate.addDays(-9))
        .withRequestingUser(findUserByUserName("rbarnes"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var reserveLineDemoSample17 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample201)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_OTHER)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample18 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample501)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_OTHER)
        .withClaim(claim)
        .create(bundle)

      var transactionDemoSample12011 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample17)
        .onExposure(exposureDemoSample201)
        .onTransactionSet(transactionSetDemoSample20005)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_OTHER)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Auto inspection fee")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(1000bd.ofDefaultCurrency())
          .withClaimAmount(1000bd.ofDefaultCurrency())
          .withReservingAmount(1000bd.ofDefaultCurrency())
          .withTransactionAmount(1000bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12012 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample18)
        .onExposure(exposureDemoSample501)
        .onTransactionSet(transactionSetDemoSample20005)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_OTHER)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Injury report fee")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12013 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample18)
        .onExposure(exposureDemoSample501)
        .onTransactionSet(transactionSetDemoSample20005)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_OTHER)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("BI specialist fee")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(1000bd.ofDefaultCurrency())
          .withClaimAmount(1000bd.ofDefaultCurrency())
          .withReservingAmount(1000bd.ofDefaultCurrency())
          .withTransactionAmount(1000bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)
    }

    {
      var addressDemoSample2012 = new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("1010 S. Main St.")
        .withCountry(TC_US)
        .withPostalCode("61761")
        .withState(State.TC_IL)
        .withAddressType(TC_BUSINESS)
        .withCity("Normal")
        .create(bundle)

      var contactDemoSample4008 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:4008")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("8356 Mountain View Rd.")
          .withCountry(TC_US)
          .withPostalCode("91112")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("San Bernadino"))
        .withWorkPhone("309-223-7783")
        .withName("Paladin Financial Advisors")
        .create(bundle)

      var contactDemoSample10180 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Caron")
        .withPublicId("demo_sample:10180")
        .withFirstName("Jim")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("255 Alabama St.")
          .withCountry(TC_US)
          .withPostalCode("60606")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Chicago"))
        .withWorkPhone("312-334-2525")
        .create(bundle)
        
      var accountDemoSample8113 = gw.api.databuilder.AccountBuilder
          .forHolder(createLocalFromAB("demo_acct:4008", accountHolders["ab:4008"], bundle))
          .withPublicId("demo_sample:8113")
          .withAccountNumber("ACC12239")
          .withSpecialHandling(new AccountSpecialHandlingBuilder())
          .create(bundle)
          
      var policyLocation = new gw.api.databuilder.PolicyLocationBuilder()
              .withAddress(addressDemoSample2012).create(bundle)

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withLossDate(BaseDate.addDays(-4))
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy(TC_PROP_FAST)
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged(TC_NEVERFLAGGED)
        .withLossLocation(addressDemoSample2012)
        .withLossCause(TC_BURGLARY)
        .withClaimNumber("426-24-366071")
        .withMainContactType(TC_EMPLOYEE)
        .withReportedByType(TC_EMPLOYEE)
        .withLossType(TC_PR)
        .withValidationLevel(TC_NEWLOSS)
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-3266))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(BaseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("23-502012")
          .withPublicId("demo_sample:2012")
          .withTotalProperties(1)
          .withPolicyType(TC_COMMERCIALPROPERTY)
          .withTotalVehicles(0)
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(1)
            .withPolicyLocation(policyLocation)
            .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(3000000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGCOV)
              .withDeductible(10000bd.ofDefaultCurrency()))
            .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(500000bd.ofDefaultCurrency())
              .withType(TC_CPBPPCOV)
              .withDeductible(5000bd.ofDefaultCurrency()))
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
                 .withExposureLimit(250000bd.ofDefaultCurrency())
                 .withType(TC_IMSIGNCOV)
                 .withDeductible(2500bd.ofDefaultCurrency()))
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(250000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGEXTRAEXPENSECOV)
              .withDeductible(2500bd.ofDefaultCurrency()))
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(1000000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGBUSINCOMECOV)
              .withDeductible(10000bd.ofDefaultCurrency())))
          .withRiskUnit(new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(2)
            .withPolicyLocation(policyLocation))
          .withRiskUnit(new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(3)
            .withPolicyLocation(policyLocation))
          .withPolicyAccount(accountDemoSample8113)
          .withContactInRole(contactDemoSample4008, TC_INSURED)
          .withContactInRole(contactDemoSample10180, TC_AGENT))
        .withAssignedGroup(findGroupByName("Midwest Property A"))
        .withJurisdictionState(TC_IL)
        .withSegment(TC_PROP_LOW)
        .withReportedDate(BaseDate.addDays(0))
        .withCoverageInQuestion(false)
        .withLOBCode(TC_CPLINE)
        .withPublicID("demo_sample:202")
        .withDescription("Apparent break-in overnight resulting in lost computers and other equipment")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("rbarnes"))
        .withContactInRole(contactDemoSample10180, TC_MAINCONTACT)
        .withContactInRole(contactDemoSample10180, TC_REPORTER)
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_FNOL)
          .withAuthoringDate(BaseDate.addDays(0))
          .withSubject("FNOL notes")
          .withAuthor(findUserByUserName("cbeaumont"))
          .withBody("Insured's representative reported claim.  On arriving at the office, she found the office door open and several computers missing."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_INVESTIGATION)
          .withAuthoringDate(BaseDate.addDays(0))
          .withSubject("Left message with insured")
          .withAuthor(findUserByUserName("rbarnes"))
          .withBody("Called and left message with main contact.  Need to find out just what was stolen and do an inventory."))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(0))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Midwest Property A"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(4))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_insured"))
          .withSubject("Contact insured")
          .withAssignedUser(findUserByUserName("rbarnes"))
          .withTargetDate(BaseDate.addDays(1)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(0))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Midwest Property A"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(6))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("general_reminder"))
          .withSubject("Set initial reserve")
          .withAssignedUser(findUserByUserName("rbarnes"))
          .withTargetDate(BaseDate.addDays(3)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(0))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Midwest Property A"))
          .withType(TC_GENERAL)
          .withDocumentTemplate("AgentNotification.doc")
          .withEscalationDate(BaseDate.addDays(15))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("claim_ack_letter"))
          .withSubject("Send agent notification")
          .withAssignedUser(findUserByUserName("rbarnes"))
          .withTargetDate(BaseDate.addDays(7)))
        .create(bundle)

      var coverageForAggLimit = claim.Policy.RiskUnits.singleWhere( \ r -> r.RUNumber == 1 ).Coverages.singleWhere(\ c -> c.Type == TC_CPBLDGEXTRAEXPENSECOV)

      var claimInfoDemoSample202 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:202")
        .withClaimNumber("426-24-366071")
        .onClaim(claim)
        .create(bundle)

      var policyPeriodDemoSample72012 = new gw.api.databuilder.PolicyPeriodBuilder()
        .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claimInfoDemoSample202))
        .withPolicyPeriodType(TC_POLICY)
        .withExpirationDate(BaseDate.addDays(274))
        .withPolicyNumber("23-502012")
        .withPublicId("demo_sample:72012")
        .withPolicyType(TC_COMMERCIALPROPERTY)
        .withEffectiveDate(BaseDate.addDays(-90))
        .create(bundle)

      var aggregateLimitDemoSample90005 = new gw.api.databuilder.AggregateLimitBuilder()
        .withLimitCurrencyAmount(3000000bd.ofDefaultCurrency())
        .withCoverageLine( new gw.api.databuilder.CoverageLineLimitBuilder()
          .withCoverageLine( new gw.api.databuilder.CoverageLineBuilder()
            .withExposureUnitNumber(1)
            .withCoverageType(TC_CPBLDGEXTRAEXPENSECOV)
            .withCoverageSubtype(TC_PROPERTYCOVERAGE)
            .withCoverage(coverageForAggLimit)
            .onPolicyPeriod(policyPeriodDemoSample72012)) )
        .withPublicId("demo_sample:90005")
        .withLimitType(AggregateLimitType.TC_NONE)
        .onPolicyPeriod(policyPeriodDemoSample72012)
        .create(bundle)
      
      var personalPropDmg = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(false)
        .withLossParty(TC_INSURED)
        .withExposureType(TC_PERSONALPROPERTYDAMAGE)
        .withAssignedGroup(findGroupByName("Midwest Property A"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_PROP_FAST)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_IL)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_BOPPERSPROPOFFPREM)
        .withSegment(TC_PROP_LOW)
        .withClaimantType(TC_INSURED)
        .withClaimOrder(1)
        .withPublicID("demo_sample:202")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("rbarnes"))
        .onClaim(claim)
        .withCoverageSubType(TC_BOPPERSPROPOFFPREM)
        .withIncident( new gw.api.databuilder.MobilePropertyIncidentBuilder()
          .withSeverity(TC_MINOR)
          .withDescription("Equipment stolen"))
        .withContactInRole(contactDemoSample4008, TC_CLAIMANT)
        .create(bundle)


    var rl1 = new ReserveLineBuilder()
        .withClaim(claim)
        .withExposure(personalPropDmg)
        .withCostType(CostType.TC_CLAIMCOST)
        .withCostCategory(CostCategory.TC_INDEMNITY).create(bundle)

    ReserveBuilder.uiReadyReserve(personalPropDmg, new CurrencyAmount(800000, claim.Currency))
      .withReserveLine(rl1).create(bundle)
    var check = CheckBuilder.uiReadyCheckWithoutPaymentOrCheckSet(claim).withStatus(TransactionStatus.TC_ISSUED).create(bundle)
    var checkSet = new CheckSetBuilder()
                         .onClaim( claim )
                         .withCheck( check )
                         .create(bundle)
    new PaymentBuilder()
        .onCheck(check)
        .onClaim(claim)
        .onExposure(rl1.Exposure)
        .withCostType(rl1.CostType)
        .withCostCategory(rl1.CostCategory)
        .withReportingCurrency()
        .erodesReserves(true)
        .withPaymentType( PaymentType.TC_PARTIAL )
        .withLineItem(new CurrencyAmount(200000, claim.Currency), null)
        .onTransactionSet(checkSet)
        .withStatus(TransactionStatus.TC_SUBMITTED)
        .create(bundle)
    var recovery1 = RecoveryBuilder.uiReadyRecovery(claim, new CurrencyAmount(100000, claim.Currency))
            .withReserveLine(rl1)
            .withRecoveryCategory(TC_UNSPECIFIED)
            .onTransactionSet(new RecoverySetBuilder()
                    .withRequestingUser(claim.AssignedUser)
                    .withApprovalStatus(ApprovalStatus.TC_APPROVED)
                    .withApprovalDate(claim.LossDate)
                    .create(bundle))            
            .create(bundle)  
    var recoveryReserve2 = new RecoveryReserveBuilder().onClaim(claim)
            .onExposure(rl1.Exposure)
            .withReserveLine(rl1)
            .withRecoveryCategory(TC_UNSPECIFIED)
            .withLineItem(new CurrencyAmount(100000, claim.Currency), TC_OTHER)
            .withStatus(TransactionStatus.TC_SUBMITTING)
            .onTransactionSet(new RecoveryReserveSetBuilder()
                    .withRequestingUser(claim.AssignedUser)
                    .withApprovalStatus(ApprovalStatus.TC_APPROVED)
                    .withApprovalDate(claim.LossDate)
                    .create(bundle))
            .create(bundle)  

    var rl2 = new ReserveLineBuilder()
        .withClaim(claim)
        .withExposure(personalPropDmg)
        .withCostType(CostType.TC_AOEXPENSE)
        .withCostCategory(CostCategory.TC_INDEMNITY).create(bundle)

    ReserveBuilder.uiReadyReserve(rl2.Exposure, new CurrencyAmount(25000, claim.Currency))
      .withReserveLine(rl2).create(bundle)
    var check1 = CheckBuilder.uiReadyCheckWithoutPaymentOrCheckSet(claim).withStatus(TransactionStatus.TC_ISSUED).create(bundle)
    var checkSet1 = new CheckSetBuilder()
                         .onClaim( claim )
                         .withCheck( check1 )
                         .create(bundle)
    new PaymentBuilder()
        .onCheck(check1)
        .onClaim(claim)
        .onExposure(rl2.Exposure)
        .withCostType(rl2.CostType)
        .withCostCategory(rl2.CostCategory)
        .withReportingCurrency()
        .erodesReserves(true)
        .withPaymentType( PaymentType.TC_PARTIAL )
        .withLineItem(new CurrencyAmount(5000, claim.Currency), null)
        .onTransactionSet(checkSet1)
        .withStatus(TransactionStatus.TC_SUBMITTED)
        .create(bundle)

    
    }
    {
      var addressDemoSample2021 = new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("2002 East North Ave.")
        .withCountry(TC_US)
        .withPostalCode("60160")
        .withState(State.TC_IL)
        .withAddressType(TC_BUSINESS)
        .withCity("Melrose Park")
        .create(bundle)

      var contactDemoSample2029 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:2029")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("888 Michigan Ave")
          .withCountry(TC_US)
          .withPostalCode("61571")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Washington"))
        .withWorkPhone("309-234-9876")
        .withName("Comerica Bank")
        .create(bundle)

      var contactDemoSample2030 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:2030")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("101 Park Street")
          .withCountry(TC_US)
          .withPostalCode("61571")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Washington"))
        .withWorkPhone("309-234-9876")
        .withName("Union Bank of California")
        .create(bundle)      

      var contactDemoSample4009 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:4009")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("725 Pacific Circle")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Long Beach"))
        .withWorkPhone("708-223-4756")
        .withName("Melrose Place B&B")
        .create(bundle)

      var contactDemoSample3036 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Hammet")
        .withPublicId("demo_sample:3036")
        .withFirstName("Lance")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("255 Commerce Way")
          .withCountry(TC_US)
          .withPostalCode("91155")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Los Angeles"))
        .withWorkPhone("213-457-6378")
        .create(bundle)

      var contactDemoSample10189 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Caron")
        .withPublicId("demo_sample:10189")
        .withFirstName("Jim")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("255 Alabama St.")
          .withCountry(TC_US)
          .withPostalCode("60606")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Chicago"))
        .withWorkPhone("312-334-2525")
        .create(bundle)
        
     var accountDemoSample8116 = gw.api.databuilder.AccountBuilder
        .forHolder(createLocalFromAB("demo_acct:4009", accountHolders["ab:4009"], bundle))
        .withPublicId("demo_sample:8116")
        .withAccountNumber("ACC12240")
        .withSpecialHandling(new AccountSpecialHandlingBuilder())
        .create(bundle)
        
     var policyLocation999 = new gw.api.databuilder.PolicyLocationBuilder()
              .withAddress( new gw.api.databuilder.AddressBuilder()
                .withAddressLine1("2002 East North Ave.")
                .withCountry(TC_US)
                .withPostalCode("60160")
                .withState(State.TC_IL)
                .withAddressType(TC_BUSINESS)
                .withCity("Melrose Park"))
              .withLienholder(new gw.api.databuilder.PropertyOwnerBuilder().withLienholder(contactDemoSample2029))
              .withLienholder(new gw.api.databuilder.PropertyOwnerBuilder().withLienholder(contactDemoSample2030))

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withLossDate(BaseDate.addDays(-16))
        .withFlaggedReason("coverage question after > 15 days")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy(TC_PROP_FAST)
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged(TC_NEVERFLAGGED)
        .withLossLocation(addressDemoSample2021)
        .withLossCause(TC_WIND)
        .withClaimNumber("426-24-366072")
        .withMainContactType(TC_EMPLOYEE)
        .withReportedByType(TC_EMPLOYEE)
        .withLossType(TC_PR)
        .withValidationLevel(TC_NEWLOSS)
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-3266))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(BaseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("23-502021")
          .withPublicId("demo_sample:2021")
          .withTotalProperties(1)
          .withPolicyType(TC_COMMERCIALPROPERTY)
          .withTotalVehicles(0)
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Additional Building Property")
            .withFormNumber("CP 14 15 "))
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Flood Coverage Endorsement")
            .withFormNumber("CP 10 65 "))
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(1)
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(3500000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGCOV)
              .withDeductible(10000bd.ofDefaultCurrency()))
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(2450000bd.ofDefaultCurrency())
              .withType(TC_CPBPPCOV)
              .withDeductible(10000bd.ofDefaultCurrency()))
            .withCoverage(new gw.api.databuilder.PropertyCoverageBuilder()
              .withExposureLimit(50000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGEXTRAEXPENSECOV)
              .withDeductible(5000bd.ofDefaultCurrency()))
            .withPolicyLocation( policyLocation999))
          .withRiskUnit(new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(2)
            .withPolicyLocation( policyLocation999))
          .withPolicyAccount(accountDemoSample8116)
          .withContactInRole(contactDemoSample4009, TC_INSURED)
          .withContactInRole(contactDemoSample10189, TC_AGENT))
        .withAssignedGroup(findGroupByName("Midwest Property A"))
        .withJurisdictionState(TC_IL)
        .withSegment(TC_PROP_LOW)
        .withReportedDate(BaseDate.addDays(-16))
        .withCoverageInQuestion(false)
        .withLOBCode(TC_CPLINE)
        .withPublicID("demo_sample:203")
        .withDescription("Broken windows due to windstorm, glass shards caused minor injuries to one person")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("ccarley"))
        .withContactInRole(contactDemoSample3036, TC_MAINCONTACT)
        .withContactInRole(contactDemoSample3036, TC_REPORTER)
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_FNOL)
          .withAuthoringDate(BaseDate.addDays(-16))
          .withSubject("FNOL notes")
          .withAuthor(findUserByUserName("cbeaumont"))
          .withBody("Insured's representative reported claim.  During a windstorm, several tree branches struck and broke front store windows.  Flying glass injured at least one person in the store."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_EVALUATION)
          .withAuthoringDate(BaseDate.addDays(-13))
          .withSubject("Phone call with insured")
          .withAuthor(findUserByUserName("ccarley"))
          .withBody("Spoke with store owner.  Only needs one window replaced, and is willing to use our preferred glass repair shop."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_INVESTIGATION)
          .withAuthoringDate(BaseDate.addDays(-15))
          .withSubject("Left message with insured")
          .withAuthor(findUserByUserName("ccarley"))
          .withBody("Left message with store owner to discuss whether window was already broken."))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-15))
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Midwest Property A"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-12))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_insured"))
          .withSubject("Contact insured")
          .withAssignedUser(findUserByUserName("ccarley"))
          .withTargetDate(BaseDate.addDays(-15)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(false)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Midwest Property A"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-1))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("coverage"))
          .withSubject("Verify coverage")
          .withAssignedUser(findUserByUserName("ccarley"))
          .withTargetDate(BaseDate.addDays(-9)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-13))
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Midwest Property A"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-10))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("general_reminder"))
          .withSubject("Set initial reserve")
          .withAssignedUser(findUserByUserName("ccarley"))
          .withTargetDate(BaseDate.addDays(-13)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-14))
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("BI Review Team"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-9))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_claimant"))
          .withSubject("Contact claimant")
          .withAssignedUser(findUserByUserName("clevitt"))
          .withTargetDate(BaseDate.addDays(-14)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-13))
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("BI Review Team"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-10))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("general_reminder"))
          .withSubject("Set initial reserve")
          .withAssignedUser(findUserByUserName("clevitt"))
          .withTargetDate(BaseDate.addDays(-13)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-9))
          .withMandatory(false)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("BI Review Team"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-1))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("medical_report_claimant"))
          .withSubject("Get medical report")
          .withAssignedUser(findUserByUserName("clevitt"))
          .withTargetDate(BaseDate.addDays(-9)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-16))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(false)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Midwest Property A"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(59))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("initial_30day_review"))
          .withSubject("thirty day review")
          .withAssignedUser(findUserByUserName("carkle"))
          .withTargetDate(BaseDate.addDays(14)))
        .create(bundle)

      var claimInfoDemoSample203 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:203")
        .withClaimNumber("426-24-366072")
        .onClaim(claim)
        .create(bundle)

      var policyPeriodDemoSample72021 = new gw.api.databuilder.PolicyPeriodBuilder()
        .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claimInfoDemoSample203))
        .withPolicyPeriodType(TC_POLICY)
        .withExpirationDate(BaseDate.addDays(274))
        .withPolicyNumber("23-502021")
        .withPublicId("demo_sample:72021")
        .withPolicyType(TC_COMMERCIALPROPERTY)
        .withEffectiveDate(BaseDate.addDays(-90))
        .create(bundle)

//      var exposureDemoSample510 = new gw.api.databuilder.ExposureBuilder()
//        .withOtherCoverage(false)
//        .withLossParty("third_party")
//        .withExposureType("MedPay")
//        .withAssignedGroup(findGroupByName("BI Review Team"))
//        .withAssignmentStatus("assigned")
//        .withStrategy("injury_fast")
//        .withProgress("investigation")
//        .withJurisdictionState("IL")
//        .withAssignmentDate(BaseDate.addDays(0))
//        .withPrimaryCoverage("BOPMedExpCov")
//        .withSegment("injury_low")
//        .withClaimantType("bystander")
//        .withClaimOrder(2)
//        .withPublicID("demo_sample:510")
//        .withState("open")
//        .withAssignedUser(findUserByUserName("clevitt"))
//        .onClaim(claim)
//        .withCoverageSubType("BOPMedExpCov")
//        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
//          .withGeneralInjuryType("specific")
//          .withSeverity("minor")
//          .withDescription("Minor cuts on face, hands, and arms")
//          .withMedicalTreatmentType("one_doctor")
//          .withDetailedInjuryType("40")
//          .withLostWages(false)
//          .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
//            .withPrimaryBodyPart("multiple")
//            .withOrdering(100))
//          .withContactInRole(contactDemoSample3036, "injured"))
//        .withContactInRole(contactDemoSample3036, "claimant")
//        .withNote( new gw.api.databuilder.NoteBuilder()
//          .withTopic("medical")
//          .withAuthoringDate(BaseDate.addDays(-12))
//          .withSubject("Phone call with claimant")
//          .onClaim(claim)
//          .withAuthor(findUserByUserName("clevitt"))
//          .withBody("Spoke with claimant.  She suffered minor cuts and was taken to the hospital and released.  She will be sending us a bill after her health insurance pays.  Note that according to her, the window that broke was already cracked."))
//        .withNote( new gw.api.databuilder.NoteBuilder()
//          .withTopic("investigation")
//          .withAuthoringDate(BaseDate.addDays(-2))
//          .withSubject("Mail received from claimant")
//          .onClaim(claim)
//          .withAuthor(findUserByUserName("clevitt"))
//          .withBody("Received EOB from claimant and paid amount not covered by health insurance."))
//        .create(bundle)

//      var exposureDemoSample502 = new gw.api.databuilder.ExposureBuilder()
//        .withOtherCoverage(false)
//        .withLossParty("third_party")
//        .withExposureType("GeneralDamage")
//        .withAssignedGroup(findGroupByName("BI Review Team"))
//        .withAssignmentStatus("assigned")
//        .withStrategy("injury_fast")
//        .withProgress("investigation")
//        .withJurisdictionState("IL")
//        .withAssignmentDate(BaseDate.addDays(0))
//        .withPrimaryCoverage("BOPLiabilityCov")
//        .withSegment("injury_low")
//        .withClaimantType("bystander")
//        .withClaimOrder(3)
//        .withPublicID("demo_sample:502")
//        .withState("open")
//        .withAssignedUser(findUserByUserName("clevitt"))
//        .onClaim(claim)
//        .withIncident( new gw.api.databuilder.IncidentBuilder()
//          .withSeverity("minor")
//          .withDescription("General damage"))
//        .withContactInRole(contactDemoSample3036, "claimant")
//        .create(bundle)

//      var exposureDemoSample203 = new gw.api.databuilder.ExposureBuilder()
//        .withOtherCoverage(false)
//        .withLossParty("insured")
//        .withExposureType("PropertyDamage")
//        .withAssignedGroup(findGroupByName("Midwest Property A"))
//        .withAssignmentStatus("assigned")
//        .withStrategy("prop_fast")
//        .withProgress("investigation")
//        .withJurisdictionState("IL")
//        .withAssignmentDate(BaseDate.addDays(0))
//        .withPrimaryCoverage("CPBldgCov")
//        .withSegment("prop_low")
//        .withClaimantType("insured")
//        .withClaimOrder(1)
//        .withPublicID("demo_sample:203")
//        .withState("open")
//        .withAssignedUser(findUserByUserName("ccarley"))
//        .onClaim(claim)
//        .withCoverageSubType("CPBldgCov")
//        .withIncident( new gw.api.databuilder.FixedPropertyIncidentBuilder()
//          .withSeverity("minor")
//          .withProperty(new gw.api.databuilder.PolicyLocationBuilder()
//            .withAddress(addressDemoSample2021)
//            .withLienholder(new gw.api.databuilder.PropertyOwnerBuilder().withLienholder(contactDemoSample2029))
//            .withLienholder(new gw.api.databuilder.PropertyOwnerBuilder().withLienholder(contactDemoSample2030)))
//          .withDescription("One large glass window broken by flying debris during storm"))
//        .withContactInRole(contactDemoSample4009, "claimant")
//        .create(bundle)
      

//      var transactionSetDemoSample20030 = new gw.api.databuilder.ReserveSetBuilder()
//        .withApprovalDate(BaseDate.addDays(-9))
//        .withRequestingUser(findUserByUserName("ccarley"))
//        .withApprovalStatus("approved")
//        .onClaim(claim)
//        .create(bundle)
//
//      var reserveLineDemoSample27 = new gw.api.databuilder.ReserveLineBuilder()
//        .withExposure(exposureDemoSample203)
//        .withCostType("aoexpense")
//        .withCostCategory("other")
//        .withClaim(claim)
//        .create(bundle)
//
//      var reserveLineDemoSample28 = new gw.api.databuilder.ReserveLineBuilder()
//        .withExposure(exposureDemoSample510)
//        .withCostType("aoexpense")
//        .withCostCategory("other")
//        .withClaim(claim)
//        .create(bundle)
//
//      var transactionDemoSample12029 = new gw.api.databuilder.ReserveBuilder()
//        .withReserveLine(reserveLineDemoSample27)
//        .onExposure(exposureDemoSample203)
//        .onTransactionSet(transactionSetDemoSample20030)
//        .withCostType("aoexpense")
//        .withCostCategory("other")
//        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
//        .withStatus("submitted")
//        .onClaim(claim)
//        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
//        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
//          .withComments("Auto inspection fee")
//          .withClaimForExAmount(0)
//          .withReportingAmount(1000)
//          .withClaimAmount(1000)
//          .withTransactionAmount(1000)
//          .withLineCategory("other")
//          .withReportingForExAmount(0))
//        .create(bundle)
//
//      var transactionDemoSample12030 = new gw.api.databuilder.ReserveBuilder()
//        .withReserveLine(reserveLineDemoSample28)
//        .onExposure(exposureDemoSample510)
//        .onTransactionSet(transactionSetDemoSample20030)
//        .withCostType("aoexpense")
//        .withCostCategory("other")
//        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
//        .withStatus("submitted")
//        .onClaim(claim)
//        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
//        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
//          .withComments("Injury report fee")
//          .withClaimForExAmount(0)
//          .withReportingAmount(500)
//          .withClaimAmount(500)
//          .withTransactionAmount(500)
//          .withLineCategory("other")
//          .withReportingForExAmount(0))
//        .create(bundle)

//      var transactionDemoSample12031 = new gw.api.databuilder.ReserveBuilder()
//        .withReserveLine(reserveLineDemoSample28)
//        .onExposure(exposureDemoSample510)
//        .onTransactionSet(transactionSetDemoSample20030)
//        .withCostType("aoexpense")
//        .withCostCategory("other")
//        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
//        .withStatus("submitted")
//        .onClaim(claim)
//        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
//        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
//          .withComments("BI specialist fee")
//          .withClaimForExAmount(0)
//          .withReportingAmount(1000)
//          .withClaimAmount(1000)
//          .withTransactionAmount(1000)
//          .withLineCategory("other")
//          .withReportingForExAmount(0))
//        .create(bundle)

    var bldgDamage = ExposureBuilder.uiReadyPropertyDamage(TC_INSURED)
      .withExposureType(ExposureType.TC_PROPERTYDAMAGE)
      .withPrimaryCoverage(TC_BOPBUILDINGCOV)
      .withCoverageSubType(TC_BOPBUILDINGCOV)
      .onClaim(claim)
      .withClaimOrder(5)
      .create(bundle)


    var rl1 = new ReserveLineBuilder()
        .withClaim(claim)
        .withExposure(bldgDamage)
        .withCostType(CostType.TC_CLAIMCOST)
        .withCostCategory(CostCategory.TC_INDEMNITY).create(bundle)

    ReserveBuilder.uiReadyReserve(bldgDamage, new CurrencyAmount(1000000, claim.Currency))
      .withReserveLine(rl1).create(bundle)
    ReserveBuilder.uiReadyReserve(bldgDamage, new CurrencyAmount(550000, claim.Currency))
      .withReserveLine(rl1).create(bundle)
    var check1 = CheckBuilder.uiReadyCheckWithoutPaymentOrCheckSet(claim).withStatus(TransactionStatus.TC_ISSUED).create(bundle)
    var checkSet1 = new CheckSetBuilder()
                         .onClaim( claim )
                         .withCheck( check1 )
                         .create(bundle)
    new PaymentBuilder()
        .onCheck(check1)
        .onClaim(claim)
        .onExposure(rl1.Exposure)
        .withCostType(rl1.CostType)
        .withCostCategory(rl1.CostCategory)
        .withReportingCurrency()
        .erodesReserves(true)
        .withPaymentType( PaymentType.TC_PARTIAL )
        .withLineItem(new CurrencyAmount(550000, claim.Currency), null)
        .onTransactionSet(checkSet1)
        .withStatus(TransactionStatus.TC_SUBMITTED)
        .create(bundle)

    var rl2 = new ReserveLineBuilder()
        .withClaim(claim)
        .withExposure(bldgDamage)
        .withCostType(CostType.TC_AOEXPENSE)
        .withCostCategory(CostCategory.TC_INDEMNITY).create(bundle)

    ReserveBuilder.uiReadyReserve(rl2.Exposure, new CurrencyAmount(50000, claim.Currency))
      .withReserveLine(rl2).create(bundle)

    var personalPropertyDamage = ExposureBuilder.uiReadyPersonalPropertyDamage()
      .withPrimaryCoverage(TC_BOPBURGROBCOV)
      .withCoverageSubType(TC_BOPPERSONALEFFECTS)
      .onClaim(claim)
      .withClaimOrder(6)
      .create(bundle)
    var rl3 = new ReserveLineBuilder()
        .withClaim(claim)
        .withExposure(personalPropertyDamage)
        .withCostType(CostType.TC_CLAIMCOST)
        .withCostCategory(CostCategory.TC_INDEMNITY).create(bundle)

    ReserveBuilder.uiReadyReserve(rl3.Exposure, new CurrencyAmount(200000, claim.Currency))
      .withReserveLine(rl3).create(bundle)

    var businessLostIncome = ExposureBuilder.uiReadyLossOfUseDamages()
      .onClaim(claim)
      .withClaimOrder(7)
      .create(bundle)
    var rl4 = new ReserveLineBuilder()
        .withClaim(claim)
        .withExposure(businessLostIncome)
        .withCostType(CostType.TC_CLAIMCOST)
        .withCostCategory(CostCategory.TC_INDEMNITY).create(bundle)

    ReserveBuilder.uiReadyReserve(rl4.Exposure, new CurrencyAmount(700000, claim.Currency))
      .withReserveLine(rl4).create(bundle)
    var check2 = CheckBuilder.uiReadyCheckWithoutPaymentOrCheckSet(claim).withStatus(TransactionStatus.TC_ISSUED).create(bundle)
    var checkSet2 = new CheckSetBuilder()
                         .onClaim( claim )
                         .withCheck( check2 )
                         .create(bundle)
    new PaymentBuilder()
        .onCheck(check2)
        .onClaim(claim)
        .onExposure(rl4.Exposure)
        .withCostType(rl4.CostType)
        .withCostCategory(rl4.CostCategory)
        .withReportingCurrency()
        .erodesReserves(true)
        .withPaymentType( PaymentType.TC_PARTIAL )
        .withLineItem(new CurrencyAmount(200000, claim.Currency), LineCategory.TC_DOCTOR)
        .onTransactionSet(checkSet2)
        .withStatus(TransactionStatus.TC_SUBMITTED)
        .create(bundle)


    }
    {
      var addressDemoSample2022 = new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("3232 Brooklyn Drive")
        .withCountry(TC_US)
        .withPostalCode("60706")
        .withState(State.TC_IL)
        .withAddressType(TC_BUSINESS)
        .withCity("Norridge")
        .create(bundle)

      var contactDemoSample4010 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:4010")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("908 Angels Landing Rd.")
          .withCountry(TC_US)
          .withPostalCode("91352")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Anaheim"))
        .withWorkPhone("708-223-8700")
        .withName("Northern Lights Furniture")
        .create(bundle)

      var contactDemoSample10190 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Caron")
        .withPublicId("demo_sample:10190")
        .withFirstName("Jim")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("255 Alabama St.")
          .withCountry(TC_US)
          .withPostalCode("60606")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Chicago"))
        .withWorkPhone("312-334-2525")
        .create(bundle)
        
      var accountDemoSample8114 = gw.api.databuilder.AccountBuilder
         .forHolder(this.createLocalFromAB("demo_acct:4010", accountHolders["ab:4010"], bundle))
         .withPublicId("demo_sample:8114")
         .withAccountNumber("ACC12241")
         .withSpecialHandling(new AccountSpecialHandlingBuilder())
         .create(bundle)

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withLossDate(BaseDate.addDays(-5))
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy(TC_PROP_FAST)
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged(TC_NEVERFLAGGED)
        .withLossLocation(addressDemoSample2022)
        .withLossCause(TC_BURGLARY)
        .withClaimNumber("426-24-366073")
        .withMainContactType(TC_EMPLOYEE)
        .withReportedByType(TC_EMPLOYEE)
        .withLossType(TC_PR)
        .withValidationLevel(TC_NEWLOSS)
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-3266))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(BaseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("23-502022")
          .withPublicId("demo_sample:2022")
          .withTotalProperties(1)
          .withPolicyType(TC_COMMERCIALPROPERTY)
          .withTotalVehicles(0)
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(1)
            .withPolicyLocation( new gw.api.databuilder.PolicyLocationBuilder()
              .withAddress(addressDemoSample2022)
              .withHighValueItem( new gw.api.databuilder.PropertyItemBuilder()
                .withAppraisedValue(5000bd.ofDefaultCurrency())
                .withDescription("5 Desktop Computers"))
              .withHighValueItem( new gw.api.databuilder.PropertyItemBuilder()
                .withAppraisedValue(2500bd.ofDefaultCurrency())
                .withDescription("2 Laptops"))
              .withHighValueItem( new gw.api.databuilder.PropertyItemBuilder()
                .withAppraisedValue(500bd.ofDefaultCurrency())
                .withDescription("1 Projector"))
              .withHighValueItem( new gw.api.databuilder.PropertyItemBuilder()
                .withAppraisedValue(200bd.ofDefaultCurrency())
                .withDescription("1 TV"))))
          .withPolicyAccount(accountDemoSample8114)
          .withContactInRole(contactDemoSample4010, TC_INSURED)
          .withContactInRole(contactDemoSample10190, TC_AGENT))
        .withAssignedGroup(findGroupByName("Midwest Property A"))
        .withJurisdictionState(TC_IL)
        .withSegment(TC_PROP_LOW)
        .withReportedDate(BaseDate.addDays(0))
        .withCoverageInQuestion(false)
        .withLOBCode(TC_CPLINE)
        .withPublicID("demo_sample:204")
        .withDescription("Apparent break-in overnight resulting in lost computers and other equipment")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("ccarley"))
        .withContactInRole(contactDemoSample10190, TC_MAINCONTACT)
        .withContactInRole(contactDemoSample10190, TC_REPORTER)
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(0))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Midwest Property A"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(4))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_insured"))
          .withSubject("Contact insured")
          .withAssignedUser(findUserByUserName("ccarley"))
          .withTargetDate(BaseDate.addDays(1)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(0))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Midwest Property A"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(6))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("general_reminder"))
          .withSubject("Set initial reserve")
          .withAssignedUser(findUserByUserName("ccarley"))
          .withTargetDate(BaseDate.addDays(3)))
        .create(bundle)

      var claimInfoDemoSample204 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:204")
        .withClaimNumber("426-24-366073")
        .onClaim(claim)
        .create(bundle)

      var policyPeriodDemoSample72022 = new gw.api.databuilder.PolicyPeriodBuilder()
        .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claimInfoDemoSample204))
        .withPolicyPeriodType(TC_POLICY)
        .withExpirationDate(BaseDate.addDays(274))
        .withPolicyNumber("23-502022")
        .withPublicId("demo_sample:72022")
        .withPolicyType(TC_COMMERCIALPROPERTY)
        .withEffectiveDate(BaseDate.addDays(-90))
        .create(bundle)

      var exposureDemoSample204 = new gw.api.databuilder.ExposureBuilder()
        .withOtherCoverage(false)
        .withLossParty(TC_INSURED)
        .withExposureType(TC_PERSONALPROPERTYDAMAGE)
        .withAssignedGroup(findGroupByName("Midwest Property A"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_PROP_FAST)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_IL)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_BOPPERSPROPOFFPREM)
        .withSegment(TC_PROP_LOW)
        .withClaimantType(TC_INSURED)
        .withClaimOrder(1)
        .withPublicID("demo_sample:204")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("ccarley"))
        .onClaim(claim)
        .withCoverageSubType(TC_BOPPERSPROPOFFPREM)
        .withIncident( new gw.api.databuilder.MobilePropertyIncidentBuilder()
          .withSeverity(TC_MINOR)
          .withDescription("Equipment stolen"))
        .withContactInRole(contactDemoSample4010, TC_CLAIMANT)
        .create(bundle)
    }
    {
      var buildingDemoSample301 = new gw.api.databuilder.BuildingBuilder()
        .withNotes("northern end")
        .withBuildingNumber("201")
        .create(bundle)

      var buildingDemoSample302 = new gw.api.databuilder.BuildingBuilder()
        .withNotes("southern end")
        .withBuildingNumber("202")
        .create(bundle)

      var policyLocationDemoSample303 = new gw.api.databuilder.PolicyLocationBuilder()
        .withAddress(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("15 Commerce Way")
          .withCountry(TC_US)
          .withPostalCode("91155")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Los Angeles"))
        .withBuilding(buildingDemoSample301)
        .withBuilding(buildingDemoSample302)
        .create(bundle)

      var buildingDemoSample303 = new gw.api.databuilder.BuildingBuilder()
        .withBuildingNumber("301")
        .create(bundle)

      var buildingDemoSample304 = new gw.api.databuilder.BuildingBuilder()
        .withBuildingNumber("302")
        .create(bundle)

      var policyLocationDemoSample304 = new gw.api.databuilder.PolicyLocationBuilder()
        .withAddress(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("20 Commerce Way")
          .withCountry(TC_US)
          .withPostalCode("91155")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Los Angeles"))
        .withBuilding(buildingDemoSample303)
        .withBuilding(buildingDemoSample304)
        .create(bundle)

      var contactDemoSample30004 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:30004")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1248 Fair Oaks Ave")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Pasadena"))
        .withWorkPhone("847-279-3402")
        .withName("Fishburn Bicycles")
        .create(bundle)
        
      var accountDemoSample8115 = gw.api.databuilder.AccountBuilder
        .forHolder(createLocalFromAB("demo_acct:30004", accountHolders["ab:30004"], bundle))
        .withPublicId("demo_sample:8115")
        .withAccountNumber("ACC12242")
        .withSpecialHandling(new AccountSpecialHandlingBuilder())
        .create(bundle)

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withAssignmentStatus(TC_ASSIGNED)
        .withLossDate(BaseDate.addDays(-4))
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy(TC_PROP_FAST)
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged(TC_NEVERFLAGGED)
        .withLossLocation(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("3232 Brooklyn Drive")
          .withCountry(TC_US)
          .withPostalCode("60706")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Norridge"))
        .withLossCause(TC_BURGLARY)
        .withClaimNumber("426-24-300073")
        .withMainContactType(TC_EMPLOYEE)
        .withReportedByType(TC_EMPLOYEE)
        .withLossType(TC_PR)
        .withValidationLevel(TC_NEWLOSS)
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(185))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-2005))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_PROP)
          .withEffectiveDate(BaseDate.addDays(-180))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("23-300022")
          .withPublicId("demo_sample:3022")
          .withTotalProperties(4)
          .withPolicyType(TC_COMMERCIALPROPERTY)
          .withTotalVehicles(0)
          .withRiskUnit( new gw.api.databuilder.BuildingRUBuilder()
            .withBuilding(buildingDemoSample301)
            .withRUNumber(1)
            .withPolicyLocation(policyLocationDemoSample303)
            .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
              .withIncidentLimit(2500000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGCOV)
              .withDeductible(10000bd.ofDefaultCurrency())))
          .withRiskUnit( new gw.api.databuilder.BuildingRUBuilder()
            .withBuilding(buildingDemoSample302)
            .withRUNumber(2)
            .withPolicyLocation(policyLocationDemoSample303)
            .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
              .withIncidentLimit(2500000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGCOV)
              .withDeductible(10000bd.ofDefaultCurrency())))
          .withRiskUnit( new gw.api.databuilder.BuildingRUBuilder()
            .withBuilding(buildingDemoSample303)
            .withRUNumber(3)
            .withPolicyLocation(policyLocationDemoSample304)
            .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
              .withIncidentLimit(2500000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGCOV)
              .withDeductible(10000bd.ofDefaultCurrency())))
          .withRiskUnit( new gw.api.databuilder.BuildingRUBuilder()
            .withBuilding(buildingDemoSample304)
            .withRUNumber(4)
            .withPolicyLocation(policyLocationDemoSample304)
            .withCoverage( new gw.api.databuilder.PropertyCoverageBuilder()
              .withIncidentLimit(2500000bd.ofDefaultCurrency())
              .withType(TC_CPBLDGCOV)
              .withDeductible(10000bd.ofDefaultCurrency())))
          .withPolicyAccount(accountDemoSample8115)
          .withContactInRole(contactDemoSample30004, TC_INSURED))
        .withAssignedGroup(findGroupByName("Midwest Property A"))
        .withJurisdictionState(TC_IL)
        .withSegment(TC_PROP_LOW)
        .withReportedDate(BaseDate.addDays(0))
        .withCoverageInQuestion(false)
        .withLOBCode(TC_CPLINE)
        .withPublicID("demo_sample:30004")
        .withDescription("Apparent break-in overnight resulting in lost computers and other equipment")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("ccarley"))
        .withContactInRole(contactDemoSample30004, TC_REPORTER)
        .create(bundle)

      var claimInfoDemoSample30004 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:30004")
        .withClaimNumber("426-24-300073")
        .onClaim(claim)
        .create(bundle)
    }
  }
}
