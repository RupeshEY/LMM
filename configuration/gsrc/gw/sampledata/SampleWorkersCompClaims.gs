package gw.sampledata

uses gw.api.databuilder.AccountSpecialHandlingBuilder
uses gw.api.util.CurrencyUtil
uses gw.api.util.DateUtil
uses gw.pl.persistence.core.Bundle

uses java.util.HashMap
uses gw.api.upgrade.Coercions
uses gw.api.financials.CurrencyAmount
uses gw.api.databuilder.WorkStatusBuilder
uses gw.api.databuilder.ConcurrentEmploymentBuilder

@Export
class SampleWorkersCompClaims extends SampleDataBase 
{
  var accountHolders = new HashMap<String,Company>()
  
  construct(inCache : SampleDataCache) {
    super(inCache)
  }

  override property get Description() : String {
    return "Workers Comp Claims and associated Contacts, Policies, Exposures, Notes, ClaimContacts, Activities and Financials"
  }
  
  private function createAccountHolders(bundle:Bundle) {
    var wright = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("ab:4011")
        .withLocalizedTaxID()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("253 McAfee Ct.")
          .withCountry(TC_US)
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Thousand Oaks"))
        .withWorkPhone("818-446-1206")
        .withName("Wright Construction")
        .create(bundle)
    accountHolders[wright.PublicID] = wright
        
    var tiptop = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("ab:4012")
        .withLocalizedTaxID()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1075 Aspen Lane")
          .withCountry(TC_US)
          .withPostalCode("91357")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Diamond View"))
        .withWorkPhone("818-252-2546")
        .withName("TipTop Roofing")
        .create(bundle)
     accountHolders[tiptop.PublicID] = tiptop
     
     var gromett = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("ab:4013")
        .withLocalizedTaxID()
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("253 McAfee Ct.")
          .withCountry(TC_US)
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Thousand Oaks"))
        .withWorkPhone("213-475-9465")
        .withName("TR Grommett")
        .create(bundle)
     accountHolders[gromett.PublicID] = gromett
     
     var pnp = new gw.api.databuilder.CompanyBuilder()
        .withLocalizedTaxID()
        .withPublicId("ab:30001")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1245 Fair Oaks Ave")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Pasadena"))
        .withWorkPhone("847-279-3399")
        .withName("P&P Construction")
        .create(bundle)
     accountHolders[pnp.PublicID] = pnp
  }
    
  override function testSampleData(bundle : Bundle) {
    createAccountHolders(bundle)
    (\->
    {
      var addressDemoSample1022 = new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("846 Yount Ln.")
        .withCountry(TC_US)
        .withPostalCode("91357")
        .withState(State.TC_CA)
        .withAddressType(TC_BUSINESS)
        .withCity("Hollywood")
        .withDescription("Loss Location")
        .create(bundle)

      var addressDemoSample1023 = new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("908 Angels Landing Rd.")
        .withCountry(TC_US)
        .withPostalCode("91352")
        .withState(State.TC_CA)
        .withAddressType(TC_HOME)
        .withCity("Anaheim")
        .withDescription("Support Location")
        .create(bundle)

      var documentDemoSample6 = new gw.api.databuilder.DocumentBuilder()
        .withDMS(false)
        .withObsolete(false)
        .withStatus(TC_FINAL)
        .withInbound(false)
        .withDateModified(BaseDate.addDays(0))
        .withName("OSHA8IBDXE0000.tif")
        .withAuthor("ClaimCenter")
        .create(bundle)

      var documentDemoSample7 = new gw.api.databuilder.DocumentBuilder()
        .withDMS(false)
        .withObsolete(false)
        .withStatus(TC_FINAL)
        .withInbound(false)
        .withDateModified(BaseDate.addDays(0))
        .withName("Incident8IBDXE0001.tif")
        .withAuthor("ClaimCenter")
        .create(bundle)

      var contactDemoSample3029 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Furman")
        .withPublicId("demo_sample:3029")
        .withFirstName("Nancy")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("235 Commerce Way")
          .withCountry(TC_US)
          .withPostalCode("91155")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Los Angeles"))
        .withWorkPhone("818-446-1206")
        .create(bundle)

      var contactDemoSample404 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Dunn")
        .withPublicId("demo_sample:404")
        .withFirstName("Willy")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("435 Duarte Ave")
          .withCountry(TC_US)
          .withPostalCode("91006")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Arcadia"))
        .withWorkPhone("619-275-2346")
        .withLocalizedTaxID()
        .withClaimantIDType(ClaimantIDType.TC_S)
        .withSSNReleaseAuthorized(false)
        .withEducationLevel("12")
        .create(bundle)

      var contactDemoSample4005 = new gw.api.databuilder.DoctorBuilder()
        .withLastName("Arcadia Medical Group")
        .withPublicId("demo_sample:4005")
        .withFirstName("DoctorFrom")
        .withPrimaryPhone(TC_WORK)
        .withPreferred(true)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1243 Fair Oaks Ave")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Pasadena"))
        .withWorkPhone("626-473-9576")
        .create(bundle)

      var contactDemoSample4011 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:4011")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("253 McAfee Ct.")
          .withCountry(TC_US)
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Thousand Oaks"))
        .withWorkPhone("818-446-1206")
        .withName("Wright Construction")
        .create(bundle)

      var sampleAccount1 = gw.api.databuilder.AccountBuilder
        .forHolder(createLocalFromAB("demo_acct:4011", accountHolders["ab:4011"], bundle))
        .withPublicId("sample_account:8091")
        .withAccountNumber("ACC12260")
        .withSpecialHandling(new AccountSpecialHandlingBuilder())
        .create(bundle)

      var contactDemoSample501 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Albee")
        .withPublicId("demo_sample:501")
        .withFirstName("Jennifer")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("354 Cactus Ln")
          .withCountry(TC_US)
          .withPostalCode("85716")
          .withState(State.TC_AZ)
          .withAddressType(TC_HOME)
          .withCity("Tucson"))
        .withWorkPhone("818-446-1206")
        .create(bundle)

      var classCodeDemoSample40001 = new gw.api.databuilder.ClassCodeBuilder()
        .withCode("881001")
        .withDescription("Clerical")
        .create(bundle)

      var classCodeDemoSample40002 = new gw.api.databuilder.ClassCodeBuilder()
        .withCode("901401")
        .withDescription("Janitorial")
        .create(bundle)

      var classCodeDemoSample40003 = new gw.api.databuilder.ClassCodeBuilder()
        .withCode("540301")
        .withDescription("Construction")
        .create(bundle)

      var policyLocation101 = new gw.api.databuilder.PolicyLocationBuilder()
          .withLocationNumber("101")
          .withAddress(addressDemoSample1022)
          .create(bundle)

      var policyLocation102 = new gw.api.databuilder.PolicyLocationBuilder()
          .withLocationNumber("102")
          .withAddress(addressDemoSample1023)
          .create(bundle)

      var building101 = new gw.api.databuilder.BuildingBuilder()
          .withBuildingNumber("101")
          .onPolicyLocation(policyLocation101)
          .create(bundle)

      var building102 = new gw.api.databuilder.BuildingBuilder()
          .withBuildingNumber("102")
          .onPolicyLocation(policyLocation102)
          .create(bundle)

      var claim = (\->new gw.api.databuilder.ClaimBuilder()
        .withIncidentReport(false)
        .withAssignmentStatus(TC_ASSIGNED)
        .withLossDate(BaseDate.addDays(-32))
        .withFlaggedReason("Paying Total Temp on minor injury after 4 weeks")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy(TC_WC_FAST)
        .withLossCause(LossCause.TC_FALL)
        .withAccidentType(AccidentType.TC_31)
        .withEmploymentData( new gw.api.databuilder.EmploymentDataBuilder()
          .withPayPeriod(TC_MONTHLY)
          .withOccupation("construction")
          .withPaidFull(true)
          .withHireState(State.TC_CA)
          .withLastWorkedDate(BaseDate.addDays(-32))
          .withWageAmount(750bd.ofDefaultCurrency())
          .withEmploymentStatus(TC_FULLTIME)
          .withClassCode(classCodeDemoSample40001)
          .withInjuryStartTime(Coercions.makeDateFrom(DateUtil.currentDate().Time))
          .withNumDaysWorked(5)
          .withNumHoursWorked(8)
          .withWagePaymentCont(false)
          .withHireDate(BaseDate.addDays(-3379))
          .withWorkStatusChange(new WorkStatusBuilder()
            .withStatus(WorkCapacity.TC_STOPPED_WORK)
            .withLastWorkedDate(BaseDate.addDays(-32))
            .withStatusDate(BaseDate.addDays(-32))))
        .withModifiedDutyAvail(false)
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged(TC_ISFLAGGED)
        .withLossLocation(addressDemoSample1022)
        .withClaimNumber("312-36-368870")
        .withMainContactType(TC_EMPLOYEE)
        .withReportedByType(TC_EMPLOYEE)
        .withLossType(TC_WC)
        .withValidationLevel(TC_NEWLOSS)
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-3266))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_WC)
          .withEffectiveDate(BaseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withWCStates("CA, NV")
          .withPolicyNumber("34-123436")
          .withPublicId("demo_sample:101")
          .withTotalProperties(1)
          .withPolicyType(TC_WORKERSCOMP)
          .withTotalVehicles(0)
          .withClassCode(classCodeDemoSample40001)
          .withClassCode(classCodeDemoSample40002)
          .withClassCode(classCodeDemoSample40003)
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Labor Contractor Endorsement")
            .withFormNumber("WC 00 03 20 A"))
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Employers Liability Coverage Endorsement ")
            .withFormNumber("WC 00 03 03 B"))
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withIncidentLimit(100000bd.ofDefaultCurrency())
            .withType(TC_WCEMPLIABCOV)
            .withNotes("Bodily Injury By Accident")
            .withDeductible(10000bd.ofDefaultCurrency()))
          .withCoverage(new gw.api.databuilder.PolicyCoverageBuilder()
                          .withIncidentLimit(500000bd.ofDefaultCurrency())
                          .withType(TC_WCEMPLIABCOV)
                          .withNotes("Bodily Injury By Disease for Policy")
                          .withDeductible(10000bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withIncidentLimit(100000bd.ofDefaultCurrency())
            .withType(TC_WCEMPLIABCOV)
            .withNotes("Bodily Injury By Disease per Employee")
            .withDeductible(1000bd.ofDefaultCurrency()))
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(1)
            .withClassCode(classCodeDemoSample40001)
            .withBuilding(building101)
            .withPolicyLocation( policyLocation101))
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(2)
            .withClassCode(classCodeDemoSample40002)
            .withBuilding(building102)
            .withPolicyLocation( policyLocation102))
          .withPolicyAccount(sampleAccount1)
          .withContactInRole(contactDemoSample4011, ContactRole.TC_INSURED)
          .withContactInRole(contactDemoSample501, ContactRole.TC_AGENT))
        .withLocationCode(policyLocation101)
        .withClaimantReportedDate(BaseDate.addDays(-32))
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withJurisdictionState(TC_CA)
        .withSegment(TC_WC_LOST_TIME)
        .withReportedDate(BaseDate.addDays(-32))
        .withCoverageInQuestion(false)
        .withLOBCode(TC_WORKERSCOMPLINE)
        .withPublicId("demo_sample:3001")
        .withDescription("Worker fell from 2nd story scaffolding")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("gickes"))
        .withMetroReport( new gw.api.databuilder.MetroReportBuilder()
          .withMetroReportType(TC_N)
          .withDoc(documentDemoSample6)
          .withAgentState(State.TC_CA)
          .withAgentCity("Arcadia")
          .withStatus(TC_RECEIVED))
        .withMetroReport( new gw.api.databuilder.MetroReportBuilder()
          .withMetroReportType(TC_I)
          .withDoc(documentDemoSample7)
          .withAgentState(State.TC_CA)
          .withAgentCity("Arcadia")
          .withStatus(TC_RECEIVED))
        .withDocument(documentDemoSample6)
        .withDocument(documentDemoSample7)
        .withContactInRole(contactDemoSample404, ContactRole.TC_CHECKPAYEE)
        .withContactInRole(contactDemoSample4005, ContactRole.TC_CHECKPAYEE)
        .withContactInRole(contactDemoSample4005, ContactRole.TC_FIRSTINTAKEDOCTOR)
        .withContactInRole(contactDemoSample404, ContactRole.TC_CLAIMANT)
        .withContactInRole(contactDemoSample3029, ContactRole.TC_MAINCONTACT)
        .withContactInRole(contactDemoSample3029, ContactRole.TC_REPORTER)
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_GENERAL)
          .withAuthoringDate(BaseDate.addDays(-32))
          .withSubject("Initial phone call with employer")
          .withAuthor(findUserByUserName("cclark"))
          .withBody("Company reports that claimant was working on 2nd floor scaffolding, installing weather stripping.  According to co-workers, injured worker unclipped from safety harness in order to climb down frm the scaffolding and then lost his balance and fell to the ground.  The injured worker immediately got back up but complained of a sore leg and sore lower back.  A supervisor directed him to the doctor for initial treatment and reported the accident to the HR department."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_GENERAL)
          .withAuthoringDate(BaseDate.addDays(-29))
          .withSubject("Claim update")
          .withAuthor(findUserByUserName("gickes"))
          .withBody("I spoke with all three parties (claimant, account, doctor) and case seems very straightforward.  Foreman saw and confirms the accident, so I decided not to take formal witness statements.  Doctor confirmed bruises to the right leg and hip and a strained lower back.  The bruises were treated with ice and OTC pain medication.  The back injury appeared minor, but the worker will need to be absent from work for at least a week and until doctor can confirm that strain has recovered."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_GENERAL)
          .withAuthoringDate(BaseDate.addDays(-25))
          .withSubject("Phone call with claimant")
          .withAuthor(findUserByUserName("gickes"))
          .withBody("Spoke with the injured worker.  He says that he still experiences pain whenever bending over after 1 week but has no other complaints. "))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-4))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(3))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("med_clear_for_light_duty"))
          .withSubject("Check on medical clearance for light duty work")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-2)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("three_point_contact_employer"))
          .withSubject("3-point contact - Employer")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("three_point_contact_employee"))
          .withSubject("3-point contact - Employee")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("three_point_contact_medical_provider"))
          .withSubject("3-point contact - Medical Provider")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("first_report"))
          .withSubject("File Employer's First Notice")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("employee_notice"))
          .withSubject("Get Employee's Notice of Injury")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("wage_stmt"))
          .withSubject("Get wage statement and tax status")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(false)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(TC_SKIPPED)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("witness_statement"))
          .withSubject("Get a statement from witness")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-19))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-14))
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withDescription("Account threshold: $3000")
          .withActivityPattern(findActivityPatternByCode("notice_cost_above_threshold"))
          .withSubject("Notify account - expected cost above threshold")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-14)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-22))
          .withMandatory(false)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("initial_30day_review"))
          .withSubject("10 day review")
          .withAssignedUser(findUserByUserName("wmotley"))
          .withTargetDate(BaseDate.addDays(-22)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-22))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(false)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("initial_30day_review"))
          .withSubject("30 day review")
          .withAssignedUser(findUserByUserName("wmotley"))
          .withTargetDate(BaseDate.addDays(-2)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-22))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(ImportanceLevel.TC_HIGH)
          .withMandatory(false)
          .withPriority(Priority.TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("claim_acceptance"))
          .withSubject("Determine compensability")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(3)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-22))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("LA Medical Mgmt"))
          .withType(TC_GENERAL)
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("medical_report_claimant"))
          .withSubject("Review medical treatments")
          .withAssignedUser(findUserByUserName("spierce"))
          .withTargetDate(BaseDate.addDays(8)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(ImportanceLevel.TC_MEDIUM)
          .withMandatory(false)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(ActivityStatus.TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("three_point_contact_employer"))
          .withSubject("3-point contact - Employer")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(1)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(ImportanceLevel.TC_MEDIUM)
          .withMandatory(false)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(ActivityStatus.TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("three_point_contact_employee"))
          .withSubject("3-point contact - Employee")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(1)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(ImportanceLevel.TC_MEDIUM)
          .withMandatory(false)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(ActivityStatus.TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("three_point_contact_medical_provider"))
          .withSubject("3-point contact - Medical Provider")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(1)))

          .withClaimWorkComp(new gw.api.databuilder.ClaimWorkCompBuilder()
              .withClassCodeByLocation(true)
              .withDeathReport(false)
              .withCompensabilityDecision(CompensabilityDecision.TC_ACCEPTED)
              .withEmployerLiability(false)
              .withMedicalReport(true)
              .withTimeLossReport(true)
              .withDiscontinuedFringeBenefits(new CurrencyAmount(100))
              .withAccidentPremises(AccidentPremises.TC_EMPLOYER)
              .withInitialTreatment(InitialTreatment.TC_2))
          .withDateReportedToEmployer(BaseDate.addDays(-15))
          .withEmploymentInjury(true)
          .withInjuredRegularJob(true)
          .withEmpQusValidity(YesNo.TC_NO)
          .withSafetyEquipProv(true)
          .withSafetyEquipUsed(true)
          .withDrugsInvolved(YesNo.TC_NO)
          .withConcurrentEmp(YesNo.TC_YES)
          .withConcurrentEmpl(new ConcurrentEmploymentBuilder()
              .withUniqueCompanyName()
              .withFullTime(true)
              .withJobTitle("General Manager")
              .withWeeklyWage(new CurrencyAmount(250))
              .withStartDate(BaseDate.addDays(-150))
              .withEndDate(BaseDate.addDays(-15)))
          .create(bundle))()

      var coverageToShare = claim.Policy.Coverages.singleWhere(\ c -> c.Type == TC_WCEMPLIABCOV and c.Notes == "Bodily Injury By Disease for Policy")

      var claimInfoDemoSample3001 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:3001")
        .withClaimNumber("312-36-368870")
        .onClaim(claim)
        .create(bundle)

      var policyPeriodDemoSample70101 = new gw.api.databuilder.PolicyPeriodBuilder()
        .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claimInfoDemoSample3001))
        .withPolicyPeriodType(TC_POLICY)
        .withExpirationDate(BaseDate.addDays(274))
        .withPolicyNumber("34-123436")
        .withPublicId("demo_sample:70101")
        .withPolicyType(TC_WORKERSCOMP)
        .withEffectiveDate(BaseDate.addDays(-90))
        .create(bundle)

      var aggregateLimitDemoSample90003 = new gw.api.databuilder.AggregateLimitBuilder()
        .withLimitCurrencyAmount(500000bd.ofDefaultCurrency())
        .withCoverageLine( new gw.api.databuilder.CoverageLineLimitBuilder()
          .withCoverageLine( new gw.api.databuilder.CoverageLineBuilder()
            .withCoverageType(TC_WCEMPLIABCOV)
            .withCoverageSubtype(TC_POLICYCOVERAGE)
            .withCoverage(coverageToShare)
            .onPolicyPeriod(policyPeriodDemoSample70101)) )
        .withPublicId("demo_sample:90003")
        .withLimitType(AggregateLimitType.TC_NONE)
        .onPolicyPeriod(policyPeriodDemoSample70101)
        .create(bundle)

      new gw.api.databuilder.InjuryIncidentBuilder()
          .onClaim(claim)
          .withGeneralInjuryType(TC_SPECIFIC)
          .withDetailedInjuryType(DetailedInjuryType.TC_59)
          .withSeverity(TC_MINOR)
          .withDescription("Bruised lower back from the fall")
          .withMedicalTreatmentType(TC_ONE_DOCTOR)
          .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
              .withPrimaryBodyPart(BodyPartType.TC_TRUNK)
              .withDetailedBodyPart(DetailedBodyPartType.TC_40)
              .withCompensabilityDecision(CompensabilityDecision.TC_ACCEPTED)
              .withCompensabilityDecisionDate(BaseDate)
              .withCompensabilityComments(""))
          .withClaimIncident(true)
          .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
              .withPrimaryBodyPart(BodyPartType.TC_LOWER)
              .withDetailedBodyPart(DetailedBodyPartType.TC_51)
              .withSideOfBody(SideOfBody.TC_BOTH)
              .withCompensabilityDecision(CompensabilityDecision.TC_PENDING)
              .withCompensabilityComments("Under review")
              .withOrdering(100))
          .create(bundle)

      var exposureDemoSample150001 = new gw.api.databuilder.ExposureBuilder()
        .onClaim(claim)
        .withOtherCoverage(false)
        .withLossParty(TC_INSURED)
        .withDaysInWeek(TC_FIVE)
        .withExposureType(TC_LOSTWAGES)
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_WC_FAST)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_WCWORKERSCOMPCOV)
        .withProgress(TC_INVESTIGATION)
        .withAverageWeeklyWages(750bd.ofDefaultCurrency())
        .withClaimOrder(2)
        .withPublicId("demo_sample:150001")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("gickes"))
        .withCoverageSubType(TC_WCWORKERSCOMPWAGES)
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder())
        .create(bundle)

      var exposureDemoSample30001 = new gw.api.databuilder.ExposureBuilder()
        .onClaim(claim)
        .withOtherCoverage(false)
        .withWCPreexDisblty(false)
        .withLossParty(TC_INSURED)
        .withExposureType(TC_WCINJURYDAMAGE)
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_WC_FAST)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_CA)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_WCWORKERSCOMPCOV)
        .withSegment(TC_WC_MED_ONLY)
        .withClaimOrder(1)
        .withPublicId("demo_sample:30001")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("gickes"))
        .withCoverageSubType(TC_WCWORKERSCOMPMED)
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder())
        .withContactInRole(contactDemoSample4005, ContactRole.TC_DOCTOR)
        .create(bundle)


      var transactionSetDemoSample20002 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-21))
        .withRequestingUser(findUserByUserName("gickes"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20010 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-27))
        .withRequestingUser(findUserByUserName("gickes"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20011 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-14))
        .withRequestingUser(findUserByUserName("gickes"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20012 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-7))
        .withRequestingUser(findUserByUserName("gickes"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20013 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-6))
        .withRequestingUser(findUserByUserName("gickes"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20004 = new gw.api.databuilder.ReserveSetBuilder()
        .withApprovalDate(BaseDate.addDays(-9))
        .withRequestingUser(findUserByUserName("gickes"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var reserveLineDemoSample9 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample150001)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_VOCATIONAL)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample10 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample150001)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_TTD)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample11 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample30001)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_CASEMGMT)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample12 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample30001)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_MEDICAL)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample13 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample150001)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_SUPPLEMENTAL)
        .withClaim(claim)
        .create(bundle)

      var checkDemoSample10101 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-21))
        .withScheduledSendDate(BaseDate.addDays(-21))
        .withBankAccount(TC_DEFAULT)
        .onCheckSet(transactionSetDemoSample20002)
        .withPayTo("Arcadia Medical Group")
        .withStatus(TC_ISSUED)
        .withPaymentMethod(TC_CHECK)
        .withCheckNumber("10444")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample4005)
              .withPayeeType(TC_CLAIMANT))
        .withType(TC_PRIMARY)
        .create(bundle)

      var checkDemoSample10102 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-7))
        .withScheduledSendDate(BaseDate.addDays(-7))
        .withBankAccount(TC_DEFAULT)
        .onCheckSet(transactionSetDemoSample20010)
        .withPayTo("William Dunn")
        .withStatus(TC_ISSUED)
        .withPaymentMethod(TC_CHECK)
        .withCheckNumber("10567")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample404)
              .withPayeeType(TC_CLAIMANT))
        .withType(TC_PRIMARY)
        .create(bundle)

      var checkDemoSample10103 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-27))
        .withScheduledSendDate(BaseDate.addDays(-27))
        .withBankAccount(TC_DEFAULT)
        .onCheckSet(transactionSetDemoSample20011)
        .withPayTo("William Dunn")
        .withStatus(TC_ISSUED)
        .withPaymentMethod(TC_CHECK)
        .withCheckNumber("10690")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample404)
              .withPayeeType(TC_CLAIMANT))
        .withType(TC_PRIMARY)
        .create(bundle)

      var checkDemoSample10104 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-14))
        .withScheduledSendDate(BaseDate.addDays(-14))
        .withBankAccount(TC_DEFAULT)
        .onCheckSet(transactionSetDemoSample20012)
        .withPayTo("William Dunn")
        .withStatus(TC_ISSUED)
        .withPaymentMethod(TC_CHECK)
        .withCheckNumber("10813")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample404)
              .withPayeeType(TC_CLAIMANT))
        .withType(TC_PRIMARY)
        .create(bundle)

      var checkDemoSample10105 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-7))
        .withScheduledSendDate(BaseDate.addDays(-7))
        .withBankAccount(TC_DEFAULT)
        .onCheckSet(transactionSetDemoSample20013)
        .withPayTo("William Dunn")
        .withStatus(TC_ISSUED)
        .withPaymentMethod(TC_CHECK)
        .withCheckNumber("10936")
        .withPayee((new gw.api.databuilder.CheckPayeeBuilder().withPayee(contactDemoSample404)
          .withPayeeType(TC_CLAIMANT)))
        .withType(TC_PRIMARY)
        .create(bundle)

      var transactionDemoSample10010 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample9)
        .onExposure(exposureDemoSample150001)
        .onTransactionSet(transactionSetDemoSample20004)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_VOCATIONAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Voc Rehab Benefits")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample10011 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample10)
        .onExposure(exposureDemoSample150001)
        .onTransactionSet(transactionSetDemoSample20004)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_TTD)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefits")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(4000bd.ofDefaultCurrency())
          .withClaimAmount(4000bd.ofDefaultCurrency())
          .withReservingAmount(4000bd.ofDefaultCurrency())
          .withTransactionAmount(4000bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample10012 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample11)
        .onExposure(exposureDemoSample30001)
        .onTransactionSet(transactionSetDemoSample20004)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_CASEMGMT)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Case Management")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample10013 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample12)
        .onExposure(exposureDemoSample30001)
        .onTransactionSet(transactionSetDemoSample20004)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Emergency room visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(2500bd.ofDefaultCurrency())
          .withClaimAmount(2500bd.ofDefaultCurrency())
          .withReservingAmount(2500bd.ofDefaultCurrency())
          .withTransactionAmount(2500bd.ofDefaultCurrency())
          .withLineCategory(TC_HOSPITAL)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Chiropractor's visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_CHIRO)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample10014 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample12)
        .onExposure(exposureDemoSample30001)
        .onTransactionSet(transactionSetDemoSample20004)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Emergency room visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(6500bd.ofDefaultCurrency())
          .withClaimAmount(6500bd.ofDefaultCurrency())
          .withReservingAmount(6500bd.ofDefaultCurrency())
          .withTransactionAmount(6500bd.ofDefaultCurrency())
          .withLineCategory(TC_HOSPITAL)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Therapy")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(1500bd.ofDefaultCurrency())
          .withClaimAmount(1500bd.ofDefaultCurrency())
          .withReservingAmount(1500bd.ofDefaultCurrency())
          .withTransactionAmount(1500bd.ofDefaultCurrency())
          .withLineCategory(TC_PT)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Medication")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_DRUGS)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample10015 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample13)
        .onExposure(exposureDemoSample150001)
        .onTransactionSet(transactionSetDemoSample20004)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_SUPPLEMENTAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Supplemental Earnings")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20006 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample10)
        .onTransactionSet(transactionSetDemoSample20010)
        .withCostCategory(TC_TTD)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10102)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample150001)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20007 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample12)
        .onTransactionSet(transactionSetDemoSample20002)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10101)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample30001)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("2nd consultation")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_DOCTOR)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20008 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample12)
        .onTransactionSet(transactionSetDemoSample20002)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10101)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample30001)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Urgent Care")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_DOCTOR)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20009 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample10)
        .onTransactionSet(transactionSetDemoSample20011)
        .withCostCategory(TC_TTD)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10103)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample150001)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20010 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample10)
        .onTransactionSet(transactionSetDemoSample20012)
        .withCostCategory(TC_TTD)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10104)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample150001)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20012 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample12)
        .onTransactionSet(transactionSetDemoSample20002)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10101)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample30001)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Chiropractor's visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_CHIRO)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20013 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample10)
        .onTransactionSet(transactionSetDemoSample20013)
        .withCostCategory(TC_TTD)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10105)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample150001)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

    })()

    (\->
    {
      var contactDemoSample3030 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Peters")
        .withPublicId("demo_sample:3030")
        .withFirstName("Wes")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("240 Commerce Way")
          .withCountry(TC_US)
          .withPostalCode("91155")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Los Angeles"))
        .withWorkPhone("619-275-5986")
        .create(bundle)

      var contactDemoSample409 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Wallace")
        .withPublicId("demo_sample:409")
        .withFirstName("Wendell")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("4263 Live Oak Blvd.")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("San Gabriel"))
        .withWorkPhone("619-275-5986")
        .withLocalizedTaxID()
        .withClaimantIDType(ClaimantIDType.TC_S)
        .withSSNReleaseAuthorized(false)
        .withEducationLevel("12")
        .create(bundle)

      var contactDemoSample4006 = new gw.api.databuilder.DoctorBuilder()
        .withLastName("Pasadena Medical Group")
        .withPublicId("demo_sample:4006")
        .withFirstName("DoctorFrom")
        .withPrimaryPhone(TC_WORK)
        .withPreferred(true)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1243 Fair Oaks Ave")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Pasadena"))
        .withWorkPhone("619-275-2346")
        .create(bundle)

      var contactDemoSample4012 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:4012")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1075 Aspen Lane")
          .withCountry(TC_US)
          .withPostalCode("91357")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Diamond View"))
        .withWorkPhone("818-252-2546")
        .withName("TipTop Roofing")
        .create(bundle)
        
     var sampleAccount2 = gw.api.databuilder.AccountBuilder
        .forHolder(createLocalFromAB("demo_acct:4012", accountHolders["ab:4012"], bundle))
        .withPublicId("sample_account:8092")
        .withAccountNumber("ACC12261")
        .withSpecialHandling(new AccountSpecialHandlingBuilder())
        .create(bundle)

      var contactDemoSample10045 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Albee")
        .withPublicId("demo_sample:10045")
        .withFirstName("Jennifer")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("354 Cactus Ln")
          .withCountry(TC_US)
          .withPostalCode("85716")
          .withState(State.TC_AZ)
          .withAddressType(TC_HOME)
          .withCity("Tucson"))
        .withWorkPhone("818-446-1206")
        .create(bundle)

      var contactDemoSample2221 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Egertson")
        .withPublicId("demo_sample:2221")
        .withFirstName("Karen")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("255 McAfee Ct.")
          .withCountry(TC_US)
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Thousand Oaks"))
        .withWorkPhone("213-457-6399")
        .create(bundle)

      var addressDemo = new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("2846 Rowe St.")
          .withCountry(TC_US)
          .withPostalCode("92101")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("San Diego")
          .withDescription("Loss Location")
          .create(bundle)

      var classCodeDemoSample40001 = new gw.api.databuilder.ClassCodeBuilder()
          .withCode("881001")
          .withDescription("Clerical")
          .create(bundle)

      var classCodeDemoSample40002 = new gw.api.databuilder.ClassCodeBuilder()
          .withCode("901401")
          .withDescription("Janitorial")
          .create(bundle)

      var policyLocation101 = new gw.api.databuilder.PolicyLocationBuilder()
          .withLocationNumber("101")
          .withAddress(addressDemo)
          .create(bundle)

      var building101 = new gw.api.databuilder.BuildingBuilder()
          .withBuildingNumber("101")
          .onPolicyLocation(policyLocation101)
          .create(bundle)

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withIncidentReport(false)
        .withAssignmentStatus(TC_ASSIGNED)
        .withLossDate(BaseDate.addDays(-7))
        .withLossCause(LossCause.TC_MISCELLANEOUS)
        .withAccidentType(AccidentType.TC_99)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy(TC_WC_FAST)
        .withEmploymentData( new gw.api.databuilder.EmploymentDataBuilder()
          .withPayPeriod(TC_MONTHLY)
          .withOccupation("construction")
          .withPaidFull(true)
          .withHireState(State.TC_CA)
          .withLastWorkedDate(BaseDate.addDays(-7))
          .withWageAmount(600bd.ofDefaultCurrency())
          .withEmploymentStatus(TC_FULLTIME)
          .withInjuryStartTime(Coercions.makeDateFrom(DateUtil.currentDate().Time))
          .withNumDaysWorked(5)
          .withNumHoursWorked(8)
          .withWagePaymentCont(false)
          .withHireDate(BaseDate.addDays(-3268))
          .withClassCode(classCodeDemoSample40001)
          .withWorkStatusChange(new WorkStatusBuilder()
              .withStatus(WorkCapacity.TC_STOPPED_WORK)
              .withLastWorkedDate(BaseDate.addDays(-7))
              .withStatusDate(BaseDate.addDays(-7))))
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged(TC_NEVERFLAGGED)
        .withLossLocation(addressDemo)
        .withLossCause(TC_FALL)
        .withClaimNumber("312-36-368889")
        .withMainContactType(TC_EMPLOYEE)
        .withReportedByType(TC_EMPLOYEE)
        .withLossType(TC_WC)
        .withValidationLevel(TC_NEWLOSS)
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-3266))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_WC)
          .withEffectiveDate(BaseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withPolicyNumber("34-386734")
          .withPublicId("demo_sample:108")
          .withTotalProperties(0)
          .withPolicyType(TC_WORKERSCOMP)
          .withTotalVehicles(0)
          .withClassCode(classCodeDemoSample40001)
          .withClassCode(classCodeDemoSample40002)
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withType(TC_WCEMPLIABCOV))
          .withPolicyAccount(sampleAccount2)
          .withContactInRole(contactDemoSample4012, ContactRole.TC_INSURED)
          .withContactInRole(contactDemoSample10045, ContactRole.TC_AGENT)
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(1)
            .withClassCode(classCodeDemoSample40001)
            .withBuilding(building101)
            .withPolicyLocation( policyLocation101)))
        .withClaimantReportedDate(BaseDate.addDays(-7))
        .withLocationCode(policyLocation101)
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withJurisdictionState(TC_CA)
        .withSegment(TC_WC_LOST_TIME)
        .withReportedDate(BaseDate.addDays(-7))
        .withCoverageInQuestion(false)
        .withLOBCode(TC_WORKERSCOMPLINE)
        .withPublicID("demo_sample:3020")
        .withDescription("Twisted ankle from slip and fall in elevator")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("gickes"))
        .withContactInRole(contactDemoSample409, ContactRole.TC_CLAIMANT)
        .withContactInRole(contactDemoSample3030, ContactRole.TC_MAINCONTACT)
        .withContactInRole(contactDemoSample2221, ContactRole.TC_REPORTER)
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_GENERAL)
          .withAuthoringDate(BaseDate.addDays(-6))
          .withSubject("Initial phone call with employer")
          .withAuthor(findUserByUserName("cclark"))
          .withBody("The injured worker complained to his supervisor of a sprained ankle soon after arriving at work.  According to the worker, he slipped upon stepping into the elevator and fell to the floor.  No one else witnessed the scene of the accident."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_GENERAL)
          .withAuthoringDate(BaseDate.addDays(-5))
          .withSubject("Attempted to reach claimant")
          .withAuthor(findUserByUserName("gickes"))
          .withBody("The number I was given for the claimant was wrong.  I left a message with the employer to send me a correct number or to have the claimant call me."))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-7))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-2))
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(8))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("first_report"))
          .withSubject("File Employer's First Notice")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-2)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-7))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-2))
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(8))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("employee_notice"))
          .withSubject("Get Employee's Notice of Injury")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-2)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-7))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(18))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("wage_stmt"))
          .withSubject("Get wage statement and tax status")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(3)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-7))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(false)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("initial_30day_review"))
          .withSubject("10 day review")
          .withAssignedUser(findUserByUserName("wmotley"))
          .withTargetDate(BaseDate.addDays(3)))
          .withActivity( new gw.api.databuilder.ActivityBuilder()
            .withAssignmentStatus(TC_ASSIGNED)
            .withAssignmentDate(BaseDate.addDays(-22))
            .withEscalated(false)
            .withRecurring(false)
            .withImportance(ImportanceLevel.TC_HIGH)
            .withMandatory(false)
            .withPriority(Priority.TC_HIGH)
            .withActivityClass(TC_TASK)
            .withAssignedGroup(findGroupByName("Comp - TeamA"))
            .withType(TC_GENERAL)
            .withStatus(TC_OPEN)
            .withAutoGenerated(true)
            .withLastViewedDate(BaseDate.addDays(-2415))
            .withActivityPattern(findActivityPatternByCode("claim_acceptance"))
            .withSubject("Determine compensability")
            .withAssignedUser(findUserByUserName("gickes"))
            .withTargetDate(BaseDate.addDays(3)))
          .withActivity( new gw.api.databuilder.ActivityBuilder()
            .withAssignmentStatus(TC_ASSIGNED)
            .withAssignmentDate(BaseDate.addDays(-32))
            .withEscalated(false)
            .withRecurring(false)
            .withImportance(ImportanceLevel.TC_MEDIUM)
            .withMandatory(false)
            .withPriority(TC_URGENT)
            .withActivityClass(TC_TASK)
            .withAssignedGroup(findGroupByName("Comp - TeamA"))
            .withType(TC_GENERAL)
            .withStatus(ActivityStatus.TC_OPEN)
            .withAutoGenerated(true)
            .withLastViewedDate(BaseDate.addDays(-2415))
            .withActivityPattern(findActivityPatternByCode("three_point_contact_employer"))
            .withSubject("3-point contact - Employer")
            .withAssignedUser(findUserByUserName("gickes"))
            .withTargetDate(BaseDate.addDays(1)))
          .withActivity( new gw.api.databuilder.ActivityBuilder()
            .withAssignmentStatus(TC_ASSIGNED)
            .withAssignmentDate(BaseDate.addDays(-32))
            .withEscalated(false)
            .withRecurring(false)
            .withImportance(ImportanceLevel.TC_MEDIUM)
            .withMandatory(false)
            .withPriority(TC_URGENT)
            .withActivityClass(TC_TASK)
            .withAssignedGroup(findGroupByName("Comp - TeamA"))
            .withType(TC_GENERAL)
            .withStatus(ActivityStatus.TC_OPEN)
            .withAutoGenerated(true)
            .withLastViewedDate(BaseDate.addDays(-2415))
            .withActivityPattern(findActivityPatternByCode("three_point_contact_employee"))
            .withSubject("3-point contact - Employee")
            .withAssignedUser(findUserByUserName("gickes"))
            .withTargetDate(BaseDate.addDays(1)))
          .withActivity( new gw.api.databuilder.ActivityBuilder()
            .withAssignmentStatus(TC_ASSIGNED)
            .withAssignmentDate(BaseDate.addDays(-32))
            .withEscalated(false)
            .withRecurring(false)
            .withImportance(ImportanceLevel.TC_MEDIUM)
            .withMandatory(false)
            .withPriority(TC_URGENT)
            .withActivityClass(TC_TASK)
            .withAssignedGroup(findGroupByName("Comp - TeamA"))
            .withType(TC_GENERAL)
            .withStatus(ActivityStatus.TC_OPEN)
            .withAutoGenerated(true)
            .withLastViewedDate(BaseDate.addDays(-2415))
            .withActivityPattern(findActivityPatternByCode("three_point_contact_medical_provider"))
            .withSubject("3-point contact - Medical Provider")
            .withAssignedUser(findUserByUserName("gickes"))
            .withTargetDate(BaseDate.addDays(1)))
          .withActivity( new gw.api.databuilder.ActivityBuilder()
            .withAssignmentStatus(TC_ASSIGNED)
            .withAssignmentDate(BaseDate.addDays(-7))
            .withEscalated(false)
            .withRecurring(false)
            .withImportance(TC_NOTONCALENDAR)
            .withMandatory(true)
            .withPriority(TC_URGENT)
            .withActivityClass(TC_TASK)
            .withAssignedGroup(findGroupByName("Comp - TeamA"))
            .withType(TC_GENERAL)
            .withEscalationDate(BaseDate.addDays(5))
            .withStatus(TC_OPEN)
            .withAutoGenerated(true)
            .withLastViewedDate(BaseDate.addDays(-2415))
            .withActivityPattern(findActivityPatternByCode("claim_ack_letter"))
            .withSubject("Send Notification Letter to Agent")
            .withAssignedUser(findUserByUserName("gickes"))
            .withTargetDate(BaseDate.addDays(0)))
          .withActivity( new gw.api.databuilder.ActivityBuilder()
            .withAssignmentStatus(TC_ASSIGNED)
            .withAssignmentDate(BaseDate.addDays(-32))
            .withEscalated(false)
            .withRecurring(false)
            .withImportance(TC_NOTONCALENDAR)
            .withCloseDate(BaseDate.addDays(-32))
            .withMandatory(true)
            .withPriority(TC_URGENT)
            .withActivityClass(TC_TASK)
            .withAssignedGroup(findGroupByName("Comp - TeamA"))
            .withType(TC_GENERAL)
            .withEscalationDate(BaseDate.addDays(-27))
            .withStatus(TC_COMPLETE)
            .withAutoGenerated(true)
            .withLastViewedDate(BaseDate.addDays(-2415))
            .withActivityPattern(findActivityPatternByCode("three_point_contact_employer"))
            .withSubject("3-point contact - Employer")
            .withAssignedUser(findUserByUserName("gickes"))
            .withTargetDate(BaseDate.addDays(-32)))
          .withActivity( new gw.api.databuilder.ActivityBuilder()
            .withAssignmentStatus(TC_ASSIGNED)
            .withAssignmentDate(BaseDate.addDays(-32))
            .withEscalated(false)
            .withRecurring(false)
            .withImportance(TC_NOTONCALENDAR)
            .withCloseDate(BaseDate.addDays(-32))
            .withMandatory(true)
            .withPriority(TC_URGENT)
            .withActivityClass(TC_TASK)
            .withAssignedGroup(findGroupByName("Comp - TeamA"))
            .withType(TC_GENERAL)
            .withEscalationDate(BaseDate.addDays(-27))
            .withStatus(TC_COMPLETE)
            .withAutoGenerated(true)
            .withLastViewedDate(BaseDate.addDays(-2415))
            .withActivityPattern(findActivityPatternByCode("three_point_contact_employee"))
            .withSubject("3-point contact - Employee")
            .withAssignedUser(findUserByUserName("gickes"))
            .withTargetDate(BaseDate.addDays(-32)))
          .withActivity( new gw.api.databuilder.ActivityBuilder()
            .withAssignmentStatus(TC_ASSIGNED)
            .withAssignmentDate(BaseDate.addDays(-32))
            .withEscalated(false)
            .withRecurring(false)
            .withImportance(TC_NOTONCALENDAR)
            .withCloseDate(BaseDate.addDays(-32))
            .withMandatory(true)
            .withPriority(TC_URGENT)
            .withActivityClass(TC_TASK)
            .withAssignedGroup(findGroupByName("Comp - TeamA"))
            .withType(TC_GENERAL)
            .withEscalationDate(BaseDate.addDays(-27))
            .withStatus(TC_COMPLETE)
            .withAutoGenerated(true)
            .withLastViewedDate(BaseDate.addDays(-2415))
            .withActivityPattern(findActivityPatternByCode("three_point_contact_medical_provider"))
            .withSubject("3-point contact - Medical Provider")
            .withAssignedUser(findUserByUserName("gickes"))
            .withTargetDate(BaseDate.addDays(-32)))
          .withClaimWorkComp(new gw.api.databuilder.ClaimWorkCompBuilder()
              .withClassCodeByLocation(true)
              .withDeathReport(false)
              .withCompensabilityDecision(CompensabilityDecision.TC_ACCEPTED)
              .withEmployerLiability(false)
              .withMedicalReport(true)
              .withTimeLossReport(true)
              .withDiscontinuedFringeBenefits(new CurrencyAmount(100))
              .withAccidentPremises(AccidentPremises.TC_EMPLOYER))
          .withDateReportedToEmployer(BaseDate.addDays(-7))
          .withEmploymentInjury(true)
          .withInjuredRegularJob(true)
          .withEmpQusValidity(YesNo.TC_NO)
          .withSafetyEquipProv(true)
          .withSafetyEquipUsed(true)
          .withDrugsInvolved(YesNo.TC_NO)
          .withConcurrentEmp(YesNo.TC_NO)
        .create(bundle)

      var claimInfoDemoSample3020 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:3020")
        .withClaimNumber("312-36-368889")
        .onClaim(claim)
        .create(bundle)

      var policyPeriodDemoSample70108 = new gw.api.databuilder.PolicyPeriodBuilder()
        .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claimInfoDemoSample3020))
        .withPolicyPeriodType(TC_POLICY)
        .withExpirationDate(BaseDate.addDays(274))
        .withPolicyNumber("34-386734")
        .withPublicId("demo_sample:70108")
        .withPolicyType(TC_WORKERSCOMP)
        .withEffectiveDate(BaseDate.addDays(-90))
        .create(bundle)

      new gw.api.databuilder.InjuryIncidentBuilder()
          .onClaim(claim)
          .withGeneralInjuryType(TC_SPECIFIC)
          .withDetailedInjuryType(DetailedInjuryType.TC_59)
          .withSeverity(TC_MINOR)
          .withDescription("Minor sprain to left ankle")
          .withMedicalTreatmentType(TC_ONE_DOCTOR)
          .withClaimIncident(true)
          .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
              .withPrimaryBodyPart(TC_LOWER)
              .withDetailedBodyPart(DetailedBodyPartType.TC_50)
              .withOrdering(100))
          .create(bundle)

      var exposureDemoSample30002 = new gw.api.databuilder.ExposureBuilder()
        .onClaim(claim)
        .withOtherCoverage(false)
        .withWCPreexDisblty(false)
        .withLossParty(TC_INSURED)
        .withExposureType(TC_WCINJURYDAMAGE)
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_WC_FAST)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_CA)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_WCWORKERSCOMPCOV)
        .withSegment(TC_WC_MED_ONLY)
        .withClaimOrder(1)
        .withPublicId("demo_sample:30002")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("gickes"))
        .withCoverageSubType(TC_WCWORKERSCOMPMED)
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder())
        .withContactInRole(contactDemoSample4006, ContactRole.TC_DOCTOR)
        .create(bundle)

      var exposureDemoSample150002 = new gw.api.databuilder.ExposureBuilder()
         .onClaim(claim)
        .withOtherCoverage(false)
        .withLossParty(TC_INSURED)
        .withDaysInWeek(TC_FIVE)
        .withExposureType(TC_LOSTWAGES)
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_WC_FAST)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_WCWORKERSCOMPCOV)
        .withProgress(TC_INVESTIGATION)
        .withAverageWeeklyWages(600bd.ofDefaultCurrency())
        .withClaimOrder(2)
        .withPublicId("demo_sample:150002")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("gickes"))
        .withCoverageSubType(TC_WCWORKERSCOMPWAGES)
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder())
        .create(bundle)
    })()

    (\->
    {
      var contactDemoSample3033 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Sallade")
        .withPublicId("demo_sample:3033")
        .withFirstName("Paul")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("245 Commerce Way")
          .withCountry(TC_US)
          .withPostalCode("91155")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Los Angeles"))
        .withWorkPhone("626-473-9576")
        .withLocalizedTaxID()
        .withClaimantIDType(ClaimantIDType.TC_S)
        .withSSNReleaseAuthorized(false)
        .withEducationLevel("12")
        .create(bundle)

      var contactDemoSample4013 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:4013")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("253 McAfee Ct.")
          .withCountry(TC_US)
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Thousand Oaks"))
        .withWorkPhone("213-475-9465")
        .withName("TR Grommett")
        .create(bundle)
        
      var sampleAccount3 = gw.api.databuilder.AccountBuilder
        .forHolder(createLocalFromAB("demo_acct:4013", accountHolders["ab:4013"], bundle))
        .withPublicId("sample_account:8093")
        .withAccountNumber("ACC12262")
        .withSpecialHandling(new AccountSpecialHandlingBuilder())
        .create(bundle)

      var contactDemoSample202 = new gw.api.databuilder.MedicalCareOrgBuilder()
        .withPublicId("demo_sample:202")
        .withPrimaryPhone(TC_WORK)
        .withPreferred(true)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1243 Fair Oaks Ave")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_HOME)
          .withCity("Pasadena"))
        .withVendorType(TC_DOCTOR)
        .withWorkPhone("626-473-9576")
        .withName("Arcadia Medical Group")
        .create(bundle)

      var contactDemoSample10056 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Albee")
        .withPublicId("demo_sample:10056")
        .withFirstName("Jennifer")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("354 Cactus Ln")
          .withCountry(TC_US)
          .withPostalCode("85716")
          .withState(State.TC_AZ)
          .withAddressType(TC_HOME)
          .withCity("Tucson"))
        .withWorkPhone("818-446-1206")
        .create(bundle)

      var classCodeDemoSample40001 = new gw.api.databuilder.ClassCodeBuilder()
          .withCode("881001")
          .withDescription("Clerical")
          .create(bundle)

      var classCodeDemoSample40002 = new gw.api.databuilder.ClassCodeBuilder()
          .withCode("901401")
          .withDescription("Janitorial")
          .create(bundle)

      var lossLocation = new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("846 Yount Ln.")
          .withCountry(TC_US)
          .withPostalCode("91357")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Hollywood")
          .create(bundle)

      var location101 = new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("55 California St")
          .withCountry(TC_US)
          .withPostalCode("61571")
          .withState(State.TC_IL)
          .withAddressType(TC_BUSINESS)
          .withCity("Washington")

      var policyLocation101 = new gw.api.databuilder.PolicyLocationBuilder()
          .withLocationNumber("101")
          .withAddress(location101)
          .create(bundle)

      var building101 = new gw.api.databuilder.BuildingBuilder()
          .withBuildingNumber("101")
          .onPolicyLocation(policyLocation101)
          .create(bundle)

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withIncidentReport(false)
        .withAssignmentStatus(TC_ASSIGNED)
        .withLossDate(BaseDate.addDays(-32))
        .withFlaggedReason("Paying Total Temp on minor injury after 4 weeks")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy(TC_WC_FAST)
        .withLossCause(LossCause.TC_MISCELLANEOUS)
        .withEmploymentData( new gw.api.databuilder.EmploymentDataBuilder()
          .withPayPeriod(TC_MONTHLY)
          .withOccupation("construction")
          .withPaidFull(true)
          .withHireState(State.TC_CA)
          .withLastWorkedDate(BaseDate.addDays(-32))
          .withWageAmount(750bd.ofDefaultCurrency())
          .withEmploymentStatus(TC_FULLTIME)
          .withInjuryStartTime(Coercions.makeDateFrom(DateUtil.currentDate().Time))
          .withNumDaysWorked(5)
          .withNumHoursWorked(8)
          .withWagePaymentCont(false)
          .withClassCode(classCodeDemoSample40002)
          .withHireDate(BaseDate.addDays(-3379))
          .withWorkStatusChange(new WorkStatusBuilder()
              .withStatus(WorkCapacity.TC_STOPPED_WORK)
              .withLastWorkedDate(BaseDate.addDays(-32))
              .withStatusDate(BaseDate.addDays(-32))))
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged(TC_NEVERFLAGGED)
        .withLossLocation(lossLocation)
        .withClaimNumber("312-36-369870")
        .withMainContactType(TC_EMPLOYEE)
        .withReportedByType(TC_EMPLOYEE)
        .withLossType(TC_WC)
        .withValidationLevel(TC_NEWLOSS)
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(274))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-3266))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_WC)
          .withEffectiveDate(BaseDate.addDays(-90))
          .withStatus(TC_INFORCE)
          .withWCStates("CA, NV")
          .withPolicyNumber("32-376869")
          .withPublicId("demo_sample:118")
          .withTotalProperties(1)
          .withPolicyType(TC_WORKERSCOMP)
          .withTotalVehicles(0)
          .withClassCode(classCodeDemoSample40001)
          .withClassCode(classCodeDemoSample40002)
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Labor Contractor Endorsement")
            .withFormNumber("WC 00 03 20 A"))
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Employers Liability Coverage Endorsement ")
            .withFormNumber("WC 00 03 03 B"))
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withIncidentLimit(100000bd.ofDefaultCurrency())
            .withType(TC_WCEMPLIABCOV)
            .withNotes("Bodily Injury By Accident")
            .withDeductible(10000bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withType(TC_WCEMPLIABCOV)
            .withNotes("Bodily Injury By Disease for Policy")
            .withDeductible(50000bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withType(TC_WCEMPLIABCOV)
            .withNotes("Bodily Injury By Disease per Employee")
            .withDeductible(1000bd.ofDefaultCurrency())
            .withExposureLimit(100000bd.ofDefaultCurrency()))
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(1)
            .withClassCode(classCodeDemoSample40001)
            .withBuilding(building101)
            .withPolicyLocation(policyLocation101))
          .withPolicyAccount(sampleAccount3)
          .withContactInRole(contactDemoSample4013, ContactRole.TC_INSURED)
          .withContactInRole(contactDemoSample10056, ContactRole.TC_AGENT))
        .withClaimantReportedDate(BaseDate.addDays(-32))
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withJurisdictionState(TC_CA)
        .withSegment(TC_WC_LOST_TIME)
        .withReportedDate(BaseDate.addDays(-32))
        .withCoverageInQuestion(false)
        .withLOBCode(TC_WORKERSCOMPLINE)
        .withPublicID("demo_sample:4001")
        .withDescription("Worker fell from 2nd story scaffolding")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("ljames"))
        .withContactInRole(contactDemoSample202, ContactRole.TC_CHECKPAYEE)
        .withContactInRole(contactDemoSample3033, ContactRole.TC_CHECKPAYEE)
        .withContactInRole(contactDemoSample3033, ContactRole.TC_CLAIMANT)
        .withContactInRole(contactDemoSample202, ContactRole.TC_HOSPITAL)
        .withContactInRole(contactDemoSample3033, ContactRole.TC_MAINCONTACT)
        .withContactInRole(contactDemoSample3033, ContactRole.TC_REPORTER)
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_GENERAL)
          .withAuthoringDate(BaseDate.addDays(-32))
          .withSubject("Initial phone call with employer")
          .withAuthor(findUserByUserName("cclark"))
          .withBody("Company reports that claimant was working on 2nd floor scaffolding, installing weather stripping.  According to co-workers, injured worker unclipped from safety harness in order to climb down frm the scaffolding and then lost his balance and fell to the ground.  The injured worker immediately got back up but complained of a sore leg and sore lower back.  A supervisor directed him to the doctor for initial treatment and reported the accident to the HR department."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_GENERAL)
          .withAuthoringDate(BaseDate.addDays(-29))
          .withSubject("Claim update")
          .withAuthor(findUserByUserName("ljames"))
          .withBody("I spoke with all three parties (claimant, account, doctor) and case seems very straightforward.  Foreman saw and confirms the accident, so I decided not to take formal witness statements.  Doctor confirmed bruises to the right leg and hip and a strained lower back.  The bruises were treated with ice and OTC pain medication.  The back injury appeared minor, but the worker will need to be absent from work for at least a week and until doctor can confirm that strain has recovered."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic(TC_GENERAL)
          .withAuthoringDate(BaseDate.addDays(-25))
          .withSubject("Phone call with claimant")
          .withAuthor(findUserByUserName("ljames"))
          .withBody("Spoke with the injured worker.  He says that he still experiences pain whenever bending over after 1 week but has no other complaints. "))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-4))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(3))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("med_clear_for_light_duty"))
          .withSubject("Check on medical clearance for light duty work")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-2)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("three_point_contact_employer"))
          .withSubject("3-point contact - Employer")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("three_point_contact_employee"))
          .withSubject("3-point contact - Employee")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("three_point_contact_medical_provider"))
          .withSubject("3-point contact - Medical Provider")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("first_report"))
          .withSubject("File Employer's First Notice")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority(TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("employee_notice"))
          .withSubject("Get Employee's Notice of Injury")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("wage_stmt"))
          .withSubject("Get wage statement and tax status")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(false)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(TC_SKIPPED)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("witness_statement"))
          .withSubject("Get a statement from witness")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-19))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-14))
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withDescription("Account threshold: $3000")
          .withActivityPattern(findActivityPatternByCode("notice_cost_above_threshold"))
          .withSubject("Notify account - expected cost above threshold")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-14)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withCloseDate(BaseDate.addDays(-22))
          .withMandatory(false)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(TC_COMPLETE)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("initial_30day_review"))
          .withSubject("10 day review")
          .withAssignedUser(findUserByUserName("wmotley"))
          .withTargetDate(BaseDate.addDays(-22)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-22))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(false)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("initial_30day_review"))
          .withSubject("30 day review")
          .withAssignedUser(findUserByUserName("wmotley"))
          .withTargetDate(BaseDate.addDays(-2)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-22))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(ImportanceLevel.TC_HIGH)
          .withMandatory(false)
          .withPriority(Priority.TC_HIGH)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("claim_acceptance"))
          .withSubject("Determine compensability")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(3)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-22))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(true)
          .withPriority(TC_NORMAL)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("LA Medical Mgmt"))
          .withType(TC_GENERAL)
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("medical_report_claimant"))
          .withSubject("Review medical treatments")
          .withAssignedUser(findUserByUserName("spierce"))
          .withTargetDate(BaseDate.addDays(8)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(ImportanceLevel.TC_HIGH)
          .withMandatory(true)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus(ActivityStatus.TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("claim_acceptance"))
          .withSubject("Determine compensability")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(ImportanceLevel.TC_MEDIUM)
          .withMandatory(false)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(ActivityStatus.TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("three_point_contact_employer"))
          .withSubject("3-point contact - Employer")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(1)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(ImportanceLevel.TC_MEDIUM)
          .withMandatory(false)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(ActivityStatus.TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("three_point_contact_employee"))
          .withSubject("3-point contact - Employee")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(1)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(ImportanceLevel.TC_MEDIUM)
          .withMandatory(false)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withStatus(ActivityStatus.TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("three_point_contact_medical_provider"))
          .withSubject("3-point contact - Medical Provider")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(1)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus(TC_ASSIGNED)
          .withAssignmentDate(BaseDate.addDays(-7))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance(TC_NOTONCALENDAR)
          .withMandatory(true)
          .withPriority(TC_URGENT)
          .withActivityClass(TC_TASK)
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType(TC_GENERAL)
          .withEscalationDate(BaseDate.addDays(5))
          .withStatus(TC_OPEN)
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("claim_ack_letter"))
          .withSubject("Send Notification Letter to Agent")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(0)))
        .withClaimWorkComp(new gw.api.databuilder.ClaimWorkCompBuilder()
            .withClassCodeByLocation(true)
            .withDeathReport(false)
            .withCompensabilityDecision(CompensabilityDecision.TC_ACCEPTED)
            .withEmployerLiability(true)
            .withMedicalReport(true)
            .withTimeLossReport(true)
            .withDiscontinuedFringeBenefits(new CurrencyAmount(100))
              .withAccidentPremises(AccidentPremises.TC_EMPLOYER))
        .withDateReportedToEmployer(BaseDate.addDays(-15))
        .withEmploymentInjury(true)
        .withInjuredRegularJob(true)
        .withEmpQusValidity(YesNo.TC_NO)
        .withSafetyEquipProv(true)
        .withSafetyEquipUsed(true)
        .withDrugsInvolved(YesNo.TC_NO)
        .withConcurrentEmp(YesNo.TC_NO)
        .create(bundle)

      var claimInfoDemoSample4001 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:4001")
        .withClaimNumber("312-36-369870")
        .onClaim(claim)
        .create(bundle)

      new gw.api.databuilder.InjuryIncidentBuilder()
          .onClaim(claim)
          .withGeneralInjuryType(TC_SPECIFIC)
          .withSeverity(TC_MINOR)
          .withDescription("Strained back and bruises to right leg from the fall")
          .withMedicalTreatmentType(TC_ONE_DOCTOR)
          .withDetailedInjuryType(DetailedInjuryType.TC_16)
          .withClaimIncident(true)
          .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
              .withPrimaryBodyPart(TC_TRUNK)
              .withDetailedBodyPart(TC_40)
              .withOrdering(100))
          .create(bundle)

      var exposureDemoSample40001 = new gw.api.databuilder.ExposureBuilder()
        .onClaim(claim)
        .withOtherCoverage(false)
        .withWCPreexDisblty(false)
        .withLossParty(TC_INSURED)
        .withExposureType(TC_WCINJURYDAMAGE)
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_WC_FAST)
        .withProgress(TC_INVESTIGATION)
        .withJurisdictionState(TC_CA)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_WCWORKERSCOMPCOV)
        .withSegment(TC_WC_MED_ONLY)
        .withClaimOrder(1)
        .withPublicId("demo_sample:40001")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("ljames"))
        .withCoverageSubType(TC_WCWORKERSCOMPMED)
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder())
        .create(bundle)

      var exposureDemoSample150003 = new gw.api.databuilder.ExposureBuilder()
        .onClaim(claim)
        .withOtherCoverage(false)
        .withLossParty(TC_INSURED)
        .withDaysInWeek(TC_FIVE)
        .withExposureType(TC_LOSTWAGES)
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_WC_FAST)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_WCWORKERSCOMPCOV)
        .withProgress(TC_INVESTIGATION)
        .withAverageWeeklyWages(750bd.ofDefaultCurrency())
        .withClaimOrder(2)
        .withPublicId("demo_sample:150003")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("ljames"))
        .withCoverageSubType(TC_WCWORKERSCOMPWAGES)
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder())
        .create(bundle)

      var exposureDemoSample170001 = new gw.api.databuilder.ExposureBuilder()
        .onClaim(claim)
        .withOtherCoverage(false)
        .withLossParty(TC_THIRD_PARTY)
        .withExposureType(TC_EMPLOYERLIABILITY)
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus(TC_ASSIGNED)
        .withStrategy(TC_WC_INVESTIGATE)
        .withProgress(TC_INVESTIGATION)
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage(TC_WCEMPLIABCOV)
        .withJurisdictionState(TC_CA)
        .withSegment(TC_WC_LIABILITY)
        .withClaimOrder(3)
        .withPublicId("demo_sample:170001")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("ljames"))
        .withCoverageSubType(TC_WCEMPLIABCOV)
        .withIncident( new gw.api.databuilder.IncidentBuilder()
          .withSeverity(TC_MODERATE_GEN))
        .create(bundle)

      var transactionSetDemoSample20022 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-21))
        .withRequestingUser(findUserByUserName("ljames"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20023 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-20))
        .withRequestingUser(findUserByUserName("ljames"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20024 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-13))
        .withRequestingUser(findUserByUserName("ljames"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20025 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-6))
        .withRequestingUser(findUserByUserName("ljames"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20026 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-7))
        .withRequestingUser(findUserByUserName("ljames"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20032 = new gw.api.databuilder.ReserveSetBuilder()
        .withApprovalDate(BaseDate.addDays(-9))
        .withRequestingUser(findUserByUserName("ljames"))
        .withApprovalStatus(TC_APPROVED)
        .onClaim(claim)
        .create(bundle)

      var reserveLineDemoSample29 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample150003)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_VOCATIONAL)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample30 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample150003)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_TTD)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample31 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample40001)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_CASEMGMT)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample32 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample40001)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_MEDICAL)
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample33 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample150003)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_SUPPLEMENTAL)
        .withClaim(claim)
        .create(bundle)

      var checkDemoSample10108 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-21))
        .withScheduledSendDate(BaseDate.addDays(-21))
        .withBankAccount(TC_DEFAULT)
        .onCheckSet(transactionSetDemoSample20022)
        .withPayTo("Paul Sallade")
        .withStatus(TC_ISSUED)
        .withPaymentMethod(TC_CHECK)
        .withCheckNumber("10444")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample3033)
              .withPayeeType(TC_CLAIMANT))
        .withType(TC_PRIMARY)
        .create(bundle)

      var checkDemoSample10109 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-20))
        .withScheduledSendDate(BaseDate.addDays(-20))
        .withBankAccount(TC_DEFAULT)
        .onCheckSet(transactionSetDemoSample20023)
        .withPayTo("Paul Sallade")
        .withStatus(TC_ISSUED)
        .withPaymentMethod(TC_CHECK)
        .withCheckNumber("10567")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample3033)
              .withPayeeType(TC_CLAIMANT))
        .withType(TC_PRIMARY)
        .create(bundle)

      var checkDemoSample10110 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-13))
        .withScheduledSendDate(BaseDate.addDays(-13))
        .withBankAccount(TC_DEFAULT)
        .onCheckSet(transactionSetDemoSample20024)
        .withPayTo("Paul Sallade")
        .withStatus(TC_ISSUED)
        .withPaymentMethod(TC_CHECK)
        .withCheckNumber("10690")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder().withPayee(contactDemoSample3033)
          .withPayeeType(TC_CLAIMANT))
        .withType(TC_PRIMARY)
        .create(bundle)

      var checkDemoSample10111 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-6))
        .withScheduledSendDate(BaseDate.addDays(-6))
        .withBankAccount(TC_DEFAULT)
        .onCheckSet(transactionSetDemoSample20025)
        .withPayTo("Paul Sallade")
        .withStatus(TC_ISSUED)
        .withPaymentMethod(TC_CHECK)
        .withCheckNumber("10813")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample3033)
              .withPayeeType(TC_CLAIMANT))
        .withType(TC_PRIMARY)
        .create(bundle)

      var checkDemoSample10112 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-7))
        .withScheduledSendDate(BaseDate.addDays(-7))
        .withBankAccount(TC_DEFAULT)
        .onCheckSet(transactionSetDemoSample20026)
        .withPayTo("Paul Sallade")
        .withStatus(TC_ISSUED)
        .withPaymentMethod(TC_CHECK)
        .withCheckNumber("10936")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample3033)
              .withPayeeType(TC_CLAIMANT))
        .withType(TC_PRIMARY)
        .create(bundle)

      var transactionDemoSample12032 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample29)
        .onExposure(exposureDemoSample150003)
        .onTransactionSet(transactionSetDemoSample20032)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_VOCATIONAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Voc Rehab Benefits")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12033 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample30)
        .onExposure(exposureDemoSample150003)
        .onTransactionSet(transactionSetDemoSample20032)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_TTD)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefits")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(4000bd.ofDefaultCurrency())
          .withClaimAmount(4000bd.ofDefaultCurrency())
          .withReservingAmount(4000bd.ofDefaultCurrency())
          .withTransactionAmount(4000bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12034 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample31)
        .onExposure(exposureDemoSample40001)
        .onTransactionSet(transactionSetDemoSample20032)
        .withCostType(TC_AOEXPENSE)
        .withCostCategory(TC_CASEMGMT)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Case Management")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12035 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample32)
        .onExposure(exposureDemoSample40001)
        .onTransactionSet(transactionSetDemoSample20032)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Emergency room visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(2500bd.ofDefaultCurrency())
          .withClaimAmount(2500bd.ofDefaultCurrency())
          .withReservingAmount(2500bd.ofDefaultCurrency())
          .withTransactionAmount(2500bd.ofDefaultCurrency())
          .withLineCategory(TC_HOSPITAL)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Chiropractor's visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_CHIRO)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12036 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample32)
        .onExposure(exposureDemoSample40001)
        .onTransactionSet(transactionSetDemoSample20032)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Emergency room visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(6500bd.ofDefaultCurrency())
          .withClaimAmount(6500bd.ofDefaultCurrency())
          .withReservingAmount(6500bd.ofDefaultCurrency())
          .withTransactionAmount(6500bd.ofDefaultCurrency())
          .withLineCategory(TC_HOSPITAL)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Therapy")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(1500bd.ofDefaultCurrency())
          .withClaimAmount(1500bd.ofDefaultCurrency())
          .withReservingAmount(1500bd.ofDefaultCurrency())
          .withTransactionAmount(1500bd.ofDefaultCurrency())
          .withLineCategory(TC_PT)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Medication")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_DRUGS)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12037 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample33)
        .onExposure(exposureDemoSample150003)
        .onTransactionSet(transactionSetDemoSample20032)
        .withCostType(TC_CLAIMCOST)
        .withCostCategory(TC_SUPPLEMENTAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Supplemental Earnings")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20026 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample30)
        .onTransactionSet(transactionSetDemoSample20023)
        .withCostCategory(TC_TTD)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10109)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample150003)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20027 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample32)
        .onTransactionSet(transactionSetDemoSample20022)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10108)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample40001)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Chiropractor's visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_CHIRO)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20028 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample32)
        .onTransactionSet(transactionSetDemoSample20022)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10108)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample40001)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Emergency room")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_HOSPITAL)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20029 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample30)
        .onTransactionSet(transactionSetDemoSample20024)
        .withCostCategory(TC_TTD)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10110)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample150003)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20030 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample30)
        .onTransactionSet(transactionSetDemoSample20025)
        .withCostCategory(TC_TTD)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10111)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample150003)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20031 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample32)
        .onTransactionSet(transactionSetDemoSample20022)
        .withCostCategory(TC_MEDICAL)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10108)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample40001)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Chiropractor's visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory(TC_CHIRO)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20032 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample30)
        .onTransactionSet(transactionSetDemoSample20026)
        .withCostCategory(TC_TTD)
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus(TC_SUBMITTED)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10112)
        .withPaymentType(TC_PARTIAL)
        .onExposure(exposureDemoSample150003)
        .withCostType(TC_CLAIMCOST)
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory(TC_OTHER)
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)
    })()

    (\->
    {
      var buildingDemoSample305 = new gw.api.databuilder.BuildingBuilder()
        .withBuildingNumber("101")
        .create(bundle)

      var buildingDemoSample306 = new gw.api.databuilder.BuildingBuilder()
        .withBuildingNumber("102")
        .create(bundle)

      var policyLocationDemoSample305 = new gw.api.databuilder.PolicyLocationBuilder()
        .withAddress(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("25 Commerce Way")
          .withCountry(TC_US)
          .withPostalCode("91155")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Los Angeles"))
        .withBuilding(buildingDemoSample305)
        .withBuilding(buildingDemoSample306)
        .create(bundle)

      var contactDemoSample30001 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:30001")
        .withPrimaryPhone(TC_WORK)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1245 Fair Oaks Ave")
          .withCountry(TC_US)
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Pasadena"))
        .withWorkPhone("847-279-3399")
        .withName("P&P Construction")
        .create(bundle)

      var contactDemoSample30011 = new gw.api.databuilder.PersonBuilder()
        .withPublicId("demo_sample:30011")
        .withLastName("Arlington")
        .withFirstName("Annabelle")
        .withPrimaryAddressSetEarly(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1237 Myrtle Ave")
          .withCountry(TC_US)
          .withPostalCode("29402")
          .withState(State.TC_SC)
          .withAddressType(TC_BUSINESS)
          .withCity("Charleston"))
        .withPrimaryPhone(TC_WORK)
        .withWorkPhone("843-553-2001")
        .withLocalizedTaxID()
        .withClaimantIDType(ClaimantIDType.TC_S)
        .withSSNReleaseAuthorized(false)
        .withEducationLevel("12")
        .create(bundle)
        
      var sampleAccount4 = gw.api.databuilder.AccountBuilder
        .forHolder(createLocalFromAB("demo_acct:30001", accountHolders["ab:30001"], bundle))
        .withPublicId("sample_account;8094")
        .withAccountNumber("ACC12263")
        .withSpecialHandling(new AccountSpecialHandlingBuilder())
        .create(bundle)

      var classCodeDemoSample301 = new gw.api.databuilder.ClassCodeBuilder()
        .withCode("881001")
        .withDescription("Clerical")
        .create(bundle)

      var classCodeDemoSample302 = new gw.api.databuilder.ClassCodeBuilder()
        .withCode("901401")
        .withDescription("Janitorial")
        .create(bundle)

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withIncidentReport(false)
        .withAssignmentStatus(TC_ASSIGNED)
        .withLossDate(BaseDate.addDays(-32))
        .withFlaggedReason("Paying Total Temp on minor injury after 4 weeks")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy(TC_WC_FAST)
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged(TC_NEVERFLAGGED)
        .withLossLocation(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("846 Yount Ln.")
          .withCountry(TC_US)
          .withPostalCode("91357")
          .withState(State.TC_CA)
          .withAddressType(TC_BUSINESS)
          .withCity("Hollywood"))
        .withClaimNumber("312-36-300870")
        .withMainContactType(TC_EMPLOYEE)
        .withReportedByType(TC_EMPLOYEE)
        .withLossType(TC_WC)
        .withValidationLevel(TC_NEWLOSS)
        .withLossCause(LossCause.TC_FALL)
        .withAccidentType(AccidentType.TC_31)
        .withEmploymentData( new gw.api.databuilder.EmploymentDataBuilder()
            .withPayPeriod(TC_MONTHLY)
            .withOccupation("construction")
            .withPaidFull(true)
            .withHireState(State.TC_CA)
            .withLastWorkedDate(BaseDate.addDays(-32))
            .withWageAmount(750bd.ofDefaultCurrency())
            .withEmploymentStatus(TC_FULLTIME)
            .withClassCode(classCodeDemoSample301)
            .withInjuryStartTime(DateUtil.currentDate() as java.util.Date)
            .withNumDaysWorked(5)
            .withNumHoursWorked(8)
            .withWagePaymentCont(false)
            .withHireDate(BaseDate.addDays(-3379))
            .withWorkStatusChange(new WorkStatusBuilder()
                .withStatus(WorkCapacity.TC_STOPPED_WORK)
                .withLastWorkedDate(BaseDate.addDays(-32))
                .withStatusDate(BaseDate.addDays(-32))))
        .withModifiedDutyAvail(false)
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(185))
          .withUnderwritingCo(TC_PARENT)
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-2005))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup(TC_ACME_WC)
          .withEffectiveDate(BaseDate.addDays(-180))
          .withStatus(TC_INFORCE)
          .withWCStates("CA, NV")
          .withPolicyNumber("32-300869")
          .withPublicId("demo_sample:30118")
          .withTotalProperties(4)
          .withPolicyType(TC_WORKERSCOMP)
          .withTotalVehicles(0)
          .withClassCode(classCodeDemoSample301)
          .withClassCode(classCodeDemoSample302)
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withIncidentLimit(500000bd.ofDefaultCurrency())
            .withType(TC_WCEMPLIABCOV)
            .withDeductible(100bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withIncidentLimit(750000bd.ofDefaultCurrency())
            .withType(TC_WCEMPLIABCOV)
            .withDeductible(100bd.ofDefaultCurrency()))
          .withRiskUnit( new gw.api.databuilder.WCCovEmpRUBuilder()
            .withBuilding(buildingDemoSample305)
            .withRUNumber(1)
            .withClassCode(classCodeDemoSample301)
            .withPolicyLocation(policyLocationDemoSample305))
          .withRiskUnit( new gw.api.databuilder.WCCovEmpRUBuilder()
            .withBuilding(buildingDemoSample305)
            .withRUNumber(2)
            .withClassCode(classCodeDemoSample302)
            .withPolicyLocation(policyLocationDemoSample305))
          .withRiskUnit( new gw.api.databuilder.WCCovEmpRUBuilder()
            .withBuilding(buildingDemoSample306)
            .withRUNumber(3)
            .withClassCode(classCodeDemoSample301)
            .withPolicyLocation(policyLocationDemoSample305))
          .withRiskUnit( new gw.api.databuilder.WCCovEmpRUBuilder()
            .withBuilding(buildingDemoSample306)
            .withRUNumber(4)
            .withClassCode(classCodeDemoSample302)
            .withPolicyLocation(policyLocationDemoSample305))
          .withPolicyAccount(sampleAccount4)
          .withContactInRole(contactDemoSample30001, ContactRole.TC_INSURED))
        .withClaimantReportedDate(BaseDate.addDays(-32))
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withJurisdictionState(TC_CA)
        .withSegment(TC_WC_LOST_TIME)
        .withReportedDate(BaseDate.addDays(-32))
        .withCoverageInQuestion(false)
        .withLOBCode(TC_WORKERSCOMPLINE)
        .withPublicID("demo_sample:30005")
        .withDescription("Worker fell from 2nd story scaffolding")
        .withState(TC_OPEN)
        .withAssignedUser(findUserByUserName("ljames"))
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
          .withDetailedInjuryType(DetailedInjuryType.TC_16)
          .withGeneralInjuryType(TC_SPECIFIC)
          .withSeverity(TC_MINOR)
          .withDescription("Strained back and bruises to right leg from the fall")
          .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
            .withPrimaryBodyPart(TC_TRUNK)
            .withDetailedBodyPart(TC_40))
          .withMedicalTreatmentType(TC_ONE_DOCTOR)
          .withClaimIncident(true))
        .withContactInRole(contactDemoSample30011, ContactRole.TC_CLAIMANT)
        .withContactInRole(contactDemoSample30011, ContactRole.TC_REPORTER)
        .withClaimWorkComp(new gw.api.databuilder.ClaimWorkCompBuilder()
            .withClassCodeByLocation(true)
            .withDeathReport(false)
            .withCompensabilityDecision(CompensabilityDecision.TC_ACCEPTED)
            .withEmployerLiability(false)
            .withMedicalReport(true)
            .withTimeLossReport(true)
            .withDiscontinuedFringeBenefits(new CurrencyAmount(100))
              .withAccidentPremises(AccidentPremises.TC_EMPLOYER))
        .withDateReportedToEmployer(BaseDate.addDays(-31))
        .withEmploymentInjury(true)
        .withInjuredRegularJob(true)
        .withEmpQusValidity(YesNo.TC_NO)
        .withSafetyEquipProv(true)
        .withSafetyEquipUsed(true)
        .withDrugsInvolved(YesNo.TC_NO)
        .withConcurrentEmp(YesNo.TC_NO)
        .create(bundle)

      new gw.api.databuilder.ActivityBuilder()
          .onClaim(claim)
          .withStatus(TC_COMPLETE)
          .withActivityPattern(findActivityPatternByCode("three_point_contact_employer"))
          .withTargetDate(DateUtil.currentDate().addDays(3))
          .assignedToClaimOwner()
          .create(bundle)
      new gw.api.databuilder.ActivityBuilder()
          .onClaim(claim)
          .withStatus(TC_OPEN)
          .withActivityPattern(findActivityPatternByCode("three_point_contact_employee"))
          .withTargetDate(DateUtil.currentDate().addDays(3))
          .assignedToClaimOwner()
          .create(bundle)
      new gw.api.databuilder.ActivityBuilder()
          .onClaim(claim)
          .withStatus(TC_OPEN)
          .withActivityPattern(findActivityPatternByCode("three_point_contact_medical_provider"))
          .withTargetDate(DateUtil.currentDate().addDays(-3))
          .assignedToClaimOwner()
          .create(bundle)

      var claimInfoDemoSample30005 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:30005")
        .withClaimNumber("312-36-300870")
        .onClaim(claim)
        .create(bundle)

    })()
  }
}
