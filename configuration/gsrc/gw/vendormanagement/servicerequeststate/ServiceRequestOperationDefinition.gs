package gw.vendormanagement.servicerequeststate

uses gw.lang.reflect.features.IPropertyReference

uses java.util.Date
uses java.util.Map
uses java.util.List

/**
 * A definition of an operation that can be performed on a Service Request that might change the State.
 * The fields in this class make extensive use of Gosu blocks to return a value based on a Service Request
 * (along with context information, in some cases) or to make a change to a Service Request. For more
 * information about how to create blocks to set on the field values, please refer to the implementations of
 * ServiceRequestStateHandler in the base ClaimCenter configuration and to the Gosu Reference Guide.
 */
@Export
class ServiceRequestOperationDefinition {
  /**
   * a block that returns whether the operation should be available based on the current state of the service request<br>
   * Note: all operations are automatically unavailable on a service request that has been promoted, regardless of the value
   * of this expression.
   * Note: in the current implementation, OperationContext is always null
   */
  var availableExpression : block(sr: ServiceRequest, context : OperationContext = null) : boolean as AvailableExpression = \sr, context -> true

  /**
   * a block that returns whether the operation should be available to specialists when AvailableExpression also evaluates to
   * true; an operation is never available when AvailableExpression is false, regardless of the value of this expression;
   * a specialist will usually perform operations through the ServiceRequestAPI webservice
   * Note: in the current implementation, OperationContext is always null
   */
  var availableToSpecialistExpression : block(sr: ServiceRequest, context : OperationContext = null) : boolean as AvailableToSpecialistExpression = \sr, context -> true

  /** a block that returns the ServiceRequestProgress to transition to; returns the existing value if it should not change */
  var newProgressExpression : block(sr: ServiceRequest, context : OperationContext) : ServiceRequestProgress as NewProgressExpression = \sr, context -> sr.Progress

  /** a block that returns the ServiceRequestQuoteStatus to transition to; returns the existing value if it should not change */
  var newQuoteStatusExpression : block(sr: ServiceRequest, context : OperationContext) : ServiceRequestQuoteStatus as NewQuoteStatusExpression = \sr, context -> sr.QuoteStatus
  
  /** an optional block to execute when performing this operation - for example, sending a request to the specialist */
  var actionExpression : block(sr: ServiceRequest, context: OperationContext) as ActionExpression = \sr,c -> {}

  /** a block that returns the message that will appear in the service request history event generated by ServiceRequest.performOperation */
  var descriptionExpression : block(sr: ServiceRequest, context: OperationContext) : String as DescriptionExpression = \sr,c -> c.Operation.DisplayName

  function available(sr : ServiceRequest) : boolean {
    return true
  }

  /**
   * A set of fields that are available for use by certain operations. Each ServiceRequestOperation defines which context fields
   * it expects, and callers of performOperation are expected to pass a context with the fields for that operation populated.
   * <b>Important: The values provided through the context are for read-only use only -- action expressions should not modify them.</b>
   */
  static class OperationContext {
    /**
     * The operation being performed. This field is set automatically; it should not be
     * set on the context passed to performOperation and it should not be declared as required by any ServiceRequestOperation.
     */
    var _operation: ServiceRequestOperation as Operation
    /**
     * True if the operation is being performed by a specialist. This field is set automatically; it should not be
     * set on the context passed to performOperation and it should not be declared as required by any ServiceRequestOperation.
     */
    var _performedBySpecialist: Boolean as PerformedBySpecialist

    var _statement: ServiceRequestStatement as Statement
    var _expectedCompletionDate: Date as ExpectedCompletionDate
    var _requestedCompletionDate: Date as RequestedCompletionDate
    var _reason: String as Reason
    var _originalDate: Date as OriginalDate

    construct() {
    }

    construct(originalContext : OperationContext) {
      for (field in OperationContext.Type.TypeInfo.DeclaredProperties) {
        var accessor = field.Accessor
        accessor.setValue(this, accessor.getValue(originalContext))
      }
    }
  }
  
  static function getRequiredFields(operation : ServiceRequestOperation) : List<IPropertyReference> {
    return REQUIRED_FIELDS.containsKey(operation) ? REQUIRED_FIELDS[operation] : {}
  }
  
  /**
   * A map of ServiceRequestOperation to the sets of required fields.  If an operation does not appear in the map, it does not have any required fields.
   */
  private static final var REQUIRED_FIELDS : Map<ServiceRequestOperation, List<IPropertyReference>> = {
      TC_SPECIALISTACCEPTEDWORK -> {OperationContext#ExpectedCompletionDate},
      TC_SPECIALISTWAITING      -> {OperationContext#Reason},
      TC_ADDQUOTE               -> {OperationContext#Statement},
      TC_ADDINVOICE             -> {OperationContext#Statement},
      TC_SPECIALISTDECLINED     -> {OperationContext#Reason},
      TC_SPECIALISTCANCELED     -> {OperationContext#Reason},
      TC_APPROVEQUOTE           -> {OperationContext#RequestedCompletionDate, OperationContext#Statement},
      TC_REQUESTREQUOTE         -> {OperationContext#Reason, OperationContext#RequestedCompletionDate, OperationContext#Statement},
      TC_UPDATEQUOTEECD         -> {OperationContext#ExpectedCompletionDate, OperationContext#OriginalDate, OperationContext#Reason},
      TC_UPDATESERVICEECD       -> {OperationContext#ExpectedCompletionDate, OperationContext#OriginalDate, OperationContext#Reason},
      TC_CANCELSERVICEREQUEST   -> {OperationContext#Reason},
      TC_REJECTINVOICE          -> {ServiceRequestInvoiceOperationDefinition.OperationContext#Reason},
      TC_WITHDRAWINVOICE        -> {ServiceRequestInvoiceOperationDefinition.OperationContext#Reason},
      TC_UNPAYINVOICE           -> {ServiceRequestInvoiceOperationDefinition.OperationContext#Reason}
  }
}
